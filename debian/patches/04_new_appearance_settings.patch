Index: gnome-control-center-3.6.2/panels/appearance/Makefile.am
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/Makefile.am	2012-11-01 23:12:51.321697490 -0400
@@ -0,0 +1,90 @@
+# This is used in PANEL_CFLAGS
+cappletname = appearance
+
+uidir = $(pkgdatadir)/ui/appearance
+dist_ui_DATA = \
+	appearance.ui
+
+slideshowicondir = $(datadir)/icons/hicolor/scalable/categories/
+dist_slideshowicon_DATA = slideshow-symbolic.svg
+
+slideshowemblemdir = $(datadir)/icons/hicolor/scalable/emblems/
+dist_slideshowemblem_DATA = slideshow-emblem.svg
+
+INCLUDES =						\
+	$(PANEL_CFLAGS)					\
+	$(APPEARANCE_PANEL_CFLAGS)			\
+	-DGNOMELOCALEDIR="\"$(datadir)/locale\""	\
+	-DGNOMECC_DATA_DIR="\"$(pkgdatadir)\""		\
+	-DDATADIR="\"$(uidir)\""			\
+	-DGNOME_DESKTOP_USE_UNSTABLE_API		\
+	$(NULL)
+
+ccpanelsdir = $(PANELS_DIR)
+ccpanels_LTLIBRARIES = libappearance.la
+
+BUILT_SOURCES =            \
+	gdesktop-enums-types.c \
+	gdesktop-enums-types.h
+
+libappearance_la_SOURCES =		\
+	$(BUILT_SOURCES)		\
+	background-module.c		\
+	cc-appearance-panel.c		\
+	cc-appearance-panel.h		\
+	cc-appearance-item.c		\
+	cc-appearance-item.h		\
+	cc-appearance-xml.c		\
+	cc-appearance-xml.h		\
+	bg-source.c			\
+	bg-source.h			\
+	bg-pictures-source.c		\
+	bg-pictures-source.h		\
+	bg-wallpapers-source.c		\
+	bg-wallpapers-source.h		\
+	bg-colors-source.c		\
+	bg-colors-source.h
+
+
+libappearance_la_LIBADD = $(PANEL_LIBS) $(APPEARANCE_PANEL_LIBS)
+libappearance_la_LDFLAGS = $(PANEL_LDFLAGS)
+
+if WITH_LIBSOCIALWEB
+libappearance_la_SOURCES += bg-flickr-source.c bg-flickr-source.h
+INCLUDES += $(SOCIALWEB_CFLAGS)
+libappearance_la_LIBADD += $(SOCIALWEB_LIBS)
+endif
+
+gdesktop-enums-types.h: stamp-gdesktop-enums-types.h
+	@true
+
+stamp-gdesktop-enums-types.h: $(GDESKTOP_PREFIX)/include/gsettings-desktop-schemas/gdesktop-enums.h cc-appearance-item.h Makefile
+	$(AM_V_GEN) (cd $(srcdir) && $(GLIB_MKENUMS) \
+			--fhead "#ifndef __GDESKTOP_ENUMS_TYPES_H__\n#define __GDESKTOP_ENUMS_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n" \
+			--fprod "/* enumerations from \"@filename@\" */\n" \
+			--vhead "GType @enum_name@_get_type (void) G_GNUC_CONST;\n#define G_DESKTOP_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n" \
+			--ftail "G_END_DECLS\n\n#endif /* __GDESKTOP_ENUMS_TYPES_H__ */" $(GDESKTOP_PREFIX)/include/gsettings-desktop-schemas/gdesktop-enums.h cc-appearance-item.h) >> xgen-gtbh \
+	&& (cmp -s xgen-gtbh gdesktop-enums-types.h || cp xgen-gtbh gdesktop-enums-types.h ) \
+	&& rm -f xgen-gtbh \
+	&& echo timestamp > $(@F)
+
+gdesktop-enums-types.c: $(GDESKTOP_PREFIX)/include/gsettings-desktop-schemas/gdesktop-enums.h cc-appearance-item.h Makefile gdesktop-enums-types.h
+	$(AM_V_GEN) (cd $(srcdir) && $(GLIB_MKENUMS) \
+			--fhead "#include <gdesktop-enums.h>\n#include \"gdesktop-enums-types.h\"\n#include \"cc-appearance-item.h\"" \
+			--fprod "\n/* enumerations from \"@filename@\" */" \
+			--vhead "GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {" \
+			--vprod "      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" }," \
+			--vtail "      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n" \
+		$(GDESKTOP_PREFIX)/include/gsettings-desktop-schemas/gdesktop-enums.h cc-appearance-item.h) > xgen-gtbc \
+	&& cp xgen-gtbc gdesktop-enums-types.c  \
+	&& rm -f xgen-gtbc
+
+@INTLTOOL_DESKTOP_RULE@
+
+desktopdir = $(datadir)/applications
+desktop_in_files = gnome-appearance-panel.desktop.in
+desktop_DATA = $(desktop_in_files:.desktop.in=.desktop)
+
+CLEANFILES = $(desktop_in_files) $(desktop_DATA) $(BUILT_SOURCES) stamp-gdesktop-enums-types.h
+
+-include $(top_srcdir)/git.mk
Index: gnome-control-center-3.6.2/panels/appearance/background-module.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/background-module.c	2012-11-01 23:12:51.321697490 -0400
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#include <config.h>
+
+#include "cc-appearance-panel.h"
+
+#include <glib/gi18n.h>
+
+void
+g_io_module_load (GIOModule *module)
+{
+  bindtextdomain (GETTEXT_PACKAGE, GNOMELOCALEDIR);
+  bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
+
+  /* register the panel */
+  cc_appearance_panel_register (module);
+}
+
+void
+g_io_module_unload (GIOModule *module)
+{
+}
Index: gnome-control-center-3.6.2/panels/appearance/bg-colors-source.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-colors-source.c	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,134 @@
+/* bg-colors-source.c */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#include <config.h>
+#include "bg-colors-source.h"
+
+#include "cc-appearance-item.h"
+
+#include <glib/gi18n-lib.h>
+#include <gdesktop-enums.h>
+
+G_DEFINE_TYPE (BgColorsSource, bg_colors_source, BG_TYPE_SOURCE)
+
+#define COLORS_SOURCE_PRIVATE(o) \
+  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BG_TYPE_COLORS_SOURCE, BgColorsSourcePrivate))
+
+static void
+bg_colors_source_class_init (BgColorsSourceClass *klass)
+{
+}
+
+struct {
+	const char *name;
+	GDesktopBackgroundShading type;
+	int orientation;
+} items[] = {
+	{ N_("Horizontal Gradient"), G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL, GTK_ORIENTATION_HORIZONTAL },
+	{ N_("Vertical Gradient"), G_DESKTOP_BACKGROUND_SHADING_VERTICAL, GTK_ORIENTATION_VERTICAL },
+	{ N_("Solid Color"), G_DESKTOP_BACKGROUND_SHADING_SOLID, -1 },
+};
+
+#define PCOLOR "#023c88"
+#define SCOLOR "#5789ca"
+
+static GEmblem *
+get_arrow_icon (GtkOrientation orientation)
+{
+  GIcon *themed;
+  GEmblem *emblem;
+  if (orientation == GTK_ORIENTATION_HORIZONTAL)
+    themed = g_themed_icon_new ("go-next-symbolic");
+  else
+    themed = g_themed_icon_new ("go-down-symbolic");
+  emblem = g_emblem_new_with_origin (themed, G_EMBLEM_ORIGIN_DEVICE);
+  g_object_unref (themed);
+  return emblem;
+}
+
+static void
+bg_colors_source_init (BgColorsSource *self)
+{
+  GnomeDesktopThumbnailFactory *thumb_factory;
+  guint i;
+  GtkListStore *store;
+
+  store = bg_source_get_liststore (BG_SOURCE (self));
+
+  thumb_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_NORMAL);
+
+  for (i = 0; i < G_N_ELEMENTS (items); i++)
+    {
+      CcAppearanceItemFlags flags;
+      CcAppearanceItem *item;
+      GIcon *pixbuf;
+
+      item = cc_appearance_item_new (NULL);
+      flags = CC_APPEARANCE_ITEM_HAS_PCOLOR |
+	      CC_APPEARANCE_ITEM_HAS_SCOLOR |
+	      CC_APPEARANCE_ITEM_HAS_SHADING |
+	      CC_APPEARANCE_ITEM_HAS_PLACEMENT |
+	      CC_APPEARANCE_ITEM_HAS_URI;
+      /* It does have a URI, it's "none" */
+
+      g_object_set (G_OBJECT (item),
+		    "name", _(items[i].name),
+		    "primary-color", PCOLOR,
+		    "secondary-color", SCOLOR,
+		    "shading", items[i].type,
+		    "placement", G_DESKTOP_BACKGROUND_STYLE_NONE,
+		    "flags", flags,
+		    NULL);
+
+      /* insert the item into the liststore */
+      pixbuf = cc_appearance_item_get_thumbnail (item,
+						 thumb_factory,
+						 THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT);
+      if (items[i].orientation != -1)
+        {
+          GEmblem *emblem;
+          GIcon *icon;
+
+	  emblem = get_arrow_icon (items[i].orientation);
+	  icon = g_emblemed_icon_new (G_ICON (pixbuf), emblem);
+	  g_object_unref (emblem);
+	  g_object_unref (pixbuf);
+	  pixbuf = icon;
+	}
+      gtk_list_store_insert_with_values (store, NULL, 0,
+                                         0, pixbuf,
+                                         1, item,
+                                         2, _(items[i].name),
+                                         -1);
+
+      g_object_unref (pixbuf);
+    }
+
+  g_object_unref (thumb_factory);
+}
+
+BgColorsSource *
+bg_colors_source_new (void)
+{
+  return g_object_new (BG_TYPE_COLORS_SOURCE, NULL);
+}
+
Index: gnome-control-center-3.6.2/panels/appearance/bg-colors-source.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-colors-source.h	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,72 @@
+/* bg-colors-source.h */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#ifndef _BG_COLORS_SOURCE_H
+#define _BG_COLORS_SOURCE_H
+
+#include <gtk/gtk.h>
+#include "bg-source.h"
+
+G_BEGIN_DECLS
+
+#define BG_TYPE_COLORS_SOURCE bg_colors_source_get_type()
+
+#define BG_COLORS_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+  BG_TYPE_COLORS_SOURCE, BgColorsSource))
+
+#define BG_COLORS_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), \
+  BG_TYPE_COLORS_SOURCE, BgColorsSourceClass))
+
+#define BG_IS_COLORS_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
+  BG_TYPE_COLORS_SOURCE))
+
+#define BG_IS_COLORS_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
+  BG_TYPE_COLORS_SOURCE))
+
+#define BG_COLORS_SOURCE_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
+  BG_TYPE_COLORS_SOURCE, BgColorsSourceClass))
+
+typedef struct _BgColorsSource BgColorsSource;
+typedef struct _BgColorsSourceClass BgColorsSourceClass;
+
+struct _BgColorsSource
+{
+  BgSource parent;
+};
+
+struct _BgColorsSourceClass
+{
+  BgSourceClass parent_class;
+};
+
+GType bg_colors_source_get_type (void) G_GNUC_CONST;
+
+BgColorsSource *bg_colors_source_new (void);
+
+G_END_DECLS
+
+#endif /* _BG_COLORS_SOURCE_H */
Index: gnome-control-center-3.6.2/panels/appearance/bg-flickr-source.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-flickr-source.c	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,169 @@
+/* bg-flickr-source.c */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#include "bg-flickr-source.h"
+
+#include <libsocialweb-client/sw-client.h>
+#include <libsocialweb-client/sw-item.h>
+#include <libsocialweb-client/sw-client-service.h>
+
+#include "cc-appearance-item.h"
+#include <gdesktop-enums.h>
+
+G_DEFINE_TYPE (BgFlickrSource, bg_flickr_source, BG_TYPE_SOURCE)
+
+#define FLICKR_SOURCE_PRIVATE(o) \
+  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BG_TYPE_FLICKR_SOURCE, BgFlickrSourcePrivate))
+
+struct _BgFlickrSourcePrivate
+{
+  SwClient *client;
+  SwClientService *service;
+};
+
+
+static void
+bg_flickr_source_dispose (GObject *object)
+{
+  BgFlickrSourcePrivate *priv = BG_FLICKR_SOURCE (object)->priv;
+
+  if (priv->client)
+    {
+      g_object_unref (priv->client);
+      priv->client = NULL;
+    }
+
+  if (priv->service)
+    {
+      g_object_unref (priv->service);
+      priv->service = NULL;
+    }
+
+  G_OBJECT_CLASS (bg_flickr_source_parent_class)->dispose (object);
+}
+
+static void
+bg_flickr_source_finalize (GObject *object)
+{
+  G_OBJECT_CLASS (bg_flickr_source_parent_class)->finalize (object);
+}
+
+static void
+bg_flickr_source_class_init (BgFlickrSourceClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  g_type_class_add_private (klass, sizeof (BgFlickrSourcePrivate));
+
+  object_class->dispose = bg_flickr_source_dispose;
+  object_class->finalize = bg_flickr_source_finalize;
+}
+
+static void
+_view_items_added_cb (SwClientItemView *item_view,
+                      GList            *items,
+                      gpointer          userdata)
+{
+  GList *l;
+  BgFlickrSource *source = (BgFlickrSource *) userdata;
+  GtkListStore *store = bg_source_get_liststore (BG_SOURCE (source));
+
+  for (l = items; l; l = l->next)
+    {
+      CcAppearanceItem *item;
+      GdkPixbuf *pixbuf;
+      SwItem *sw_item = (SwItem *) l->data;
+      const gchar *thumb_url;
+
+      item = cc_appearance_item_new (NULL);
+
+      g_object_set (G_OBJECT (item),
+		    "placement", G_DESKTOP_BACKGROUND_STYLE_ZOOM,
+		    "name", sw_item_get_value (sw_item, "title"),
+		    "primary-color", "#000000000000",
+		    "seconday-color", "#000000000000",
+		    "shading", G_DESKTOP_BACKGROUND_SHADING_SOLID,
+		    "source-url", sw_item_get_value (sw_item, "x-flickr-photo-url"),
+		    NULL);
+
+      //FIXME
+//      cc_appearance_item_ensure_gnome_bg (item);
+
+      /* insert the item into the liststore */
+      thumb_url = sw_item_get_value (sw_item, "thumbnail");
+      pixbuf = gdk_pixbuf_new_from_file_at_scale (thumb_url, THUMBNAIL_WIDTH,
+                                                  THUMBNAIL_HEIGHT, TRUE,
+                                                  NULL);
+      gtk_list_store_insert_with_values (store, NULL, 0,
+                                         0, pixbuf,
+                                         1, item,
+                                         -1);
+      g_object_unref (pixbuf);
+    }
+}
+
+static void
+_query_open_view_cb (SwClientService  *service,
+                     SwClientItemView *item_view,
+                     gpointer          userdata)
+{
+
+  if (!item_view)
+  {
+    g_warning ("Could not connect to Flickr service");
+    return;
+  }
+
+  g_signal_connect (item_view,
+                    "items-added",
+                    (GCallback)_view_items_added_cb,
+                    userdata);
+  sw_client_item_view_start (item_view);
+}
+
+static void
+bg_flickr_source_init (BgFlickrSource *self)
+{
+  GnomeDesktopThumbnailFactory *thumb_factory;
+  BgFlickrSourcePrivate *priv;
+
+  priv = self->priv = FLICKR_SOURCE_PRIVATE (self);
+
+  priv->client = sw_client_new ();
+  priv->service = sw_client_get_service (priv->client, "flickr");
+  sw_client_service_query_open_view (priv->service,
+                                     "feed",
+                                     NULL,
+                                     _query_open_view_cb,
+                                     self);
+
+  thumb_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_NORMAL);
+
+  g_object_unref (thumb_factory);
+}
+
+BgFlickrSource *
+bg_flickr_source_new (void)
+{
+  return g_object_new (BG_TYPE_FLICKR_SOURCE, NULL);
+}
+
Index: gnome-control-center-3.6.2/panels/appearance/bg-flickr-source.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-flickr-source.h	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,75 @@
+/* bg-flickr-source.h */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#ifndef _BG_FLICKR_SOURCE_H
+#define _BG_FLICKR_SOURCE_H
+
+#include <gtk/gtk.h>
+#include "bg-source.h"
+
+G_BEGIN_DECLS
+
+#define BG_TYPE_FLICKR_SOURCE bg_flickr_source_get_type()
+
+#define BG_FLICKR_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+  BG_TYPE_FLICKR_SOURCE, BgFlickrSource))
+
+#define BG_FLICKR_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), \
+  BG_TYPE_FLICKR_SOURCE, BgFlickrSourceClass))
+
+#define BG_IS_FLICKR_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
+  BG_TYPE_FLICKR_SOURCE))
+
+#define BG_IS_FLICKR_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
+  BG_TYPE_FLICKR_SOURCE))
+
+#define BG_FLICKR_SOURCE_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
+  BG_TYPE_FLICKR_SOURCE, BgFlickrSourceClass))
+
+typedef struct _BgFlickrSource BgFlickrSource;
+typedef struct _BgFlickrSourceClass BgFlickrSourceClass;
+typedef struct _BgFlickrSourcePrivate BgFlickrSourcePrivate;
+
+struct _BgFlickrSource
+{
+  BgSource parent;
+
+  BgFlickrSourcePrivate *priv;
+};
+
+struct _BgFlickrSourceClass
+{
+  BgSourceClass parent_class;
+};
+
+GType bg_flickr_source_get_type (void) G_GNUC_CONST;
+
+BgFlickrSource *bg_flickr_source_new (void);
+
+G_END_DECLS
+
+#endif /* _BG_FLICKR_SOURCE_H */
Index: gnome-control-center-3.6.2/panels/appearance/bg-pictures-source.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-pictures-source.c	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,501 @@
+/* bg-pictures-source.c */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#include "bg-pictures-source.h"
+
+#include "cc-appearance-item.h"
+
+#include <string.h>
+#include <gio/gio.h>
+#include <libgnome-desktop/gnome-desktop-thumbnail.h>
+#include <gdesktop-enums.h>
+
+G_DEFINE_TYPE (BgPicturesSource, bg_pictures_source, BG_TYPE_SOURCE)
+
+#define PICTURES_SOURCE_PRIVATE(o) \
+  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BG_TYPE_PICTURES_SOURCE, BgPicturesSourcePrivate))
+
+#define ATTRIBUTES G_FILE_ATTRIBUTE_STANDARD_NAME "," \
+	G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE
+
+struct _BgPicturesSourcePrivate
+{
+  GCancellable *cancellable;
+
+  GnomeDesktopThumbnailFactory *thumb_factory;
+
+  GHashTable *known_items;
+};
+
+static char *bg_pictures_source_get_unique_filename (const char *uri);
+
+static void
+bg_pictures_source_get_property (GObject    *object,
+                                  guint       property_id,
+                                  GValue     *value,
+                                  GParamSpec *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+bg_pictures_source_set_property (GObject      *object,
+                                  guint         property_id,
+                                  const GValue *value,
+                                  GParamSpec   *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+bg_pictures_source_dispose (GObject *object)
+{
+  BgPicturesSourcePrivate *priv = BG_PICTURES_SOURCE (object)->priv;
+
+  if (priv->cancellable)
+    {
+      g_cancellable_cancel (priv->cancellable);
+      g_object_unref (priv->cancellable);
+      priv->cancellable = NULL;
+    }
+
+  if (priv->thumb_factory)
+    {
+      g_object_unref (priv->thumb_factory);
+      priv->thumb_factory = NULL;
+    }
+
+  G_OBJECT_CLASS (bg_pictures_source_parent_class)->dispose (object);
+}
+
+static void
+bg_pictures_source_finalize (GObject *object)
+{
+  BgPicturesSource *bg_source = BG_PICTURES_SOURCE (object);
+
+  if (bg_source->priv->thumb_factory)
+    {
+      g_object_unref (bg_source->priv->thumb_factory);
+      bg_source->priv->thumb_factory = NULL;
+    }
+
+  if (bg_source->priv->known_items)
+    {
+      g_hash_table_destroy (bg_source->priv->known_items);
+      bg_source->priv->known_items = NULL;
+    }
+
+  G_OBJECT_CLASS (bg_pictures_source_parent_class)->finalize (object);
+}
+
+static void
+bg_pictures_source_class_init (BgPicturesSourceClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  g_type_class_add_private (klass, sizeof (BgPicturesSourcePrivate));
+
+  object_class->get_property = bg_pictures_source_get_property;
+  object_class->set_property = bg_pictures_source_set_property;
+  object_class->dispose = bg_pictures_source_dispose;
+  object_class->finalize = bg_pictures_source_finalize;
+}
+
+static void
+picture_scaled (GObject *source_object,
+                GAsyncResult *res,
+                gpointer user_data)
+{
+  BgPicturesSource *bg_source = BG_PICTURES_SOURCE (user_data);
+  CcAppearanceItem *item;
+  GError *error = NULL;
+  GdkPixbuf *pixbuf;
+  const char *source_url;
+
+  GtkTreeIter iter;
+  GtkListStore *store;
+
+  store = bg_source_get_liststore (BG_SOURCE (bg_source));
+  item = g_object_get_data (source_object, "item");
+
+  pixbuf = gdk_pixbuf_new_from_stream_finish (res, &error);
+  if (pixbuf == NULL)
+    {
+      g_warning ("Failed to load image: %s", error->message);
+      g_error_free (error);
+      g_object_unref (item);
+      return;
+    }
+
+  /* insert the item into the liststore */
+  gtk_list_store_insert_with_values (store, &iter, 0,
+                                     0, pixbuf,
+                                     1, item,
+                                     -1);
+  source_url = cc_appearance_item_get_source_url (item);
+  if (source_url != NULL)
+    {
+      g_hash_table_insert (bg_source->priv->known_items,
+			   bg_pictures_source_get_unique_filename (source_url), GINT_TO_POINTER (TRUE));
+    }
+  else
+    {
+      char *cache_path;
+      GFile *file, *parent, *dir;
+
+      cache_path = bg_pictures_source_get_cache_path ();
+      dir = g_file_new_for_path (cache_path);
+      g_free (cache_path);
+
+      file = g_file_new_for_uri (cc_appearance_item_get_uri (item));
+      parent = g_file_get_parent (file);
+
+      if (g_file_equal (parent, dir))
+        {
+          char *basename;
+          basename = g_file_get_basename (file);
+	  g_hash_table_insert (bg_source->priv->known_items,
+			       basename, GINT_TO_POINTER (TRUE));
+	}
+      g_object_unref (file);
+      g_object_unref (parent);
+    }
+
+  g_object_unref (pixbuf);
+}
+
+static void
+picture_opened_for_read (GObject *source_object,
+                         GAsyncResult *res,
+                         gpointer user_data)
+{
+  BgPicturesSource *bg_source = BG_PICTURES_SOURCE (user_data);
+  CcAppearanceItem *item;
+  GFileInputStream *stream;
+  GError *error = NULL;
+
+  item = g_object_get_data (source_object, "item");
+  stream = g_file_read_finish (G_FILE (source_object), res, &error);
+  if (stream == NULL)
+    {
+      char *filename;
+
+      filename = g_file_get_path (G_FILE (source_object));
+      g_warning ("Failed to load picture '%s': %s", filename, error->message);
+      g_free (filename);
+      g_error_free (error);
+      g_object_unref (item);
+      return;
+    }
+
+  g_object_set_data (G_OBJECT (stream), "item", item);
+
+  gdk_pixbuf_new_from_stream_at_scale_async (G_INPUT_STREAM (stream),
+                                             THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT,
+                                             TRUE,
+                                             NULL,
+                                             picture_scaled, bg_source);
+  g_object_unref (stream);
+}
+
+static gboolean
+add_single_file (BgPicturesSource *bg_source,
+		 GFile            *file,
+		 GFileInfo        *info,
+		 const char       *source_uri)
+{
+  const gchar *content_type;
+
+  /* find png and jpeg files */
+  content_type = g_file_info_get_content_type (info);
+
+  if (!content_type)
+    return FALSE;
+
+  if (g_str_equal ("image/png", content_type) ||
+      g_str_equal ("image/jpeg", content_type) ||
+      g_str_equal ("image/svg+xml", content_type))
+    {
+      CcAppearanceItem *item;
+      char *uri;
+
+      /* create a new CcAppearanceItem */
+      uri = g_file_get_uri (file);
+      item = cc_appearance_item_new (uri);
+      g_free (uri);
+      g_object_set (G_OBJECT (item),
+		    "flags", CC_APPEARANCE_ITEM_HAS_URI | CC_APPEARANCE_ITEM_HAS_SHADING,
+		    "shading", G_DESKTOP_BACKGROUND_SHADING_SOLID,
+		    "placement", G_DESKTOP_BACKGROUND_STYLE_ZOOM,
+		    NULL);
+      if (source_uri != NULL && !g_file_is_native (file))
+        g_object_set (G_OBJECT (item), "source-url", source_uri, NULL);
+
+      g_object_set_data (G_OBJECT (file), "item", item);
+      g_file_read_async (file, 0, NULL, picture_opened_for_read, bg_source);
+      g_object_unref (file);
+      return TRUE;
+    }
+
+  return FALSE;
+}
+
+gboolean
+bg_pictures_source_add (BgPicturesSource *bg_source,
+			const char       *uri)
+{
+  GFile *file;
+  GFileInfo *info;
+  gboolean retval;
+
+  file = g_file_new_for_uri (uri);
+  info = g_file_query_info (file, ATTRIBUTES, G_FILE_QUERY_INFO_NONE, NULL, NULL);
+  if (info == NULL)
+    return FALSE;
+
+  retval = add_single_file (bg_source, file, info, uri);
+
+  return retval;
+}
+
+gboolean
+bg_pictures_source_remove (BgPicturesSource *bg_source,
+			   CcAppearanceItem *item)
+{
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  gboolean cont;
+  const char *uri;
+  gboolean retval;
+
+  retval = FALSE;
+  model = GTK_TREE_MODEL (bg_source_get_liststore (BG_SOURCE (bg_source)));
+  uri = cc_appearance_item_get_uri (item);
+
+  cont = gtk_tree_model_get_iter_first (model, &iter);
+  while (cont)
+    {
+      CcAppearanceItem *tmp_item;
+      const char *tmp_uri;
+
+      gtk_tree_model_get (model, &iter, 1, &tmp_item, -1);
+      tmp_uri = cc_appearance_item_get_uri (tmp_item);
+      if (g_str_equal (tmp_uri, uri))
+        {
+          GFile *file;
+          char *uuid;
+
+          file = g_file_new_for_uri (uri);
+          uuid = g_file_get_basename (file);
+          g_hash_table_insert (bg_source->priv->known_items,
+			       uuid, NULL);
+
+          gtk_list_store_remove (GTK_LIST_STORE (model), &iter);
+          retval = TRUE;
+          g_file_trash (file, NULL, NULL);
+          g_object_unref (file);
+          break;
+        }
+      g_object_unref (tmp_item);
+      cont = gtk_tree_model_iter_next (model, &iter);
+    }
+  return retval;
+}
+
+static void
+file_info_async_ready (GObject      *source,
+                       GAsyncResult *res,
+                       gpointer      user_data)
+{
+  BgPicturesSource *bg_source = BG_PICTURES_SOURCE (user_data);
+  GList *files, *l;
+  GError *err = NULL;
+  GFile *parent;
+  files = g_file_enumerator_next_files_finish (G_FILE_ENUMERATOR (source),
+                                               res,
+                                               &err);
+
+  if (err)
+    {
+      g_warning ("Could not get pictures file information: %s", err->message);
+      g_error_free (err);
+
+      g_list_foreach (files, (GFunc) g_object_unref, NULL);
+      g_list_free (files);
+      return;
+    }
+
+  parent = g_file_enumerator_get_container (G_FILE_ENUMERATOR (source));
+
+  /* iterate over the available files */
+  for (l = files; l; l = g_list_next (l))
+    {
+      GFileInfo *info = l->data;
+      GFile *file;
+
+      file = g_file_get_child (parent, g_file_info_get_name (info));
+
+      add_single_file (bg_source, file, info, NULL);
+    }
+
+  g_list_foreach (files, (GFunc) g_object_unref, NULL);
+  g_list_free (files);
+}
+
+static void
+dir_enum_async_ready (GObject      *source,
+                      GAsyncResult *res,
+                      gpointer      user_data)
+{
+  BgPicturesSourcePrivate *priv = BG_PICTURES_SOURCE (user_data)->priv;
+  GFileEnumerator *enumerator;
+  GError *err = NULL;
+
+  enumerator = g_file_enumerate_children_finish (G_FILE (source), res, &err);
+
+  if (err)
+    {
+      if (g_error_matches (err, G_IO_ERROR, G_IO_ERROR_NOT_FOUND) == FALSE)
+        g_warning ("Could not fill pictures source: %s", err->message);
+      g_error_free (err);
+      return;
+    }
+
+  /* get the files */
+  g_file_enumerator_next_files_async (enumerator,
+                                      G_MAXINT,
+                                      G_PRIORITY_LOW,
+                                      priv->cancellable,
+                                      file_info_async_ready,
+                                      user_data);
+}
+
+char *
+bg_pictures_source_get_cache_path (void)
+{
+  return g_build_filename (g_get_user_cache_dir (),
+			   "gnome-control-center",
+			   "backgrounds",
+			   NULL);
+}
+
+static char *
+bg_pictures_source_get_unique_filename (const char *uri)
+{
+  GChecksum *csum;
+  char *ret;
+
+  csum = g_checksum_new (G_CHECKSUM_SHA256);
+  g_checksum_update (csum, (guchar *) uri, -1);
+  ret = g_strdup (g_checksum_get_string (csum));
+  g_checksum_free (csum);
+
+  return ret;
+}
+
+char *
+bg_pictures_source_get_unique_path (const char *uri)
+{
+  GFile *parent, *file;
+  char *cache_path;
+  char *filename;
+  char *ret;
+
+  cache_path = bg_pictures_source_get_cache_path ();
+  parent = g_file_new_for_path (cache_path);
+  g_free (cache_path);
+
+  filename = bg_pictures_source_get_unique_filename (uri);
+  file = g_file_get_child (parent, filename);
+  g_free (filename);
+  ret = g_file_get_path (file);
+  g_object_unref (file);
+
+  return ret;
+}
+
+gboolean
+bg_pictures_source_is_known (BgPicturesSource *bg_source,
+			     const char       *uri)
+{
+  gboolean retval;
+  char *uuid;
+
+  uuid = bg_pictures_source_get_unique_filename (uri);
+  retval = (GPOINTER_TO_INT (g_hash_table_lookup (bg_source->priv->known_items, uuid)));
+  g_free (uuid);
+
+  return retval;
+}
+
+static void
+bg_pictures_source_init (BgPicturesSource *self)
+{
+  const gchar *pictures_path;
+  BgPicturesSourcePrivate *priv;
+  GFile *dir;
+  char *cache_path;
+
+  priv = self->priv = PICTURES_SOURCE_PRIVATE (self);
+
+  priv->cancellable = g_cancellable_new ();
+  priv->known_items = g_hash_table_new_full (g_str_hash,
+					     g_str_equal,
+					     (GDestroyNotify) g_free,
+					     NULL);
+
+  pictures_path = g_get_user_special_dir (G_USER_DIRECTORY_PICTURES);
+  dir = g_file_new_for_path (pictures_path);
+  g_file_enumerate_children_async (dir,
+				   ATTRIBUTES,
+                                   G_FILE_QUERY_INFO_NONE,
+                                   G_PRIORITY_LOW, priv->cancellable,
+                                   dir_enum_async_ready, self);
+  g_object_unref (dir);
+
+  cache_path = bg_pictures_source_get_cache_path ();
+  dir = g_file_new_for_path (cache_path);
+  g_file_enumerate_children_async (dir,
+				   ATTRIBUTES,
+                                   G_FILE_QUERY_INFO_NONE,
+                                   G_PRIORITY_LOW, priv->cancellable,
+                                   dir_enum_async_ready, self);
+  g_object_unref (dir);
+
+  priv->thumb_factory =
+    gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_NORMAL);
+}
+
+BgPicturesSource *
+bg_pictures_source_new (void)
+{
+  return g_object_new (BG_TYPE_PICTURES_SOURCE, NULL);
+}
+
Index: gnome-control-center-3.6.2/panels/appearance/bg-pictures-source.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-pictures-source.h	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,85 @@
+/* bg-pictures-source.h */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+
+#ifndef _BG_PICTURES_SOURCE_H
+#define _BG_PICTURES_SOURCE_H
+
+#include <gtk/gtk.h>
+#include "bg-source.h"
+#include "cc-appearance-item.h"
+
+G_BEGIN_DECLS
+
+#define BG_TYPE_PICTURES_SOURCE bg_pictures_source_get_type()
+
+#define BG_PICTURES_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+  BG_TYPE_PICTURES_SOURCE, BgPicturesSource))
+
+#define BG_PICTURES_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), \
+  BG_TYPE_PICTURES_SOURCE, BgPicturesSourceClass))
+
+#define BG_IS_PICTURES_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
+  BG_TYPE_PICTURES_SOURCE))
+
+#define BG_IS_PICTURES_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
+  BG_TYPE_PICTURES_SOURCE))
+
+#define BG_PICTURES_SOURCE_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
+  BG_TYPE_PICTURES_SOURCE, BgPicturesSourceClass))
+
+typedef struct _BgPicturesSource BgPicturesSource;
+typedef struct _BgPicturesSourceClass BgPicturesSourceClass;
+typedef struct _BgPicturesSourcePrivate BgPicturesSourcePrivate;
+
+struct _BgPicturesSource
+{
+  BgSource parent;
+
+  BgPicturesSourcePrivate *priv;
+};
+
+struct _BgPicturesSourceClass
+{
+  BgSourceClass parent_class;
+};
+
+GType bg_pictures_source_get_type (void) G_GNUC_CONST;
+
+BgPicturesSource *bg_pictures_source_new            (void);
+char             *bg_pictures_source_get_cache_path (void);
+char             *bg_pictures_source_get_unique_path(const char *uri);
+gboolean          bg_pictures_source_add            (BgPicturesSource *bg_source,
+						     const char       *uri);
+gboolean          bg_pictures_source_remove         (BgPicturesSource *bg_source,
+						     CcAppearanceItem *item);
+gboolean          bg_pictures_source_is_known       (BgPicturesSource *bg_source,
+						     const char       *uri);
+
+G_END_DECLS
+
+#endif /* _BG_PICTURES_SOURCE_H */
Index: gnome-control-center-3.6.2/panels/appearance/bg-source.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-source.c	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,130 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#include "bg-source.h"
+#include "cc-appearance-item.h"
+
+G_DEFINE_ABSTRACT_TYPE (BgSource, bg_source, G_TYPE_OBJECT)
+
+#define SOURCE_PRIVATE(o) \
+  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BG_TYPE_SOURCE, BgSourcePrivate))
+
+struct _BgSourcePrivate
+{
+  GtkListStore *store;
+};
+
+enum
+{
+  PROP_LISTSTORE = 1
+};
+
+
+static void
+bg_source_get_property (GObject    *object,
+                        guint       property_id,
+                        GValue     *value,
+                        GParamSpec *pspec)
+{
+  BgSource *source = BG_SOURCE (object);
+
+  switch (property_id)
+    {
+    case PROP_LISTSTORE:
+      g_value_set_object (value, bg_source_get_liststore (source));
+      break;
+
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+bg_source_set_property (GObject      *object,
+                        guint         property_id,
+                        const GValue *value,
+                        GParamSpec   *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+bg_source_dispose (GObject *object)
+{
+  BgSourcePrivate *priv = BG_SOURCE (object)->priv;
+
+  if (priv->store)
+    {
+      g_object_unref (priv->store);
+      priv->store = NULL;
+    }
+
+  G_OBJECT_CLASS (bg_source_parent_class)->dispose (object);
+}
+
+static void
+bg_source_finalize (GObject *object)
+{
+  G_OBJECT_CLASS (bg_source_parent_class)->finalize (object);
+}
+
+static void
+bg_source_class_init (BgSourceClass *klass)
+{
+  GParamSpec *pspec;
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  g_type_class_add_private (klass, sizeof (BgSourcePrivate));
+
+  object_class->get_property = bg_source_get_property;
+  object_class->set_property = bg_source_set_property;
+  object_class->dispose = bg_source_dispose;
+  object_class->finalize = bg_source_finalize;
+
+  pspec = g_param_spec_object ("liststore",
+                               "Liststore",
+                               "Liststore used in the source",
+                               GTK_TYPE_LIST_STORE,
+                               G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
+  g_object_class_install_property (object_class, PROP_LISTSTORE, pspec);
+}
+
+static void
+bg_source_init (BgSource *self)
+{
+  BgSourcePrivate *priv;
+
+  priv = self->priv = SOURCE_PRIVATE (self);
+
+  priv->store = gtk_list_store_new (3, G_TYPE_ICON, G_TYPE_OBJECT, G_TYPE_STRING);
+}
+
+GtkListStore*
+bg_source_get_liststore (BgSource *source)
+{
+  g_return_val_if_fail (BG_IS_SOURCE (source), NULL);
+
+  return source->priv->store;
+}
Index: gnome-control-center-3.6.2/panels/appearance/bg-source.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-source.h	2012-11-01 23:12:51.325697490 -0400
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#ifndef _BG_SOURCE_H
+#define _BG_SOURCE_H
+
+#include <gtk/gtk.h>
+
+G_BEGIN_DECLS
+
+#define THUMBNAIL_WIDTH 48
+#define THUMBNAIL_HEIGHT 48
+
+#define BG_TYPE_SOURCE bg_source_get_type()
+
+#define BG_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+  BG_TYPE_SOURCE, BgSource))
+
+#define BG_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), \
+  BG_TYPE_SOURCE, BgSourceClass))
+
+#define BG_IS_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
+  BG_TYPE_SOURCE))
+
+#define BG_IS_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
+  BG_TYPE_SOURCE))
+
+#define BG_SOURCE_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
+  BG_TYPE_SOURCE, BgSourceClass))
+
+typedef struct _BgSource BgSource;
+typedef struct _BgSourceClass BgSourceClass;
+typedef struct _BgSourcePrivate BgSourcePrivate;
+
+struct _BgSource
+{
+  GObject parent;
+
+  BgSourcePrivate *priv;
+};
+
+struct _BgSourceClass
+{
+  GObjectClass parent_class;
+};
+
+GType bg_source_get_type (void) G_GNUC_CONST;
+
+GtkListStore* bg_source_get_liststore (BgSource *source);
+
+G_END_DECLS
+
+#endif /* _BG_SOURCE_H */
Index: gnome-control-center-3.6.2/panels/appearance/bg-wallpapers-source.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-wallpapers-source.c	2012-11-01 23:12:51.329697489 -0400
@@ -0,0 +1,202 @@
+/* bg-wallpapers-source.c */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+
+#include "bg-wallpapers-source.h"
+
+#include "cc-appearance-item.h"
+#include "cc-appearance-xml.h"
+
+#include <libgnome-desktop/gnome-desktop-thumbnail.h>
+#include <gio/gio.h>
+
+G_DEFINE_TYPE (BgWallpapersSource, bg_wallpapers_source, BG_TYPE_SOURCE)
+
+#define WALLPAPERS_SOURCE_PRIVATE(o) \
+  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BG_TYPE_WALLPAPERS_SOURCE, BgWallpapersSourcePrivate))
+
+struct _BgWallpapersSourcePrivate
+{
+  GnomeDesktopThumbnailFactory *thumb_factory;
+  CcAppearanceXml *xml;
+};
+
+
+static void
+bg_wallpapers_source_get_property (GObject    *object,
+                                   guint       property_id,
+                                   GValue     *value,
+                                   GParamSpec *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+bg_wallpapers_source_set_property (GObject      *object,
+                                    guint         property_id,
+                                    const GValue *value,
+                                    GParamSpec   *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+bg_wallpapers_source_dispose (GObject *object)
+{
+  BgWallpapersSourcePrivate *priv = BG_WALLPAPERS_SOURCE (object)->priv;
+
+  if (priv->thumb_factory)
+    {
+      g_object_unref (priv->thumb_factory);
+      priv->thumb_factory = NULL;
+    }
+  if (priv->xml)
+    {
+      g_object_unref (priv->xml);
+      priv->xml = NULL;
+    }
+
+  G_OBJECT_CLASS (bg_wallpapers_source_parent_class)->dispose (object);
+}
+
+static void
+bg_wallpapers_source_finalize (GObject *object)
+{
+  G_OBJECT_CLASS (bg_wallpapers_source_parent_class)->finalize (object);
+}
+
+static void
+bg_wallpapers_source_class_init (BgWallpapersSourceClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  g_type_class_add_private (klass, sizeof (BgWallpapersSourcePrivate));
+
+  object_class->get_property = bg_wallpapers_source_get_property;
+  object_class->set_property = bg_wallpapers_source_set_property;
+  object_class->dispose = bg_wallpapers_source_dispose;
+  object_class->finalize = bg_wallpapers_source_finalize;
+}
+
+static void
+load_wallpapers (gchar              *key,
+                 CcAppearanceItem   *item,
+                 BgWallpapersSource *source)
+{
+  BgWallpapersSourcePrivate *priv = source->priv;
+  GtkTreeIter iter;
+  GIcon *pixbuf;
+  GtkListStore *store = bg_source_get_liststore (BG_SOURCE (source));
+  gboolean deleted;
+
+  g_object_get (G_OBJECT (item), "is-deleted", &deleted, NULL);
+
+  if (deleted)
+    return;
+
+  gtk_list_store_append (store, &iter);
+
+  pixbuf = cc_appearance_item_get_thumbnail (item, priv->thumb_factory,
+					     THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT);
+
+  gtk_list_store_set (store, &iter,
+                      0, pixbuf,
+                      1, g_object_ref (item),
+                      2, cc_appearance_item_get_name (item),
+                      -1);
+
+  if (pixbuf)
+    g_object_unref (pixbuf);
+}
+
+static void
+list_load_cb (GObject *source_object,
+	      GAsyncResult *res,
+	      gpointer user_data)
+{
+  cc_appearance_xml_load_list_finish (res);
+}
+
+static void
+item_added (CcAppearanceXml    *xml,
+	    CcAppearanceItem   *item,
+	    BgWallpapersSource *self)
+{
+  load_wallpapers (NULL, item, self);
+}
+
+static void
+load_default_bg (BgWallpapersSource *self)
+{
+  const char * const *system_data_dirs;
+  char *filename;
+  guint i;
+
+  /* FIXME We could do this nicer if we had the XML source in GSettings */
+
+  system_data_dirs = g_get_system_data_dirs ();
+  for (i = 0; system_data_dirs[i]; i++) {
+    filename = g_build_filename (system_data_dirs[i],
+				 "gnome-background-properties",
+				 "adwaita.xml",
+				 NULL);
+    if (cc_appearance_xml_load_xml (self->priv->xml, filename)) {
+      g_free (filename);
+      break;
+    }
+    g_free (filename);
+  }
+}
+
+static void
+bg_wallpapers_source_init (BgWallpapersSource *self)
+{
+  BgWallpapersSourcePrivate *priv;
+
+  priv = self->priv = WALLPAPERS_SOURCE_PRIVATE (self);
+
+  priv->thumb_factory =
+    gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_NORMAL);
+  priv->xml = cc_appearance_xml_new ();
+  g_signal_connect (G_OBJECT (priv->xml), "added",
+		    G_CALLBACK (item_added), self);
+
+  /* Try adding the default background first */
+  load_default_bg (self);
+
+  cc_appearance_xml_load_list_async (priv->xml, NULL, list_load_cb, self);
+}
+
+BgWallpapersSource *
+bg_wallpapers_source_new (void)
+{
+  return g_object_new (BG_TYPE_WALLPAPERS_SOURCE, NULL);
+}
+
Index: gnome-control-center-3.6.2/panels/appearance/bg-wallpapers-source.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/bg-wallpapers-source.h	2012-11-01 23:12:51.329697489 -0400
@@ -0,0 +1,77 @@
+/* bg-wallpapers-source.h */
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+
+#ifndef _BG_WALLPAPERS_SOURCE_H
+#define _BG_WALLPAPERS_SOURCE_H
+
+#include <gtk/gtk.h>
+#include "bg-source.h"
+
+G_BEGIN_DECLS
+
+#define BG_TYPE_WALLPAPERS_SOURCE bg_wallpapers_source_get_type()
+
+#define BG_WALLPAPERS_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+  BG_TYPE_WALLPAPERS_SOURCE, BgWallpapersSource))
+
+#define BG_WALLPAPERS_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), \
+  BG_TYPE_WALLPAPERS_SOURCE, BgWallpapersSourceClass))
+
+#define BG_IS_WALLPAPERS_SOURCE(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
+  BG_TYPE_WALLPAPERS_SOURCE))
+
+#define BG_IS_WALLPAPERS_SOURCE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
+  BG_TYPE_WALLPAPERS_SOURCE))
+
+#define BG_WALLPAPERS_SOURCE_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
+  BG_TYPE_WALLPAPERS_SOURCE, BgWallpapersSourceClass))
+
+typedef struct _BgWallpapersSource BgWallpapersSource;
+typedef struct _BgWallpapersSourceClass BgWallpapersSourceClass;
+typedef struct _BgWallpapersSourcePrivate BgWallpapersSourcePrivate;
+
+struct _BgWallpapersSource
+{
+  BgSource parent;
+
+  BgWallpapersSourcePrivate *priv;
+};
+
+struct _BgWallpapersSourceClass
+{
+  BgSourceClass parent_class;
+};
+
+GType bg_wallpapers_source_get_type (void) G_GNUC_CONST;
+
+BgWallpapersSource *bg_wallpapers_source_new (void);
+GtkListStore       *bg_wallpapers_source_get_liststore (BgWallpapersSource *source);
+
+G_END_DECLS
+
+#endif /* _BG_WALLPAPERS_SOURCE_H */
Index: gnome-control-center-3.6.2/panels/appearance/gdesktop-enums-types.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/gdesktop-enums-types.c	2012-11-01 23:12:51.329697489 -0400
@@ -0,0 +1,265 @@
+
+
+
+#include <gdesktop-enums.h>
+#include "gdesktop-enums-types.h"
+#include "cc-appearance-item.h"
+
+/* enumerations from "/home/hadess/Projects/gnome-install/include/gsettings-desktop-schemas/gdesktop-enums.h" */
+GType
+g_desktop_proxy_mode_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_PROXY_MODE_NONE, "G_DESKTOP_PROXY_MODE_NONE", "none" },
+      { G_DESKTOP_PROXY_MODE_MANUAL, "G_DESKTOP_PROXY_MODE_MANUAL", "manual" },
+      { G_DESKTOP_PROXY_MODE_AUTO, "G_DESKTOP_PROXY_MODE_AUTO", "auto" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopProxyMode", values);
+  }
+  return etype;
+}
+GType
+g_desktop_toolbar_style_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_TOOLBAR_STYLE_BOTH, "G_DESKTOP_TOOLBAR_STYLE_BOTH", "both" },
+      { G_DESKTOP_TOOLBAR_STYLE_BOTH_HORIZ, "G_DESKTOP_TOOLBAR_STYLE_BOTH_HORIZ", "both-horiz" },
+      { G_DESKTOP_TOOLBAR_STYLE_ICONS, "G_DESKTOP_TOOLBAR_STYLE_ICONS", "icons" },
+      { G_DESKTOP_TOOLBAR_STYLE_TEXT, "G_DESKTOP_TOOLBAR_STYLE_TEXT", "text" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopToolbarStyle", values);
+  }
+  return etype;
+}
+GType
+g_desktop_toolbar_icon_size_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_TOOLBAR_ICON_SIZE_SMALL, "G_DESKTOP_TOOLBAR_ICON_SIZE_SMALL", "small" },
+      { G_DESKTOP_TOOLBAR_ICON_SIZE_LARGE, "G_DESKTOP_TOOLBAR_ICON_SIZE_LARGE", "large" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopToolbarIconSize", values);
+  }
+  return etype;
+}
+GType
+g_desktop_background_style_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_BACKGROUND_STYLE_NONE, "G_DESKTOP_BACKGROUND_STYLE_NONE", "none" },
+      { G_DESKTOP_BACKGROUND_STYLE_WALLPAPER, "G_DESKTOP_BACKGROUND_STYLE_WALLPAPER", "wallpaper" },
+      { G_DESKTOP_BACKGROUND_STYLE_CENTERED, "G_DESKTOP_BACKGROUND_STYLE_CENTERED", "centered" },
+      { G_DESKTOP_BACKGROUND_STYLE_SCALED, "G_DESKTOP_BACKGROUND_STYLE_SCALED", "scaled" },
+      { G_DESKTOP_BACKGROUND_STYLE_STRETCHED, "G_DESKTOP_BACKGROUND_STYLE_STRETCHED", "stretched" },
+      { G_DESKTOP_BACKGROUND_STYLE_ZOOM, "G_DESKTOP_BACKGROUND_STYLE_ZOOM", "zoom" },
+      { G_DESKTOP_BACKGROUND_STYLE_SPANNED, "G_DESKTOP_BACKGROUND_STYLE_SPANNED", "spanned" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopBackgroundStyle", values);
+  }
+  return etype;
+}
+GType
+g_desktop_background_shading_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_BACKGROUND_SHADING_SOLID, "G_DESKTOP_BACKGROUND_SHADING_SOLID", "solid" },
+      { G_DESKTOP_BACKGROUND_SHADING_VERTICAL, "G_DESKTOP_BACKGROUND_SHADING_VERTICAL", "vertical" },
+      { G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL, "G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL", "horizontal" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopBackgroundShading", values);
+  }
+  return etype;
+}
+GType
+g_desktop_mouse_dwell_mode_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_MOUSE_DWELL_MODE_WINDOW, "G_DESKTOP_MOUSE_DWELL_MODE_WINDOW", "window" },
+      { G_DESKTOP_MOUSE_DWELL_MODE_GESTURE, "G_DESKTOP_MOUSE_DWELL_MODE_GESTURE", "gesture" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopMouseDwellMode", values);
+  }
+  return etype;
+}
+GType
+g_desktop_mouse_dwell_direction_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_MOUSE_DWELL_DIRECTION_LEFT, "G_DESKTOP_MOUSE_DWELL_DIRECTION_LEFT", "left" },
+      { G_DESKTOP_MOUSE_DWELL_DIRECTION_RIGHT, "G_DESKTOP_MOUSE_DWELL_DIRECTION_RIGHT", "right" },
+      { G_DESKTOP_MOUSE_DWELL_DIRECTION_UP, "G_DESKTOP_MOUSE_DWELL_DIRECTION_UP", "up" },
+      { G_DESKTOP_MOUSE_DWELL_DIRECTION_DOWN, "G_DESKTOP_MOUSE_DWELL_DIRECTION_DOWN", "down" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopMouseDwellDirection", values);
+  }
+  return etype;
+}
+GType
+g_desktop_clock_format_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_CLOCK_FORMAT_24H, "G_DESKTOP_CLOCK_FORMAT_24H", "24h" },
+      { G_DESKTOP_CLOCK_FORMAT_12H, "G_DESKTOP_CLOCK_FORMAT_12H", "12h" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopClockFormat", values);
+  }
+  return etype;
+}
+GType
+g_desktop_screensaver_mode_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_SCREENSAVER_MODE_BLANK_ONLY, "G_DESKTOP_SCREENSAVER_MODE_BLANK_ONLY", "blank-only" },
+      { G_DESKTOP_SCREENSAVER_MODE_RANDOM, "G_DESKTOP_SCREENSAVER_MODE_RANDOM", "random" },
+      { G_DESKTOP_SCREENSAVER_MODE_SINGLE, "G_DESKTOP_SCREENSAVER_MODE_SINGLE", "single" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopScreensaverMode", values);
+  }
+  return etype;
+}
+GType
+g_desktop_magnifier_mouse_tracking_mode_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_NONE, "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_NONE", "none" },
+      { G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_CENTERED, "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_CENTERED", "centered" },
+      { G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PROPORTIONAL, "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PROPORTIONAL", "proportional" },
+      { G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PUSH, "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PUSH", "push" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopMagnifierMouseTrackingMode", values);
+  }
+  return etype;
+}
+GType
+g_desktop_magnifier_screen_position_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_MAGNIFIER_SCREEN_POSITION_NONE, "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_NONE", "none" },
+      { G_DESKTOP_MAGNIFIER_SCREEN_POSITION_FULL_SCREEN, "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_FULL_SCREEN", "full-screen" },
+      { G_DESKTOP_MAGNIFIER_SCREEN_POSITION_TOP_HALF, "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_TOP_HALF", "top-half" },
+      { G_DESKTOP_MAGNIFIER_SCREEN_POSITION_BOTTOM_HALF, "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_BOTTOM_HALF", "bottom-half" },
+      { G_DESKTOP_MAGNIFIER_SCREEN_POSITION_LEFT_HALF, "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_LEFT_HALF", "left-half" },
+      { G_DESKTOP_MAGNIFIER_SCREEN_POSITION_RIGHT_HALF, "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_RIGHT_HALF", "right-half" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopMagnifierScreenPosition", values);
+  }
+  return etype;
+}
+GType
+g_desktop_titlebar_action_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_TITLEBAR_ACTION_TOGGLE_SHADE, "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_SHADE", "toggle-shade" },
+      { G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE, "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE", "toggle-maximize" },
+      { G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_HORIZONTALLY, "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_HORIZONTALLY", "toggle-maximize-horizontally" },
+      { G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_VERTICALLY, "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_VERTICALLY", "toggle-maximize-vertically" },
+      { G_DESKTOP_TITLEBAR_ACTION_MINIMIZE, "G_DESKTOP_TITLEBAR_ACTION_MINIMIZE", "minimize" },
+      { G_DESKTOP_TITLEBAR_ACTION_NONE, "G_DESKTOP_TITLEBAR_ACTION_NONE", "none" },
+      { G_DESKTOP_TITLEBAR_ACTION_LOWER, "G_DESKTOP_TITLEBAR_ACTION_LOWER", "lower" },
+      { G_DESKTOP_TITLEBAR_ACTION_MENU, "G_DESKTOP_TITLEBAR_ACTION_MENU", "menu" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopTitlebarAction", values);
+  }
+  return etype;
+}
+GType
+g_desktop_focus_mode_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_FOCUS_MODE_CLICK, "G_DESKTOP_FOCUS_MODE_CLICK", "click" },
+      { G_DESKTOP_FOCUS_MODE_SLOPPY, "G_DESKTOP_FOCUS_MODE_SLOPPY", "sloppy" },
+      { G_DESKTOP_FOCUS_MODE_MOUSE, "G_DESKTOP_FOCUS_MODE_MOUSE", "mouse" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopFocusMode", values);
+  }
+  return etype;
+}
+GType
+g_desktop_focus_new_windows_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_FOCUS_NEW_WINDOWS_SMART, "G_DESKTOP_FOCUS_NEW_WINDOWS_SMART", "smart" },
+      { G_DESKTOP_FOCUS_NEW_WINDOWS_STRICT, "G_DESKTOP_FOCUS_NEW_WINDOWS_STRICT", "strict" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopFocusNewWindows", values);
+  }
+  return etype;
+}
+GType
+g_desktop_visual_bell_type_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GEnumValue values[] = {
+      { G_DESKTOP_VISUAL_BELL_FULLSCREEN_FLASH, "G_DESKTOP_VISUAL_BELL_FULLSCREEN_FLASH", "fullscreen-flash" },
+      { G_DESKTOP_VISUAL_BELL_FRAME_FLASH, "G_DESKTOP_VISUAL_BELL_FRAME_FLASH", "frame-flash" },
+      { 0, NULL, NULL }
+    };
+    etype = g_enum_register_static ("GDesktopVisualBellType", values);
+  }
+  return etype;
+}
+
+/* enumerations from "cc-appearance-item.h" */
+GType
+cc_appearance_item_flags_get_type (void)
+{
+  static GType etype = 0;
+  if (etype == 0) {
+    static const GFlagsValue values[] = {
+      { CC_APPEARANCE_ITEM_HAS_SHADING, "CC_APPEARANCE_ITEM_HAS_SHADING", "shading" },
+      { CC_APPEARANCE_ITEM_HAS_PLACEMENT, "CC_APPEARANCE_ITEM_HAS_PLACEMENT", "placement" },
+      { CC_APPEARANCE_ITEM_HAS_PCOLOR, "CC_APPEARANCE_ITEM_HAS_PCOLOR", "pcolor" },
+      { CC_APPEARANCE_ITEM_HAS_SCOLOR, "CC_APPEARANCE_ITEM_HAS_SCOLOR", "scolor" },
+      { CC_APPEARANCE_ITEM_HAS_URI, "CC_APPEARANCE_ITEM_HAS_URI", "uri" },
+      { 0, NULL, NULL }
+    };
+    etype = g_flags_register_static ("CcAppearanceItemFlags", values);
+  }
+  return etype;
+}
+
+
+
Index: gnome-control-center-3.6.2/panels/appearance/gdesktop-enums-types.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/gdesktop-enums-types.h	2012-11-01 23:12:51.329697489 -0400
@@ -0,0 +1,49 @@
+
+
+
+#ifndef __GDESKTOP_ENUMS_TYPES_H__
+#define __GDESKTOP_ENUMS_TYPES_H__
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+/* enumerations from "/home/hadess/Projects/gnome-install/include/gsettings-desktop-schemas/gdesktop-enums.h" */
+GType g_desktop_proxy_mode_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_PROXY_MODE (g_desktop_proxy_mode_get_type())
+GType g_desktop_toolbar_style_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_TOOLBAR_STYLE (g_desktop_toolbar_style_get_type())
+GType g_desktop_toolbar_icon_size_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_TOOLBAR_ICON_SIZE (g_desktop_toolbar_icon_size_get_type())
+GType g_desktop_background_style_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_BACKGROUND_STYLE (g_desktop_background_style_get_type())
+GType g_desktop_background_shading_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_BACKGROUND_SHADING (g_desktop_background_shading_get_type())
+GType g_desktop_mouse_dwell_mode_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_MOUSE_DWELL_MODE (g_desktop_mouse_dwell_mode_get_type())
+GType g_desktop_mouse_dwell_direction_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_MOUSE_DWELL_DIRECTION (g_desktop_mouse_dwell_direction_get_type())
+GType g_desktop_clock_format_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_CLOCK_FORMAT (g_desktop_clock_format_get_type())
+GType g_desktop_screensaver_mode_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_SCREENSAVER_MODE (g_desktop_screensaver_mode_get_type())
+GType g_desktop_magnifier_mouse_tracking_mode_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE (g_desktop_magnifier_mouse_tracking_mode_get_type())
+GType g_desktop_magnifier_screen_position_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_MAGNIFIER_SCREEN_POSITION (g_desktop_magnifier_screen_position_get_type())
+GType g_desktop_titlebar_action_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_TITLEBAR_ACTION (g_desktop_titlebar_action_get_type())
+GType g_desktop_focus_mode_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_FOCUS_MODE (g_desktop_focus_mode_get_type())
+GType g_desktop_focus_new_windows_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_FOCUS_NEW_WINDOWS (g_desktop_focus_new_windows_get_type())
+GType g_desktop_visual_bell_type_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_DESKTOP_VISUAL_BELL_TYPE (g_desktop_visual_bell_type_get_type())
+/* enumerations from "cc-appearance-item.h" */
+GType cc_appearance_item_flags_get_type (void) G_GNUC_CONST;
+#define G_DESKTOP_TYPE_APPEARANCE_ITEM_FLAGS (cc_appearance_item_flags_get_type())
+G_END_DECLS
+
+#endif /* __GDESKTOP_ENUMS_TYPES_H__ */
+
+
+
Index: gnome-control-center-3.6.2/panels/appearance/gnome-appearance-panel.desktop.in.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/gnome-appearance-panel.desktop.in.in	2012-11-01 23:12:51.329697489 -0400
@@ -0,0 +1,13 @@
+[Desktop Entry]
+_Name=Appearance
+_Comment=Change the background and the theme
+Exec=gnome-control-center appearance
+Icon=preferences-desktop-wallpaper
+Terminal=false
+Type=Application
+StartupNotify=true
+Categories=GNOME;GTK;Settings;DesktopSettings;X-GNOME-Settings-Panel;X-GNOME-PersonalSettings
+OnlyShowIn=Unity;
+X-GNOME-Settings-Panel=appearance
+# Translators: those are keywords for the appearance control-center panel
+_Keywords=Wallpaper;Screen;Desktop;Theme;Appearance;Launcher;Unity;Menus;
Index: gnome-control-center-3.6.2/panels/Makefile.am
===================================================================
--- gnome-control-center-3.6.2.orig/panels/Makefile.am	2012-11-01 23:12:49.317697573 -0400
+++ gnome-control-center-3.6.2/panels/Makefile.am	2012-11-01 23:12:51.329697489 -0400
@@ -1,5 +1,6 @@
 SUBDIRS= \
 	common \
+	appearance \
 	background \
 	screen \
 	power \
Index: gnome-control-center-3.6.2/panels/Makefile.in
===================================================================
--- gnome-control-center-3.6.2.orig/panels/Makefile.in	2012-11-01 23:12:49.317697573 -0400
+++ gnome-control-center-3.6.2/panels/Makefile.in	2012-11-01 23:12:51.329697489 -0400
@@ -99,7 +99,7 @@
 	distdir
 ETAGS = etags
 CTAGS = ctags
-DIST_SUBDIRS = common background screen power color display mouse \
+DIST_SUBDIRS = common appearance background screen power color display mouse \
 	online-accounts region info sound keyboard universal-access \
 	user-accounts datetime wacom printers network bluetooth
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
@@ -137,6 +137,8 @@
 AUTOHEADER = @AUTOHEADER@
 AUTOMAKE = @AUTOMAKE@
 AWK = @AWK@
+APPEARANCE_PANEL_CFLAGS = @APPEARANCE_PANEL_CFLAGS@
+APPEARANCE_PANEL_LIBS = @APPEARANCE_PANEL_LIBS@
 BACKGROUND_PANEL_CFLAGS = @BACKGROUND_PANEL_CFLAGS@
 BACKGROUND_PANEL_LIBS = @BACKGROUND_PANEL_LIBS@
 BLUETOOTH_CFLAGS = @BLUETOOTH_CFLAGS@
@@ -341,7 +343,7 @@
 top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
-SUBDIRS = common background screen power color display mouse \
+SUBDIRS = common appearance background screen power color display mouse \
 	online-accounts region info sound keyboard universal-access \
 	user-accounts datetime $(am__append_1) $(am__append_2) \
 	$(am__append_3) $(am__append_4)
Index: gnome-control-center-3.6.2/configure.ac
===================================================================
--- gnome-control-center-3.6.2.orig/configure.ac	2012-11-01 23:12:49.317697573 -0400
+++ gnome-control-center-3.6.2/configure.ac	2012-11-01 23:12:51.329697489 -0400
@@ -121,6 +121,8 @@
 PKG_CHECK_MODULES(LIBLANGUAGE, $COMMON_MODULES gnome-desktop-3.0 fontconfig)
 PKG_CHECK_MODULES(LIBSHORTCUTS, $COMMON_MODULES x11)
 PKG_CHECK_MODULES(SHELL, $COMMON_MODULES libgnome-menu-3.0 gio-unix-2.0 x11)
+PKG_CHECK_MODULES(APPEARANCE_PANEL, $COMMON_MODULES libxml-2.0 gnome-desktop-3.0
+                  gdk-pixbuf-2.0 >= $GDKPIXBUF_REQUIRED_VERSION)
 PKG_CHECK_MODULES(BACKGROUND_PANEL, $COMMON_MODULES libxml-2.0 gnome-desktop-3.0
                   gdk-pixbuf-2.0 >= $GDKPIXBUF_REQUIRED_VERSION)
 PKG_CHECK_MODULES(DATETIME_PANEL, $COMMON_MODULES
@@ -400,6 +402,8 @@
 Makefile
 panels/Makefile
 panels/common/Makefile
+panels/appearance/Makefile
+panels/appearance/gnome-appearance-panel.desktop.in
 panels/background/Makefile
 panels/background/gnome-background-panel.desktop.in
 panels/bluetooth/Makefile
Index: gnome-control-center-3.6.2/panels/appearance/slideshow-emblem.svg
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/slideshow-emblem.svg	2012-11-01 23:12:51.333697489 -0400
@@ -0,0 +1,104 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="128"
+   height="128"
+   id="svg4978"
+   version="1.1"
+   inkscape:version="0.48.0 r9654"
+   sodipodi:docname="slideshow-emblem.svg">
+  <defs
+     id="defs4980" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="0.98994949"
+     inkscape:cx="41.944792"
+     inkscape:cy="39.155574"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="962"
+     inkscape:window-height="817"
+     inkscape:window-x="4"
+     inkscape:window-y="51"
+     inkscape:window-maximized="0" />
+  <metadata
+     id="metadata4983">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,-924.36215)">
+    <g
+       style="display:inline"
+       id="g14317"
+       transform="matrix(7.1989829,0,0,7.1989829,-772.01578,-783.40043)">
+      <g
+         style="stroke:#000000;stroke-opacity:1"
+         transform="translate(69,-449)"
+         id="g14258"
+         inkscape:label="document-open-recent">
+        <path
+           sodipodi:type="arc"
+           style="color:#000000;fill:none;stroke:#000000;stroke-width:2.15384626;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate"
+           id="path14260"
+           sodipodi:cx="48"
+           sodipodi:cy="696"
+           sodipodi:rx="7"
+           sodipodi:ry="7"
+           d="m 55,696 c 0,3.86599 -3.134007,7 -7,7 -3.865993,0 -7,-3.13401 -7,-7 0,-3.86599 3.134007,-7 7,-7 3.865993,0 7,3.13401 7,7 z"
+           transform="matrix(0.92857143,0,0,0.92857143,2.9285714,49.21429)" />
+        <path
+           style="fill:none;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+           d="m 45.5,693.5 2,2 3,-3"
+           id="path14262"
+           inkscape:connector-curvature="0"
+           sodipodi:nodetypes="ccc" />
+      </g>
+      <g
+         inkscape:label="document-open-recent"
+         id="g4692"
+         transform="translate(69,-450)">
+        <path
+           transform="matrix(0.92857143,0,0,0.92857143,2.9285714,49.21429)"
+           d="m 55,696 c 0,3.86599 -3.134007,7 -7,7 -3.865993,0 -7,-3.13401 -7,-7 0,-3.86599 3.134007,-7 7,-7 3.865993,0 7,3.13401 7,7 z"
+           sodipodi:ry="7"
+           sodipodi:rx="7"
+           sodipodi:cy="696"
+           sodipodi:cx="48"
+           id="path3869"
+           style="color:#000000;fill:none;stroke:#ffffff;stroke-width:2.15384626;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate"
+           sodipodi:type="arc" />
+        <path
+           sodipodi:nodetypes="ccc"
+           inkscape:connector-curvature="0"
+           id="path4639"
+           d="m 45.5,693.5 2,2 3,-3"
+           style="fill:none;stroke:#ffffff;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
+      </g>
+    </g>
+  </g>
+</svg>
Index: gnome-control-center-3.6.2/panels/appearance/slideshow-symbolic.svg
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/slideshow-symbolic.svg	2012-11-01 23:12:51.333697489 -0400
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="16"
+   height="16"
+   id="svg5594"
+   version="1.1"
+   inkscape:version="0.48.0 r9654"
+   sodipodi:docname="slideshow-emblem-symbolic.svg">
+  <defs
+     id="defs5596" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="22.4"
+     inkscape:cx="10.858512"
+     inkscape:cy="10.780448"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="789"
+     inkscape:window-height="774"
+     inkscape:window-x="4"
+     inkscape:window-y="51"
+     inkscape:window-maximized="0" />
+  <metadata
+     id="metadata5599">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,-1036.3622)">
+    <g
+       id="g3763"
+       transform="matrix(0.86221939,0,0,0.86221939,1.0303599,144.13347)">
+      <path
+         inkscape:connector-curvature="0"
+         id="path14584"
+         d="m 7.9642862,1038.3322 c -3.3085937,0 -5.9942603,2.6857 -5.9942603,5.9943 0,3.3086 2.6856666,5.9942 5.9942603,5.9942 3.3085938,0 5.9942608,-2.6856 5.9942608,-5.9942 0,-3.3086 -2.685667,-5.9943 -5.9942608,-5.9943 z m 0,0.8457 c 2.8454368,0 5.1485968,2.3031 5.1485968,5.1486 0,2.8454 -2.30316,5.1486 -5.1485968,5.1486 -2.8454368,0 -5.148597,-2.3032 -5.148597,-5.1486 0,-2.8455 2.3031602,-5.1486 5.148597,-5.1486 z"
+         style="font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;baseline-shift:baseline;color:#000000;fill:#808080;fill-opacity:1;stroke:none;stroke-width:1.0767436;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Sans;-inkscape-font-specification:Sans" />
+      <path
+         inkscape:connector-curvature="0"
+         id="path14586"
+         d="m 10.5,1041.3125 a 0.42854288,0.42854288 0 0 0 -0.28125,0.125 l -2.25,2.2813 -1.40625,-1.4063 a 0.4310176,0.4310176 0 1 0 -0.625,0.5937 l 1.71875,1.7188 a 0.42854288,0.42854288 0 0 0 0.625,0 l 2.5625,-2.5625 a 0.42854288,0.42854288 0 0 0 -0.34375,-0.75 z"
+         style="font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;baseline-shift:baseline;color:#000000;fill:#999999;fill-opacity:1;stroke:none;stroke-width:0.85700005;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Sans;-inkscape-font-specification:Sans" />
+    </g>
+  </g>
+</svg>
Index: gnome-control-center-3.6.2/panels/appearance/appearance.ui
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/appearance.ui	2012-11-01 23:13:24.649696096 -0400
@@ -0,0 +1,940 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <requires lib="gtk+" version="2.16"/>
+  <object class="GtkListStore" id="sources-liststore">
+    <columns>
+      <!-- column-name source-name -->
+      <column type="gchararray"/>
+      <!-- column-name source-id -->
+      <column type="guint"/>
+      <!-- column-name source-pointer -->
+      <column type="gpointer"/>
+    </columns>
+  </object>
+  <object class="GtkListStore" id="style-liststore">
+    <columns>
+      <!-- column-name name -->
+      <column type="gchararray"/>
+      <!-- column-name value -->
+      <column type="gint"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Tile</col>
+        <col id="1">1</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Zoom</col>
+        <col id="1">5</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Center</col>
+        <col id="1">2</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Scale</col>
+        <col id="1">3</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Fill</col>
+        <col id="1">4</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Span</col>
+        <col id="1">6</col>
+      </row>
+    </data>
+  </object>
+  <object class="GtkListStore" id="theme-list-store">
+    <columns>
+      <!-- column-name THEME_ID -->
+      <column type="gchararray"/>
+      <!-- column-name THEME_NAME -->
+      <column type="gchararray"/>
+    </columns>
+  </object>
+  <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
+    <child>
+      <object class="GtkNotebook" id="main-notebook">
+        <property name="visible">True</property>
+        <property name="can_focus">True</property>
+        <property name="border_width">12</property>
+        <child>
+          <object class="GtkBox" id="appearance-panel">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="margin_top">3</property>
+            <property name="margin_bottom">3</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">3</property>
+            <child>
+              <object class="GtkHBox" id="background-container">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="margin_right">4</property>
+                <property name="border_width">10</property>
+                <property name="spacing">12</property>
+                <child>
+                  <object class="GtkVBox" id="vbox3">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <child>
+                      <object class="GtkLabel" id="label1">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="xalign">0</property>
+                        <property name="label" translatable="yes">&lt;b&gt;Background&lt;/b&gt;</property>
+                        <property name="use_markup">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkDrawingArea" id="preview-area">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                      </object>
+                      <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkHBox" id="heading-hbox">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="halign">center</property>
+                        <property name="valign">end</property>
+                        <property name="spacing">4</property>
+                        <child>
+                          <object class="GtkLabel" id="background-label">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="halign">center</property>
+                            <property name="label">Current background</property>
+                            <attributes>
+                              <attribute name="style" value="italic"/>
+                            </attributes>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel" id="size_label">
+                            <property name="width_request">15</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="label">(2560 x 2560)</property>
+                            <attributes>
+                              <attribute name="style" value="italic"/>
+                            </attributes>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="padding">6</property>
+                        <property name="position">2</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkHBox" id="bottom-hbox">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="spacing">12</property>
+                        <child>
+                          <object class="GtkHBox" id="hbox2">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="spacing">2</property>
+                            <child>
+                              <object class="GtkImage" id="slide_image">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="icon_name">slideshow-symbolic</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="slide-label">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="xalign">0</property>
+                                <property name="label" translatable="yes" comments="This refers to a slideshow background">Changes throughout the day</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="strut">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label"> </property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkHBox" id="edit-hbox">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="spacing">6</property>
+                            <child>
+                              <object class="GtkColorButton" id="style-pcolor">
+                                <property name="use_action_appearance">False</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">True</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="color">#000000000000</property>
+                                <child internal-child="accessible">
+                                  <object class="AtkObject" id="style-pcolor-a11y">
+                                    <property name="accessible-name" translatable="yes">Primary Color</property>
+                                  </object>
+                                </child>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkButton" id="swap-color-button">
+                                <property name="use_action_appearance">False</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">True</property>
+                                <property name="use_action_appearance">False</property>
+                                <child internal-child="accessible">
+                                  <object class="AtkObject" id="swap-color-a11y">
+                                    <property name="accessible-name" translatable="yes">Swap colors</property>
+                                  </object>
+                                </child>
+                                <child>
+                                  <object class="GtkImage" id="image1">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="icon_name">object-flip-horizontal-symbolic</property>
+                                  </object>
+                                </child>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkColorButton" id="style-scolor">
+                                <property name="use_action_appearance">False</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">True</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="color">#000000000000</property>
+                                <child internal-child="accessible">
+                                  <object class="AtkObject" id="style-scolor-a11y">
+                                    <property name="accessible-name" translatable="yes">Secondary color</property>
+                                  </object>
+                                </child>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="position">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkComboBox" id="style-combobox">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="model">style-liststore</property>
+                                <property name="active">0</property>
+                                <child>
+                                  <object class="GtkCellRendererText" id="cellrenderertext1"/>
+                                  <attributes>
+                                    <attribute name="text">0</attribute>
+                                  </attributes>
+                                </child>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="pack_type">end</property>
+                                <property name="position">3</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="pack_type">end</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">3</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">True</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkVBox" id="vbox2">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <child>
+                      <object class="GtkComboBox" id="sources-combobox">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="model">sources-liststore</property>
+                        <child>
+                          <object class="GtkCellRendererText" id="cellrenderertext2"/>
+                          <attributes>
+                            <attribute name="text">0</attribute>
+                          </attributes>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkScrolledWindow" id="scrolledwindow1">
+                        <property name="width_request">262</property>
+                        <property name="height_request">260</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="shadow_type">in</property>
+                        <child>
+                          <object class="GtkIconView" id="backgrounds-iconview">
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="row_spacing">0</property>
+                            <property name="column_spacing">0</property>
+                            <child>
+                              <object class="GtkCellRendererPixbuf" id="pixbuf-renderer">
+                                <property name="stock_size">6</property>
+                              </object>
+                              <attributes>
+                                <attribute name="gicon">0</attribute>
+                              </attributes>
+                            </child>
+                            <child>
+                              <object class="GtkCellRendererText" id="text-renderer">
+                                <property name="visible">False</property>
+                              </object>
+                              <attributes>
+                                <attribute name="text">2</attribute>
+                              </attributes>
+                            </child>
+                          </object>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkToolbar" id="toolbar1">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="icon_size">1</property>
+                        <property name="toolbar-style">icons</property>
+                        <style>
+                          <class name="inline-toolbar"/>
+                        </style>
+                        <child>
+                          <object class="GtkToolButton" id="add_button">
+                            <property name="use_action_appearance">False</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="use_action_appearance">False</property>
+                            <property name="label" translatable="yes">Add wallpaper</property>
+                            <property name="use_underline">True</property>
+                            <property name="icon_name">list-add-symbolic</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="homogeneous">True</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkToolButton" id="remove_button">
+                            <property name="use_action_appearance">False</property>
+                            <property name="visible">True</property>
+                            <property name="sensitive">False</property>
+                            <property name="can_focus">False</property>
+                            <property name="use_action_appearance">False</property>
+                            <property name="label" translatable="yes">Remove wallpaper</property>
+                            <property name="use_underline">True</property>
+                            <property name="icon_name">list-remove-symbolic</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="homogeneous">True</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">2</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkCheckButton" id="add_wallpaper_dots">
+                        <property name="label" translatable="yes">Add dots</property>
+                        <property name="use_action_appearance">False</property>
+                        <property name="no_show_all">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="use_action_appearance">False</property>
+                        <property name="xalign">0</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
+                        <property name="position">3</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkSeparator" id="separator1">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="margin_left">5</property>
+                <property name="margin_right">13</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="theme-box">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="margin_bottom">8</property>
+                <property name="spacing">12</property>
+                <child>
+                  <object class="GtkLabel" id="theme-label">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="xalign">0</property>
+                    <property name="xpad">6</property>
+                    <property name="label" translatable="yes">&lt;b&gt;Theme&lt;/b&gt;</property>
+                    <property name="use_markup">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="padding">6</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkComboBox" id="theme-selector">
+                    <property name="width_request">268</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="margin_right">1</property>
+                    <property name="model">theme-list-store</property>
+                    <property name="id_column">0</property>
+                    <child>
+                      <object class="GtkCellRendererText" id="theme-name-renderer"/>
+                      <attributes>
+                        <attribute name="markup">1</attribute>
+                      </attributes>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="padding">9</property>
+                    <property name="pack_type">end</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkSeparator" id="unity-separator1">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="margin_left">5</property>
+                <property name="margin_right">13</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">3</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="unity-iconsize-box">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="spacing">12</property>
+                <child>
+                  <object class="GtkLabel" id="unity-iconsize-label">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="xalign">0</property>
+                    <property name="xpad">6</property>
+                    <property name="label" translatable="yes">&lt;b&gt;Launcher icon size&lt;/b&gt;</property>
+                    <property name="use_markup">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="padding">6</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkScale" id="unity-iconsize-scale">
+                    <property name="width_request">264</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="margin_right">2</property>
+                    <property name="round_digits">0</property>
+                    <property name="digits">0</property>
+                    <property name="value_pos">left</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="padding">9</property>
+                    <property name="pack_type">end</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">4</property>
+              </packing>
+            </child>
+          </object>
+        </child>
+        <child type="tab">
+          <object class="GtkLabel" id="appearance_label">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label" translatable="yes">Look</property>
+          </object>
+          <packing>
+            <property name="tab_fill">False</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox" id="unity-behavior">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="margin_top">3</property>
+            <property name="margin_bottom">3</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">3</property>
+            <child>
+              <object class="GtkBox" id="box1">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="orientation">vertical</property>
+                <child>
+                  <object class="GtkBox" id="box3">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="border_width">10</property>
+                    <property name="spacing">12</property>
+                    <child>
+                      <object class="GtkBox" id="box4">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="orientation">vertical</property>
+                        <property name="spacing">2</property>
+                        <child>
+                          <object class="GtkLabel" id="label4">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="xalign">0</property>
+                            <property name="label" translatable="yes">&lt;b&gt;Auto-hide the Launcher&lt;/b&gt;</property>
+                            <property name="use_markup">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel" id="label2">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="xalign">0</property>
+                            <property name="label" translatable="yes">&lt;span size="small"&gt;The launcher will reveal when moving the pointer to the defined hot spot.&lt;/span&gt;</property>
+                            <property name="use_markup">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkBox" id="reveal_location_box">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="margin_left">10</property>
+                            <property name="margin_top">9</property>
+                            <property name="orientation">vertical</property>
+                            <child>
+                              <object class="GtkLabel" id="unity_reveal_label">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="xalign">0</property>
+                                <property name="label" translatable="yes">Reveal location:</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkRadioButton" id="unity_reveal_spot_left">
+                                <property name="label" translatable="yes">Left side</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">False</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="xalign">0</property>
+                                <property name="active">True</property>
+                                <property name="draw_indicator">True</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkRadioButton" id="unity_reveal_spot_topleft">
+                                <property name="label" translatable="yes">Top left corner</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">False</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="xalign">0</property>
+                                <property name="active">True</property>
+                                <property name="draw_indicator">True</property>
+                                <property name="group">unity_reveal_spot_left</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkRadioButton" id="unity_reveal_spot_otheroption">
+                                <property name="label" translatable="yes">Other reveal option</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">False</property>
+                                <property name="no_show_all">True</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="xalign">0</property>
+                                <property name="draw_indicator">True</property>
+                                <property name="group">unity_reveal_spot_left</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">3</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">2</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkBox" id="box6">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="spacing">6</property>
+                            <child>
+                              <object class="GtkLabel" id="unity-launcher-sensitivity-label">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label" translatable="yes">Reveal sensitivity</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="unity-launcher-sensitivity-low-label">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="margin_left">5</property>
+                                <property name="label" translatable="yes">&lt;small&gt;Low&lt;/small&gt;</property>
+                                <property name="use_markup">True</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkScale" id="unity-launcher-sensitivity">
+                                <property name="width_request">300</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="round_digits">0</property>
+                                <property name="digits">0</property>
+                                <property name="draw_value">False</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="padding">9</property>
+                                <property name="position">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="unity-launcher-sensitivity-high-label">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label" translatable="yes">&lt;small&gt;High&lt;/small&gt;</property>
+                                <property name="use_markup">True</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">3</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">3</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="padding">5</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkBox" id="box7">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="orientation">vertical</property>
+                        <child>
+                          <object class="GtkSwitch" id="unity_launcher_autohide">
+                            <property name="use_action_appearance">False</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="use_action_appearance">False</property>
+                            <property name="active">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="pack_type">end</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkLabel" id="unity-label-external-tool">
+                    <property name="can_focus">False</property>
+                    <property name="xalign">0</property>
+                    <property name="xpad">12</property>
+                    <property name="label" translatable="yes">Some settings have been overriden by an external program, press "Restore Default Behaviors"  to reset the behavior and return control to this panel.</property>
+                    <property name="wrap">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkSeparator" id="separator3">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="box5">
+                <property name="height_request">36</property>
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <child>
+                  <object class="GtkButton" id="button-restore-unitybehavior">
+                    <property name="label" translatable="yes">Restore Default Behaviours</property>
+                    <property name="use_action_appearance">False</property>
+                    <property name="width_request">136</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="receives_default">True</property>
+                    <property name="use_action_appearance">False</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="padding">10</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <placeholder/>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+            <child>
+              <placeholder/>
+            </child>
+            <child>
+              <placeholder/>
+            </child>
+          </object>
+          <packing>
+            <property name="position">1</property>
+          </packing>
+        </child>
+        <child type="tab">
+          <object class="GtkLabel" id="behavior_label">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label" translatable="yes">Behavior</property>
+          </object>
+          <packing>
+            <property name="position">1</property>
+            <property name="tab_fill">False</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </object>
+  <object class="GtkSizeGroup" id="sizegroup">
+    <property name="mode">vertical</property>
+    <widgets>
+      <widget name="sources-combobox"/>
+      <widget name="heading-hbox"/>
+      <widget name="slide-label"/>
+      <widget name="strut"/>
+    </widgets>
+  </object>
+</interface>
Index: gnome-control-center-3.6.2/panels/appearance/cc-appearance-item.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/cc-appearance-item.c	2012-11-01 23:12:51.337697489 -0400
@@ -0,0 +1,952 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2010-2011 Red Hat, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include "config.h"
+
+#include <stdlib.h>
+#include <stdio.h>
+
+#include <gtk/gtk.h>
+#include <gio/gio.h>
+#include <glib/gi18n-lib.h>
+
+#include <libgnome-desktop/gnome-bg.h>
+#include <gdesktop-enums.h>
+
+#include "cc-appearance-item.h"
+#include "gdesktop-enums-types.h"
+
+#define CC_APPEARANCE_ITEM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_APPEARANCE_ITEM, CcAppearanceItemPrivate))
+
+struct CcAppearanceItemPrivate
+{
+        /* properties */
+        char            *name;
+        char            *uri;
+        char            *size;
+        GDesktopBackgroundStyle placement;
+        GDesktopBackgroundShading shading;
+        char            *primary_color;
+        char            *secondary_color;
+        char            *source_url; /* Used by the Flickr source */
+        char            *source_xml; /* Used by the Wallpapers source */
+        gboolean         is_deleted;
+        gboolean         needs_download;
+        CcAppearanceItemFlags flags;
+
+        /* internal */
+        GnomeBG         *bg;
+        char            *mime_type;
+        int              width;
+        int              height;
+};
+
+enum {
+        PROP_0,
+        PROP_NAME,
+        PROP_URI,
+        PROP_PLACEMENT,
+        PROP_SHADING,
+        PROP_PRIMARY_COLOR,
+        PROP_SECONDARY_COLOR,
+        PROP_IS_DELETED,
+        PROP_SOURCE_URL,
+        PROP_SOURCE_XML,
+        PROP_FLAGS,
+        PROP_SIZE,
+        PROP_NEEDS_DOWNLOAD
+};
+
+static void     cc_appearance_item_class_init     (CcAppearanceItemClass *klass);
+static void     cc_appearance_item_init           (CcAppearanceItem      *appearance_item);
+static void     cc_appearance_item_finalize       (GObject               *object);
+
+G_DEFINE_TYPE (CcAppearanceItem, cc_appearance_item, G_TYPE_OBJECT)
+
+static GEmblem *
+get_slideshow_icon (void)
+{
+	GIcon *themed;
+	GEmblem *emblem;
+	themed = g_themed_icon_new ("slideshow-emblem");
+	emblem = g_emblem_new_with_origin (themed, G_EMBLEM_ORIGIN_DEVICE);
+	g_object_unref (themed);
+	return emblem;
+}
+
+static void
+set_bg_properties (CcAppearanceItem *item)
+{
+        GdkColor pcolor = { 0, 0, 0, 0 };
+        GdkColor scolor = { 0, 0, 0, 0 };
+
+        if (item->priv->uri) {
+		GFile *file;
+		char *filename;
+
+		file = g_file_new_for_commandline_arg (item->priv->uri);
+		filename = g_file_get_path (file);
+		g_object_unref (file);
+
+		gnome_bg_set_filename (item->priv->bg, filename);
+		g_free (filename);
+	}
+
+        if (item->priv->primary_color != NULL) {
+                gdk_color_parse (item->priv->primary_color, &pcolor);
+        }
+        if (item->priv->secondary_color != NULL) {
+                gdk_color_parse (item->priv->secondary_color, &scolor);
+        }
+
+        gnome_bg_set_color (item->priv->bg, item->priv->shading, &pcolor, &scolor);
+        gnome_bg_set_placement (item->priv->bg, item->priv->placement);
+}
+
+
+gboolean
+cc_appearance_item_changes_with_time (CcAppearanceItem *item)
+{
+        gboolean changes;
+
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), FALSE);
+
+        changes = FALSE;
+        if (item->priv->bg != NULL) {
+                changes = gnome_bg_changes_with_time (item->priv->bg);
+        }
+        return changes;
+}
+
+static void
+update_size (CcAppearanceItem *item)
+{
+	g_free (item->priv->size);
+	item->priv->size = NULL;
+
+	if (item->priv->uri == NULL) {
+		item->priv->size = g_strdup ("");
+	} else {
+		if (gnome_bg_has_multiple_sizes (item->priv->bg) || gnome_bg_changes_with_time (item->priv->bg)) {
+			item->priv->size = g_strdup (_("multiple sizes"));
+		} else {
+			/* translators: 100 × 100px
+			 * Note that this is not an "x", but U+00D7 MULTIPLICATION SIGN */
+			item->priv->size = g_strdup_printf (_("%d \303\227 %d"),
+							    item->priv->width,
+							    item->priv->height);
+		}
+	}
+}
+
+static GdkPixbuf *
+render_at_size (GnomeBG *bg,
+                gint width,
+                gint height)
+{
+        GdkPixbuf *pixbuf;
+
+        pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, FALSE, 8, width, height);
+        gnome_bg_draw (bg, pixbuf, gdk_screen_get_default (), FALSE);
+
+        return pixbuf;
+}
+
+GIcon *
+cc_appearance_item_get_frame_thumbnail (CcAppearanceItem             *item,
+                                        GnomeDesktopThumbnailFactory *thumbs,
+                                        int                           width,
+                                        int                           height,
+                                        int                           frame,
+                                        gboolean                      force_size)
+{
+        GdkPixbuf *pixbuf = NULL;
+        GIcon *icon = NULL;
+
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+	g_return_val_if_fail (width > 0 && height > 0, NULL);
+
+        set_bg_properties (item);
+
+        if (force_size) {
+                /* FIXME: this doesn't play nice with slideshow stepping at all,
+                 * because it will always render the current slideshow frame, which
+                 * might not be what we want.
+                 * We're lacking an API to draw a high-res GnomeBG manually choosing
+                 * the slideshow frame though, so we can't do much better than this
+                 * for now.
+                 */
+                pixbuf = render_at_size (item->priv->bg, width, height);
+        } else {
+                if (frame >= 0) {
+                        pixbuf = gnome_bg_create_frame_thumbnail (item->priv->bg,
+                                                                  thumbs,
+                                                                  gdk_screen_get_default (),
+                                                                  width,
+                                                                  height,
+                                                                  frame);
+                } else {
+                        pixbuf = gnome_bg_create_thumbnail (item->priv->bg,
+                                                            thumbs,
+                                                            gdk_screen_get_default (),
+                                                            width,
+                                                            height);
+                }
+        }
+
+        if (pixbuf != NULL
+            && frame != -2
+            && gnome_bg_changes_with_time (item->priv->bg)) {
+                GEmblem *emblem;
+
+                emblem = get_slideshow_icon ();
+                icon = g_emblemed_icon_new (G_ICON (pixbuf), emblem);
+                g_object_unref (emblem);
+                g_object_unref (pixbuf);
+        } else {
+                icon = G_ICON (pixbuf);
+	}
+
+        gnome_bg_get_image_size (item->priv->bg,
+                                 thumbs,
+                                 width,
+                                 height,
+                                 &item->priv->width,
+                                 &item->priv->height);
+
+        update_size (item);
+
+        return icon;
+}
+
+
+GIcon *
+cc_appearance_item_get_thumbnail (CcAppearanceItem             *item,
+                                  GnomeDesktopThumbnailFactory *thumbs,
+                                  int                           width,
+                                  int                           height)
+{
+        return cc_appearance_item_get_frame_thumbnail (item, thumbs, width, height, -1, FALSE);
+}
+
+static void
+update_info (CcAppearanceItem *item,
+	     GFileInfo        *_info)
+{
+        GFile     *file;
+        GFileInfo *info;
+
+	if (_info == NULL) {
+		file = g_file_new_for_uri (item->priv->uri);
+
+		info = g_file_query_info (file,
+					  G_FILE_ATTRIBUTE_STANDARD_NAME ","
+					  G_FILE_ATTRIBUTE_STANDARD_SIZE ","
+					  G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE ","
+					  G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME ","
+					  G_FILE_ATTRIBUTE_TIME_MODIFIED,
+					  G_FILE_QUERY_INFO_NONE,
+					  NULL,
+					  NULL);
+		g_object_unref (file);
+	} else {
+		info = g_object_ref (_info);
+	}
+
+        g_free (item->priv->mime_type);
+        item->priv->mime_type = NULL;
+
+        if (info == NULL
+            || g_file_info_get_content_type (info) == NULL) {
+                if (item->priv->uri == NULL) {
+                        item->priv->mime_type = g_strdup ("image/x-no-data");
+                        g_free (item->priv->name);
+                        item->priv->name = g_strdup (_("No Desktop Background"));
+                }
+        } else {
+                if (item->priv->name == NULL)
+                        item->priv->name = g_strdup (g_file_info_get_display_name (info));
+
+                item->priv->mime_type = g_strdup (g_file_info_get_content_type (info));
+        }
+
+        if (info != NULL)
+                g_object_unref (info);
+}
+
+gboolean
+cc_appearance_item_load (CcAppearanceItem *item,
+			 GFileInfo        *info)
+{
+        g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), FALSE);
+
+        if (item->priv->uri == NULL)
+		return TRUE;
+
+        update_info (item, info);
+
+        if (item->priv->mime_type != NULL
+            && (g_str_has_prefix (item->priv->mime_type, "image/")
+                || strcmp (item->priv->mime_type, "application/xml") == 0)) {
+                set_bg_properties (item);
+        } else {
+		return FALSE;
+        }
+
+	/* FIXME we should handle XML files as well */
+        if (item->priv->mime_type != NULL &&
+            g_str_has_prefix (item->priv->mime_type, "image/")) {
+		char *filename;
+
+		filename = g_filename_from_uri (item->priv->uri, NULL, NULL);
+		gdk_pixbuf_get_file_info (filename,
+					  &item->priv->width,
+					  &item->priv->height);
+		g_free (filename);
+		update_size (item);
+	}
+
+        return TRUE;
+}
+
+static void
+_set_name (CcAppearanceItem *item,
+           const char       *value)
+{
+        g_free (item->priv->name);
+        item->priv->name = g_strdup (value);
+}
+
+const char *
+cc_appearance_item_get_name (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->name;
+}
+
+static void
+_set_uri (CcAppearanceItem *item,
+	  const char       *value)
+{
+        g_free (item->priv->uri);
+        if (value && *value == '\0') {
+		item->priv->uri = NULL;
+	} else {
+		if (value && strstr (value, "://") == NULL)
+			g_warning ("URI '%s' is invalid", value);
+		item->priv->uri = g_strdup (value);
+	}
+}
+
+const char *
+cc_appearance_item_get_uri (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->uri;
+}
+
+static void
+_set_placement (CcAppearanceItem        *item,
+                GDesktopBackgroundStyle  value)
+{
+        item->priv->placement = value;
+}
+
+static void
+_set_shading (CcAppearanceItem          *item,
+              GDesktopBackgroundShading  value)
+{
+        item->priv->shading = value;
+}
+
+static void
+_set_primary_color (CcAppearanceItem *item,
+                    const char       *value)
+{
+        g_free (item->priv->primary_color);
+        item->priv->primary_color = g_strdup (value);
+}
+
+const char *
+cc_appearance_item_get_pcolor (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->primary_color;
+}
+
+static void
+_set_secondary_color (CcAppearanceItem *item,
+                      const char       *value)
+{
+        g_free (item->priv->secondary_color);
+        item->priv->secondary_color = g_strdup (value);
+}
+
+const char *
+cc_appearance_item_get_scolor (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->secondary_color;
+}
+
+GDesktopBackgroundStyle
+cc_appearance_item_get_placement (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), G_DESKTOP_BACKGROUND_STYLE_SCALED);
+
+	return item->priv->placement;
+}
+
+GDesktopBackgroundShading
+cc_appearance_item_get_shading (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), G_DESKTOP_BACKGROUND_SHADING_SOLID);
+
+	return item->priv->shading;
+}
+
+static void
+_set_is_deleted (CcAppearanceItem *item,
+                 gboolean          value)
+{
+        item->priv->is_deleted = value;
+}
+
+static void
+_set_source_url (CcAppearanceItem *item,
+                 const char       *value)
+{
+        g_free (item->priv->source_url);
+        item->priv->source_url = g_strdup (value);
+}
+
+const char *
+cc_appearance_item_get_source_url (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->source_url;
+}
+
+static void
+_set_source_xml (CcAppearanceItem *item,
+                 const char       *value)
+{
+        g_free (item->priv->source_xml);
+        item->priv->source_xml = g_strdup (value);
+}
+
+const char *
+cc_appearance_item_get_source_xml (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->source_xml;
+}
+
+static void
+_set_flags (CcAppearanceItem      *item,
+            CcAppearanceItemFlags  value)
+{
+	item->priv->flags = value;
+}
+
+CcAppearanceItemFlags
+cc_appearance_item_get_flags (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), 0);
+
+	return item->priv->flags;
+}
+
+const char *
+cc_appearance_item_get_size (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), NULL);
+
+	return item->priv->size;
+}
+
+static void
+_set_needs_download (CcAppearanceItem *item,
+		     gboolean          value)
+{
+	item->priv->needs_download = value;
+}
+
+gboolean
+cc_appearance_item_get_needs_download (CcAppearanceItem *item)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_ITEM (item), 0);
+
+	return item->priv->needs_download;
+}
+
+static void
+cc_appearance_item_set_property (GObject      *object,
+                                 guint         prop_id,
+                                 const GValue *value,
+                                 GParamSpec   *pspec)
+{
+        CcAppearanceItem *self;
+
+        self = CC_APPEARANCE_ITEM (object);
+
+        switch (prop_id) {
+        case PROP_NAME:
+                _set_name (self, g_value_get_string (value));
+                break;
+        case PROP_URI:
+                _set_uri (self, g_value_get_string (value));
+                break;
+        case PROP_PLACEMENT:
+                _set_placement (self, g_value_get_enum (value));
+                break;
+        case PROP_SHADING:
+                _set_shading (self, g_value_get_enum (value));
+                break;
+        case PROP_PRIMARY_COLOR:
+                _set_primary_color (self, g_value_get_string (value));
+                break;
+        case PROP_SECONDARY_COLOR:
+                _set_secondary_color (self, g_value_get_string (value));
+                break;
+        case PROP_IS_DELETED:
+                _set_is_deleted (self, g_value_get_boolean (value));
+                break;
+	case PROP_SOURCE_URL:
+		_set_source_url (self, g_value_get_string (value));
+		break;
+	case PROP_SOURCE_XML:
+		_set_source_xml (self, g_value_get_string (value));
+		break;
+	case PROP_FLAGS:
+		_set_flags (self, g_value_get_flags (value));
+		break;
+	case PROP_NEEDS_DOWNLOAD:
+		_set_needs_download (self, g_value_get_boolean (value));
+		break;
+        default:
+                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+                break;
+        }
+}
+
+static void
+cc_appearance_item_get_property (GObject    *object,
+                                 guint       prop_id,
+                                 GValue     *value,
+                                 GParamSpec *pspec)
+{
+        CcAppearanceItem *self;
+
+        self = CC_APPEARANCE_ITEM (object);
+
+        switch (prop_id) {
+        case PROP_NAME:
+                g_value_set_string (value, self->priv->name);
+                break;
+	case PROP_URI:
+                g_value_set_string (value, self->priv->uri);
+                break;
+        case PROP_PLACEMENT:
+                g_value_set_enum (value, self->priv->placement);
+                break;
+        case PROP_SHADING:
+                g_value_set_enum (value, self->priv->shading);
+                break;
+        case PROP_PRIMARY_COLOR:
+                g_value_set_string (value, self->priv->primary_color);
+                break;
+        case PROP_SECONDARY_COLOR:
+                g_value_set_string (value, self->priv->secondary_color);
+                break;
+        case PROP_IS_DELETED:
+                g_value_set_boolean (value, self->priv->is_deleted);
+                break;
+	case PROP_SOURCE_URL:
+		g_value_set_string (value, self->priv->source_url);
+		break;
+	case PROP_SOURCE_XML:
+		g_value_set_string (value, self->priv->source_xml);
+		break;
+	case PROP_FLAGS:
+		g_value_set_flags (value, self->priv->flags);
+		break;
+	case PROP_SIZE:
+		g_value_set_string (value, self->priv->size);
+		break;
+	case PROP_NEEDS_DOWNLOAD:
+		g_value_set_boolean (value, self->priv->needs_download);
+		break;
+        default:
+                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+                break;
+        }
+}
+
+static GObject *
+cc_appearance_item_constructor (GType                  type,
+                                guint                  n_construct_properties,
+                                GObjectConstructParam *construct_properties)
+{
+        CcAppearanceItem      *appearance_item;
+
+        appearance_item = CC_APPEARANCE_ITEM (G_OBJECT_CLASS (cc_appearance_item_parent_class)->constructor (type,
+                                                                                                                         n_construct_properties,
+                                                                                                                         construct_properties));
+
+        return G_OBJECT (appearance_item);
+}
+
+static void
+cc_appearance_item_class_init (CcAppearanceItemClass *klass)
+{
+        GObjectClass  *object_class = G_OBJECT_CLASS (klass);
+
+        object_class->get_property = cc_appearance_item_get_property;
+        object_class->set_property = cc_appearance_item_set_property;
+        object_class->constructor = cc_appearance_item_constructor;
+        object_class->finalize = cc_appearance_item_finalize;
+
+        g_object_class_install_property (object_class,
+                                         PROP_NAME,
+                                         g_param_spec_string ("name",
+                                                              "name",
+                                                              "name",
+                                                              NULL,
+                                                              G_PARAM_READWRITE));
+        g_object_class_install_property (object_class,
+                                         PROP_URI,
+                                         g_param_spec_string ("uri",
+                                                              "uri",
+                                                              "uri",
+                                                              NULL,
+                                                              G_PARAM_READWRITE));
+        g_object_class_install_property (object_class,
+                                         PROP_PLACEMENT,
+					 g_param_spec_enum ("placement",
+							    "placement",
+							    "placement",
+							    G_DESKTOP_TYPE_DESKTOP_BACKGROUND_STYLE,
+							    G_DESKTOP_BACKGROUND_STYLE_SCALED,
+							    G_PARAM_READWRITE));
+
+        g_object_class_install_property (object_class,
+                                         PROP_SHADING,
+                                         g_param_spec_enum ("shading",
+							    "shading",
+							    "shading",
+							    G_DESKTOP_TYPE_DESKTOP_BACKGROUND_SHADING,
+							    G_DESKTOP_BACKGROUND_SHADING_SOLID,
+							    G_PARAM_READWRITE));
+        g_object_class_install_property (object_class,
+                                         PROP_PRIMARY_COLOR,
+                                         g_param_spec_string ("primary-color",
+                                                              "primary-color",
+                                                              "primary-color",
+                                                              "#000000000000",
+                                                              G_PARAM_READWRITE));
+        g_object_class_install_property (object_class,
+                                         PROP_SECONDARY_COLOR,
+                                         g_param_spec_string ("secondary-color",
+                                                              "secondary-color",
+                                                              "secondary-color",
+                                                              "#000000000000",
+                                                              G_PARAM_READWRITE));
+
+        g_object_class_install_property (object_class,
+                                         PROP_IS_DELETED,
+                                         g_param_spec_boolean ("is-deleted",
+                                                               NULL,
+                                                               NULL,
+                                                               FALSE,
+                                                               G_PARAM_READWRITE));
+
+        g_object_class_install_property (object_class,
+                                         PROP_SOURCE_URL,
+                                         g_param_spec_string ("source-url",
+                                                              "source-url",
+                                                              "source-url",
+                                                              NULL,
+                                                              G_PARAM_READWRITE));
+
+        g_object_class_install_property (object_class,
+                                         PROP_SOURCE_XML,
+                                         g_param_spec_string ("source-xml",
+                                                              "source-xml",
+                                                              "source-xml",
+                                                              NULL,
+                                                              G_PARAM_READWRITE));
+
+	g_object_class_install_property (object_class,
+					 PROP_FLAGS,
+					 g_param_spec_flags ("flags",
+							     "flags",
+							     "flags",
+							     G_DESKTOP_TYPE_APPEARANCE_ITEM_FLAGS,
+							     0,
+							     G_PARAM_READWRITE));
+
+        g_object_class_install_property (object_class,
+                                         PROP_SIZE,
+                                         g_param_spec_string ("size",
+                                                              "size",
+                                                              "size",
+                                                              NULL,
+                                                              G_PARAM_READABLE));
+
+        g_object_class_install_property (object_class,
+                                         PROP_NEEDS_DOWNLOAD,
+                                         g_param_spec_boolean ("needs-download",
+                                                               NULL,
+                                                               NULL,
+                                                               TRUE,
+                                                               G_PARAM_READWRITE));
+
+
+        g_type_class_add_private (klass, sizeof (CcAppearanceItemPrivate));
+}
+
+static void
+cc_appearance_item_init (CcAppearanceItem *item)
+{
+        item->priv = CC_APPEARANCE_ITEM_GET_PRIVATE (item);
+
+        item->priv->bg = gnome_bg_new ();
+
+        item->priv->shading = G_DESKTOP_BACKGROUND_SHADING_SOLID;
+        item->priv->placement = G_DESKTOP_BACKGROUND_STYLE_SCALED;
+        item->priv->primary_color = g_strdup ("#000000000000");
+        item->priv->secondary_color = g_strdup ("#000000000000");
+        item->priv->needs_download = TRUE;
+        item->priv->flags = 0;
+}
+
+static void
+cc_appearance_item_finalize (GObject *object)
+{
+        CcAppearanceItem *item;
+
+        g_return_if_fail (object != NULL);
+        g_return_if_fail (CC_IS_APPEARANCE_ITEM (object));
+
+        item = CC_APPEARANCE_ITEM (object);
+
+        g_return_if_fail (item->priv != NULL);
+
+        g_free (item->priv->name);
+        g_free (item->priv->uri);
+        g_free (item->priv->primary_color);
+        g_free (item->priv->secondary_color);
+        g_free (item->priv->mime_type);
+        g_free (item->priv->size);
+
+        if (item->priv->bg != NULL)
+                g_object_unref (item->priv->bg);
+
+        G_OBJECT_CLASS (cc_appearance_item_parent_class)->finalize (object);
+}
+
+CcAppearanceItem *
+cc_appearance_item_new (const char *uri)
+{
+        GObject *object;
+
+        object = g_object_new (CC_TYPE_APPEARANCE_ITEM,
+                               "uri", uri,
+                               NULL);
+
+        return CC_APPEARANCE_ITEM (object);
+}
+
+CcAppearanceItem *
+cc_appearance_item_copy (CcAppearanceItem *item)
+{
+	CcAppearanceItem *ret;
+
+	ret = cc_appearance_item_new (item->priv->uri);
+	ret->priv->name = g_strdup (item->priv->name);
+	ret->priv->size = g_strdup (item->priv->size);
+	ret->priv->placement = item->priv->placement;
+	ret->priv->shading = item->priv->shading;
+	ret->priv->primary_color = g_strdup (item->priv->primary_color);
+	ret->priv->secondary_color = g_strdup (item->priv->secondary_color);
+	ret->priv->source_url = g_strdup (item->priv->source_url);
+	ret->priv->source_xml = g_strdup (item->priv->source_xml);
+	ret->priv->is_deleted = item->priv->is_deleted;
+	ret->priv->needs_download = item->priv->needs_download;
+	ret->priv->flags = item->priv->flags;
+
+	return ret;
+}
+
+static const char *
+flags_to_str (CcAppearanceItemFlags flag)
+{
+	GFlagsClass *fclass;
+	GFlagsValue *value;
+
+	fclass = G_FLAGS_CLASS (g_type_class_peek (G_DESKTOP_TYPE_APPEARANCE_ITEM_FLAGS));
+	value = g_flags_get_first_value (fclass, flag);
+
+	g_assert (value);
+
+	return value->value_nick;
+}
+
+static const char *
+enum_to_str (GType type,
+	     int   v)
+{
+	GEnumClass *eclass;
+	GEnumValue *value;
+
+	eclass = G_ENUM_CLASS (g_type_class_peek (type));
+	value = g_enum_get_value (eclass, v);
+
+	g_assert (value);
+
+	return value->value_nick;
+}
+
+void
+cc_appearance_item_dump (CcAppearanceItem *item)
+{
+	CcAppearanceItemPrivate *priv;
+	GString *flags;
+	int i;
+
+	g_return_if_fail (CC_IS_APPEARANCE_ITEM (item));
+
+	priv = item->priv;
+
+	g_debug ("name:\t\t\t%s", priv->name);
+	g_debug ("URI:\t\t\t%s", priv->uri ? priv->uri : "NULL");
+	if (priv->size)
+		g_debug ("size:\t\t\t'%s'", priv->size);
+	flags = g_string_new (NULL);
+	for (i = 0; i < 5; i++) {
+		if (priv->flags & (1 << i)) {
+			g_string_append (flags, flags_to_str (1 << i));
+			g_string_append_c (flags, ' ');
+		}
+	}
+	if (flags->len == 0)
+		g_string_append (flags, "-none-");
+	g_debug ("flags:\t\t\t%s", flags->str);
+	g_string_free (flags, TRUE);
+	if (priv->primary_color)
+		g_debug ("pcolor:\t\t%s", priv->primary_color);
+	if (priv->secondary_color)
+		g_debug ("scolor:\t\t%s", priv->secondary_color);
+	g_debug ("placement:\t\t%s", enum_to_str (G_DESKTOP_TYPE_DESKTOP_BACKGROUND_STYLE, priv->placement));
+	g_debug ("shading:\t\t%s", enum_to_str (G_DESKTOP_TYPE_DESKTOP_BACKGROUND_SHADING, priv->shading));
+	if (priv->source_url)
+		g_debug ("source URL:\t\t%s", priv->source_url);
+	if (priv->source_xml)
+		g_debug ("source XML:\t\t%s", priv->source_xml);
+	g_debug ("deleted:\t\t%s", priv->is_deleted ? "yes" : "no");
+	if (priv->mime_type)
+		g_debug ("mime-type:\t\t%s", priv->mime_type);
+	g_debug ("dimensions:\t\t%d x %d", priv->width, priv->height);
+	g_debug (" ");
+}
+
+static gboolean
+files_equal (const char *a,
+	     const char *b)
+{
+	GFile *file1, *file2;
+	gboolean retval;
+
+	if (a == NULL &&
+	    b == NULL)
+		return TRUE;
+
+	if (a == NULL ||
+	    b == NULL)
+		return FALSE;
+
+	file1 = g_file_new_for_commandline_arg (a);
+	file2 = g_file_new_for_commandline_arg (b);
+	if (g_file_equal (file1, file2) == FALSE)
+		retval = FALSE;
+	else
+		retval = TRUE;
+	g_object_unref (file1);
+	g_object_unref (file2);
+
+	return retval;
+}
+
+static gboolean
+colors_equal (const char *a,
+	      const char *b)
+{
+	GdkColor color1, color2;
+
+	gdk_color_parse (a, &color1);
+	gdk_color_parse (b, &color2);
+
+	return gdk_color_equal (&color1, &color2);
+}
+
+gboolean
+cc_appearance_item_compare (CcAppearanceItem *saved,
+			    CcAppearanceItem *configured)
+{
+	CcAppearanceItemFlags flags;
+
+	flags = saved->priv->flags;
+	if (flags == 0)
+		return FALSE;
+
+	if (flags & CC_APPEARANCE_ITEM_HAS_URI) {
+		if (files_equal (saved->priv->uri, configured->priv->uri) == FALSE)
+			return FALSE;
+	}
+	if (flags & CC_APPEARANCE_ITEM_HAS_SHADING) {
+		if (saved->priv->shading != configured->priv->shading)
+			return FALSE;
+	}
+	if (flags & CC_APPEARANCE_ITEM_HAS_PLACEMENT) {
+		if (saved->priv->placement != configured->priv->placement)
+			return FALSE;
+	}
+	if (flags & CC_APPEARANCE_ITEM_HAS_PCOLOR) {
+		if (colors_equal (saved->priv->primary_color,
+				  configured->priv->primary_color) == FALSE) {
+			return FALSE;
+		}
+	}
+	if (flags & CC_APPEARANCE_ITEM_HAS_SCOLOR) {
+		if (colors_equal (saved->priv->secondary_color,
+				  configured->priv->secondary_color) == FALSE) {
+			return FALSE;
+		}
+	}
+
+	return TRUE;
+}
Index: gnome-control-center-3.6.2/panels/appearance/cc-appearance-item.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/cc-appearance-item.h	2012-11-01 23:12:51.337697489 -0400
@@ -0,0 +1,104 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2010-2011 Red Hat, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef __CC_APPEARANCE_ITEM_H
+#define __CC_APPEARANCE_ITEM_H
+
+#include <glib-object.h>
+
+#include <libgnome-desktop/gnome-desktop-thumbnail.h>
+#include <gdesktop-enums.h>
+#include <libgnome-desktop/gnome-bg.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_APPEARANCE_ITEM         (cc_appearance_item_get_type ())
+#define CC_APPEARANCE_ITEM(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), CC_TYPE_APPEARANCE_ITEM, CcAppearanceItem))
+#define CC_APPEARANCE_ITEM_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), CC_TYPE_APPEARANCE_ITEM, CcAppearanceItemClass))
+#define CC_IS_APPEARANCE_ITEM(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), CC_TYPE_APPEARANCE_ITEM))
+#define CC_IS_APPEARANCE_ITEM_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), CC_TYPE_APPEARANCE_ITEM))
+#define CC_APPEARANCE_ITEM_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CC_TYPE_APPEARANCE_ITEM, CcAppearanceItemClass))
+
+typedef enum {
+	CC_APPEARANCE_ITEM_HAS_SHADING   = 1 << 0,
+	CC_APPEARANCE_ITEM_HAS_PLACEMENT = 1 << 1,
+	CC_APPEARANCE_ITEM_HAS_PCOLOR    = 1 << 2,
+	CC_APPEARANCE_ITEM_HAS_SCOLOR    = 1 << 3,
+	CC_APPEARANCE_ITEM_HAS_URI       = 1 << 4
+} CcAppearanceItemFlags;
+
+#define CC_APPEARANCE_ITEM_HAS_ALL (CC_APPEARANCE_ITEM_HAS_SHADING &	\
+				    CC_APPEARANCE_ITEM_HAS_PLACEMENT &	\
+				    CC_APPEARANCE_ITEM_HAS_PCOLOR &	\
+				    CC_APPEARANCE_ITEM_HAS_SCOLOR &	\
+				    CC_APPEARANCE_ITEM_HAS_FNAME)
+
+typedef struct CcAppearanceItemPrivate CcAppearanceItemPrivate;
+
+typedef struct
+{
+        GObject                  parent;
+        CcAppearanceItemPrivate *priv;
+} CcAppearanceItem;
+
+typedef struct
+{
+        GObjectClass   parent_class;
+} CcAppearanceItemClass;
+
+GType              cc_appearance_item_get_type (void);
+
+CcAppearanceItem * cc_appearance_item_new                 (const char                   *uri);
+CcAppearanceItem * cc_appearance_item_copy                (CcAppearanceItem             *item);
+gboolean           cc_appearance_item_load                (CcAppearanceItem             *item,
+							   GFileInfo                    *info);
+gboolean           cc_appearance_item_changes_with_time   (CcAppearanceItem             *item);
+
+GIcon     *        cc_appearance_item_get_thumbnail       (CcAppearanceItem             *item,
+                                                           GnomeDesktopThumbnailFactory *thumbs,
+                                                           int                           width,
+                                                           int                           height);
+GIcon     *        cc_appearance_item_get_frame_thumbnail (CcAppearanceItem             *item,
+                                                           GnomeDesktopThumbnailFactory *thumbs,
+                                                           int                           width,
+                                                           int                           height,
+                                                           int                           frame,
+                                                           gboolean                      force_size);
+
+GDesktopBackgroundStyle   cc_appearance_item_get_placement  (CcAppearanceItem *item);
+GDesktopBackgroundShading cc_appearance_item_get_shading    (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_uri        (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_source_url (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_source_xml (CcAppearanceItem *item);
+CcAppearanceItemFlags     cc_appearance_item_get_flags      (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_pcolor     (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_scolor     (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_name       (CcAppearanceItem *item);
+const char *              cc_appearance_item_get_size       (CcAppearanceItem *item);
+gboolean                  cc_appearance_item_get_needs_download (CcAppearanceItem *item);
+
+gboolean                  cc_appearance_item_compare        (CcAppearanceItem *saved,
+							     CcAppearanceItem *configured);
+
+void                      cc_appearance_item_dump           (CcAppearanceItem *item);
+
+G_END_DECLS
+
+#endif /* __CC_APPEARANCE_ITEM_H */
Index: gnome-control-center-3.6.2/panels/appearance/cc-appearance-panel.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/cc-appearance-panel.c	2012-11-01 23:14:39.113692983 -0400
@@ -0,0 +1,1831 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+#include <config.h>
+
+#include <string.h>
+#include <glib/gi18n-lib.h>
+#include <gdesktop-enums.h>
+
+#include "cc-appearance-panel.h"
+#include "bg-wallpapers-source.h"
+#include "bg-pictures-source.h"
+#include "bg-colors-source.h"
+
+#ifdef HAVE_LIBSOCIALWEB
+#include "bg-flickr-source.h"
+#endif
+
+#include "cc-appearance-item.h"
+#include "cc-appearance-xml.h"
+
+#define WP_PATH_ID "org.gnome.desktop.background"
+#define WP_URI_KEY "picture-uri"
+#define WP_OPTIONS_KEY "picture-options"
+#define WP_SHADING_KEY "color-shading-type"
+#define WP_PCOLOR_KEY "primary-color"
+#define WP_SCOLOR_KEY "secondary-color"
+
+enum {
+  COL_SOURCE_NAME,
+  COL_SOURCE_TYPE,
+  COL_SOURCE,
+  NUM_COLS
+};
+
+G_DEFINE_DYNAMIC_TYPE (CcAppearancePanel, cc_appearance_panel, CC_TYPE_PANEL)
+
+#define APPEARANCE_PANEL_PRIVATE(o) \
+  (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_APPEARANCE_PANEL, CcAppearancePanelPrivate))
+
+struct _CcAppearancePanelPrivate
+{
+  GtkBuilder *builder;
+
+  BgWallpapersSource *wallpapers_source;
+  BgPicturesSource *pictures_source;
+  BgColorsSource *colors_source;
+
+#ifdef HAVE_LIBSOCIALWEB
+  BgFlickrSource *flickr_source;
+#endif
+
+  GSettings *settings;
+  GSettings *interface_settings;
+  GSettings *canonical_interface_settings;
+  GSettings *wm_theme_settings;
+  GSettings *unity_settings;
+
+  GnomeDesktopThumbnailFactory *thumb_factory;
+
+  CcAppearanceItem *current_background;
+  gint current_source;
+
+  GCancellable *copy_cancellable;
+
+  GtkWidget *spinner;
+
+  GdkPixbuf *display_base;
+  GdkPixbuf *display_overlay;
+};
+
+enum
+{
+  SOURCE_WALLPAPERS,
+  SOURCE_PICTURES,
+  SOURCE_COLORS,
+#ifdef HAVE_LIBSOCIALWEB
+  SOURCE_FLICKR
+#endif
+};
+
+#define UNITY_GSETTINGS_SCHEMA "org.compiz.unityshell"
+#define UNITY_GSETTINGS_PATH "/org/compiz/profiles/unity/plugins/unityshell/"
+#define UNITY_ICONSIZE_KEY "icon-size"
+#define UNITY_LAUNCHERSENSITIVITY_KEY "edge-responsiveness"
+#define UNITY_LAUNCHERHIDE_KEY "launcher-hide-mode"
+#define UNITY_LAUNCHERREVEAL_KEY "reveal-trigger"
+#define CANONICAL_DESKTOP_INTERFACE "com.canonical.desktop.interface"
+
+#define MIN_ICONSIZE 32.0
+#define MAX_ICONSIZE 64.0
+
+#define MIN_LAUNCHER_SENSIVITY 0.2
+#define MAX_LAUNCHER_SENSIVITY 8.0
+
+typedef struct
+{
+  gdouble min;
+  gdouble max;
+} MinMax;
+static MinMax iconsize_values;
+static MinMax launchersensitivity_values;
+
+#define WID(y) (GtkWidget *) gtk_builder_get_object (priv->builder, y)
+
+static void
+cc_appearance_panel_get_property (GObject    *object,
+                                  guint       property_id,
+                                  GValue     *value,
+                                  GParamSpec *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+cc_appearance_panel_set_property (GObject      *object,
+                                  guint         property_id,
+                                  const GValue *value,
+                                  GParamSpec   *pspec)
+{
+  switch (property_id)
+    {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    }
+}
+
+static void
+cc_appearance_panel_dispose (GObject *object)
+{
+  CcAppearancePanelPrivate *priv = CC_APPEARANCE_PANEL (object)->priv;
+
+  if (priv->builder)
+    {
+      g_object_unref (priv->builder);
+      priv->builder = NULL;
+
+      /* destroying the builder object will also destroy the spinner */
+      priv->spinner = NULL;
+    }
+
+  if (priv->wallpapers_source)
+    {
+      g_object_unref (priv->wallpapers_source);
+      priv->wallpapers_source = NULL;
+    }
+
+  if (priv->pictures_source)
+    {
+      g_object_unref (priv->pictures_source);
+      priv->pictures_source = NULL;
+    }
+
+  if (priv->colors_source)
+    {
+      g_object_unref (priv->colors_source);
+      priv->colors_source = NULL;
+    }
+#ifdef HAVE_LIBSOCIALWEB
+  if (priv->flickr_source)
+    {
+      g_object_unref (priv->flickr_source);
+      priv->flickr_source = NULL;
+    }
+#endif
+
+  if (priv->settings)
+    {
+      g_object_unref (priv->settings);
+      priv->settings = NULL;
+    }
+
+  if (priv->interface_settings)
+    {
+      g_object_unref (priv->interface_settings);
+      priv->interface_settings = NULL;
+    }
+
+  if (priv->canonical_interface_settings)
+    {
+      g_object_unref (priv->canonical_interface_settings);
+      priv->canonical_interface_settings = NULL;
+    }
+
+  if (priv->wm_theme_settings)
+    {
+      g_object_unref (priv->wm_theme_settings);
+      priv->wm_theme_settings = NULL;
+    }
+
+  if (priv->unity_settings)
+    {
+      g_object_unref (priv->unity_settings);
+      priv->unity_settings = NULL;
+    }
+
+  if (priv->copy_cancellable)
+    {
+      /* cancel any copy operation */
+      g_cancellable_cancel (priv->copy_cancellable);
+
+      g_object_unref (priv->copy_cancellable);
+      priv->copy_cancellable = NULL;
+    }
+
+  if (priv->thumb_factory)
+    {
+      g_object_unref (priv->thumb_factory);
+      priv->thumb_factory = NULL;
+    }
+
+  if (priv->display_base)
+    {
+      g_object_unref (priv->display_base);
+      priv->display_base = NULL;
+    }
+
+  if (priv->display_overlay)
+    {
+      g_object_unref (priv->display_overlay);
+      priv->display_overlay = NULL;
+    }
+
+  G_OBJECT_CLASS (cc_appearance_panel_parent_class)->dispose (object);
+}
+
+static void
+cc_appearance_panel_finalize (GObject *object)
+{
+  CcAppearancePanelPrivate *priv = CC_APPEARANCE_PANEL (object)->priv;
+
+  if (priv->current_background)
+    {
+      g_object_unref (priv->current_background);
+      priv->current_background = NULL;
+    }
+
+  G_OBJECT_CLASS (cc_appearance_panel_parent_class)->finalize (object);
+}
+
+static void
+cc_appearance_panel_class_init (CcAppearancePanelClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  g_type_class_add_private (klass, sizeof (CcAppearancePanelPrivate));
+
+  object_class->get_property = cc_appearance_panel_get_property;
+  object_class->set_property = cc_appearance_panel_set_property;
+  object_class->dispose = cc_appearance_panel_dispose;
+  object_class->finalize = cc_appearance_panel_finalize;
+}
+
+static void
+cc_appearance_panel_class_finalize (CcAppearancePanelClass *klass)
+{
+}
+
+static void
+source_update_edit_box (CcAppearancePanelPrivate *priv,
+			gboolean                  initial)
+{
+  CcAppearanceItemFlags flags;
+
+  flags = cc_appearance_item_get_flags (priv->current_background);
+
+  if ((flags & CC_APPEARANCE_ITEM_HAS_SCOLOR &&
+       priv->current_source != SOURCE_COLORS) ||
+      cc_appearance_item_get_shading (priv->current_background) == G_DESKTOP_BACKGROUND_SHADING_SOLID)
+    gtk_widget_hide (WID ("style-scolor"));
+  else
+    gtk_widget_show (WID ("style-scolor"));
+
+  if (flags & CC_APPEARANCE_ITEM_HAS_PCOLOR &&
+      priv->current_source != SOURCE_COLORS)
+    gtk_widget_hide (WID ("style-pcolor"));
+  else
+    gtk_widget_show (WID ("style-pcolor"));
+
+  if (gtk_widget_get_visible (WID ("style-pcolor")) &&
+      gtk_widget_get_visible (WID ("style-scolor")))
+    gtk_widget_show (WID ("swap-color-button"));
+  else
+    gtk_widget_hide (WID ("swap-color-button"));
+
+  if (flags & CC_APPEARANCE_ITEM_HAS_PLACEMENT ||
+      cc_appearance_item_get_uri (priv->current_background) == NULL)
+    gtk_widget_hide (WID ("style-combobox"));
+  else
+    gtk_widget_show (WID ("style-combobox"));
+
+  /* FIXME What to do if the background has a gradient shading
+   * and provides the colours? */
+}
+
+static void
+source_changed_cb (GtkComboBox              *combo,
+                   CcAppearancePanelPrivate *priv)
+{
+  GtkTreeIter iter;
+  GtkTreeModel *model;
+  GtkIconView *view;
+  guint type;
+  BgSource *source;
+
+  gtk_combo_box_get_active_iter (combo, &iter);
+  model = gtk_combo_box_get_model (combo);
+  gtk_tree_model_get (model, &iter,
+                      COL_SOURCE_TYPE, &type,
+                      COL_SOURCE, &source, -1);
+
+  view = (GtkIconView *) gtk_builder_get_object (priv->builder,
+                                                 "backgrounds-iconview");
+
+  gtk_icon_view_set_model (view,
+                           GTK_TREE_MODEL (bg_source_get_liststore (source)));
+}
+
+static void
+select_style (GtkComboBox *box,
+	      GDesktopBackgroundStyle new_style)
+{
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  gboolean cont;
+
+  model = gtk_combo_box_get_model (box);
+  cont = gtk_tree_model_get_iter_first (model, &iter);
+  while (cont != FALSE)
+    {
+      GDesktopBackgroundStyle style;
+
+      gtk_tree_model_get (model, &iter,
+			  1, &style,
+			  -1);
+
+      if (style == new_style)
+        {
+          gtk_combo_box_set_active_iter (box, &iter);
+          break;
+	}
+      cont = gtk_tree_model_iter_next (model, &iter);
+    }
+
+  if (cont == FALSE)
+    gtk_combo_box_set_active (box, -1);
+}
+
+static void
+update_preview (CcAppearancePanelPrivate *priv,
+                CcAppearanceItem         *item)
+{
+  gchar *markup;
+  gboolean changes_with_time;
+
+  if (item && priv->current_background)
+    {
+      g_object_unref (priv->current_background);
+      priv->current_background = cc_appearance_item_copy (item);
+      cc_appearance_item_load (priv->current_background, NULL);
+    }
+
+  source_update_edit_box (priv, FALSE);
+
+  changes_with_time = FALSE;
+
+  if (priv->current_background)
+    {
+      GdkColor pcolor, scolor;
+      const char* bgsize = NULL;
+
+      markup = g_strdup_printf ("<i>%s</i>", cc_appearance_item_get_name (priv->current_background));
+      gtk_label_set_markup (GTK_LABEL (WID ("background-label")), markup);
+      g_free (markup);
+
+      bgsize = cc_appearance_item_get_size (priv->current_background);
+      if (bgsize && *bgsize != '\0')
+       {
+          markup = g_strdup_printf ("(%s)", bgsize);
+          gtk_label_set_text (GTK_LABEL (WID ("size_label")), markup);
+          g_free (markup);
+       }
+      else
+          gtk_label_set_text (GTK_LABEL (WID ("size_label")), "");
+
+      gdk_color_parse (cc_appearance_item_get_pcolor (priv->current_background), &pcolor);
+      gdk_color_parse (cc_appearance_item_get_scolor (priv->current_background), &scolor);
+
+      gtk_color_button_set_color (GTK_COLOR_BUTTON (WID ("style-pcolor")), &pcolor);
+      gtk_color_button_set_color (GTK_COLOR_BUTTON (WID ("style-scolor")), &scolor);
+
+      select_style (GTK_COMBO_BOX (WID ("style-combobox")),
+                    cc_appearance_item_get_placement (priv->current_background));
+
+      changes_with_time = cc_appearance_item_changes_with_time (priv->current_background);
+    }
+
+  gtk_widget_set_visible (WID ("slide_image"), changes_with_time);
+  gtk_widget_set_visible (WID ("slide-label"), changes_with_time);
+
+  gtk_widget_queue_draw (WID ("preview-area"));
+}
+
+static char *
+get_save_path (void)
+{
+  return g_build_filename (g_get_user_config_dir (),
+			   "gnome-control-center",
+			   "backgrounds",
+			   "last-edited.xml",
+			   NULL);
+}
+
+static gboolean
+create_save_dir (void)
+{
+  char *path;
+
+  path = g_build_filename (g_get_user_config_dir (),
+			   "gnome-control-center",
+			   "backgrounds",
+			   NULL);
+  if (g_mkdir_with_parents (path, 0755) < 0)
+    {
+      g_warning ("Failed to create directory '%s'", path);
+      g_free (path);
+      return FALSE;
+    }
+  g_free (path);
+  return TRUE;
+}
+
+static void
+copy_finished_cb (GObject      *source_object,
+                  GAsyncResult *result,
+                  gpointer      pointer)
+{
+  GError *err = NULL;
+  CcAppearancePanel *panel = (CcAppearancePanel *) pointer;
+  CcAppearancePanelPrivate *priv = panel->priv;
+  CcAppearanceItem *item;
+
+  if (!g_file_copy_finish (G_FILE (source_object), result, &err))
+    {
+      if (err->code != G_IO_ERROR_CANCELLED)
+        g_warning ("Failed to copy image to cache location: %s", err->message);
+
+      g_error_free (err);
+    }
+  item = g_object_get_data (source_object, "item");
+
+  /* the panel may have been destroyed before the callback is run, so be sure
+   * to check the widgets are not NULL */
+
+  if (priv->spinner)
+    {
+      gtk_widget_destroy (GTK_WIDGET (priv->spinner));
+      priv->spinner = NULL;
+    }
+
+  if (priv->current_background)
+    cc_appearance_item_load (priv->current_background, NULL);
+
+  if (priv->builder)
+    {
+      char *filename;
+
+      update_preview (priv, item);
+
+      /* Save the source XML if there is one */
+      filename = get_save_path ();
+      if (create_save_dir ())
+        cc_appearance_xml_save (priv->current_background, filename);
+    }
+
+  /* remove the reference taken when the copy was set up */
+  g_object_unref (panel);
+}
+
+static void
+update_remove_button (CcAppearancePanel *panel,
+		      CcAppearanceItem  *item)
+{
+  CcAppearancePanelPrivate *priv;
+  const char *uri;
+  char *cache_path;
+  GFile *bg, *cache, *parent;
+  gboolean sensitive = FALSE;
+
+  priv = panel->priv;
+
+  if (priv->current_source != SOURCE_PICTURES)
+    goto bail;
+
+  uri = cc_appearance_item_get_uri (item);
+  if (uri == NULL)
+    goto bail;
+
+  bg = g_file_new_for_uri (uri);
+  parent = g_file_get_parent (bg);
+  if (parent == NULL)
+    {
+      g_object_unref (bg);
+      goto bail;
+    }
+  cache_path = bg_pictures_source_get_cache_path ();
+  cache = g_file_new_for_path (cache_path);
+  g_free (cache_path);
+
+  if (g_file_equal (parent, cache))
+    sensitive = TRUE;
+
+  g_object_unref (parent);
+  g_object_unref (cache);
+
+bail:
+  gtk_widget_set_sensitive (WID ("remove_button"), sensitive);
+
+}
+
+static CcAppearanceItem *
+get_selected_item (CcAppearancePanel *panel)
+{
+  CcAppearancePanelPrivate *priv = panel->priv;
+  GtkIconView *icon_view;
+  GtkTreeIter iter;
+  GtkTreeModel *model;
+  GList *list;
+  CcAppearanceItem *item;
+
+  icon_view = GTK_ICON_VIEW (WID ("backgrounds-iconview"));
+  item = NULL;
+  list = gtk_icon_view_get_selected_items (icon_view);
+
+  if (!list)
+    return NULL;
+
+  model = gtk_icon_view_get_model (icon_view);
+
+  if (gtk_tree_model_get_iter (model, &iter, (GtkTreePath*) list->data) == FALSE)
+    goto bail;
+
+  gtk_tree_model_get (model, &iter, 1, &item, -1);
+
+bail:
+  g_list_foreach (list, (GFunc)gtk_tree_path_free, NULL);
+  g_list_free (list);
+
+  return item;
+}
+
+static void
+backgrounds_changed_cb (GtkIconView       *icon_view,
+                        CcAppearancePanel *panel)
+{
+  GtkTreeIter iter;
+  GtkTreeModel *model;
+  CcAppearanceItem *item;
+  CcAppearancePanelPrivate *priv = panel->priv;
+  char *pcolor, *scolor;
+  gboolean draw_preview = TRUE;
+  const char *uri;
+  CcAppearanceItemFlags flags;
+  char *filename;
+
+  item = get_selected_item (panel);
+
+  if (item == NULL)
+    return;
+
+  /* Update current source */
+  model = gtk_combo_box_get_model (GTK_COMBO_BOX (WID ("sources-combobox")));
+  gtk_combo_box_get_active_iter (GTK_COMBO_BOX (WID ("sources-combobox")),
+                                 &iter);
+  gtk_tree_model_get (model, &iter,
+		      COL_SOURCE_TYPE, &priv->current_source, -1);
+
+  uri = cc_appearance_item_get_uri (item);
+  flags = cc_appearance_item_get_flags (item);
+
+  if ((flags & CC_APPEARANCE_ITEM_HAS_URI) && uri == NULL)
+    {
+      g_settings_set_enum (priv->settings, WP_OPTIONS_KEY, G_DESKTOP_BACKGROUND_STYLE_NONE);
+      g_settings_set_string (priv->settings, WP_URI_KEY, "");
+    }
+  else if (cc_appearance_item_get_source_url (item) != NULL &&
+	   cc_appearance_item_get_needs_download (item))
+    {
+      GFile *source, *dest;
+      gchar *cache_path, *basename, *dest_path, *display_name, *dest_uri;
+      GdkPixbuf *pixbuf;
+
+      cache_path = bg_pictures_source_get_cache_path ();
+      if (g_mkdir_with_parents (cache_path, 0755) < 0)
+        {
+          g_warning ("Failed to create directory '%s'", cache_path);
+          g_free (cache_path);
+          return;
+	}
+      g_free (cache_path);
+
+      dest_path = bg_pictures_source_get_unique_path (cc_appearance_item_get_source_url (item));
+      dest = g_file_new_for_path (dest_path);
+      g_free (dest_path);
+      source = g_file_new_for_uri (cc_appearance_item_get_source_url (item));
+      basename = g_file_get_basename (source);
+      display_name = g_filename_display_name (basename);
+      dest_path = g_file_get_path (dest);
+      g_free (basename);
+
+      /* create a blank image to use until the source image is ready */
+      pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, 1, 1);
+      gdk_pixbuf_fill (pixbuf, 0x00000000);
+      gdk_pixbuf_save (pixbuf, dest_path, "png", NULL, NULL);
+      g_object_unref (pixbuf);
+      g_free (dest_path);
+
+      if (priv->copy_cancellable)
+        {
+          g_cancellable_cancel (priv->copy_cancellable);
+          g_cancellable_reset (priv->copy_cancellable);
+        }
+
+      if (priv->spinner)
+        {
+          gtk_widget_destroy (GTK_WIDGET (priv->spinner));
+          priv->spinner = NULL;
+        }
+
+      /* create a spinner while the file downloads */
+      priv->spinner = gtk_spinner_new ();
+      gtk_spinner_start (GTK_SPINNER (priv->spinner));
+      gtk_box_pack_start (GTK_BOX (WID ("bottom-hbox")), priv->spinner, FALSE,
+                          FALSE, 6);
+      gtk_widget_show (priv->spinner);
+
+      /* reference the panel in case it is removed before the copy is
+       * finished */
+      g_object_ref (panel);
+      g_object_set_data_full (G_OBJECT (source), "item", g_object_ref (item), g_object_unref);
+      g_file_copy_async (source, dest, G_FILE_COPY_OVERWRITE,
+                         G_PRIORITY_DEFAULT, priv->copy_cancellable,
+                         NULL, NULL,
+                         copy_finished_cb, panel);
+      g_object_unref (source);
+      dest_uri = g_file_get_uri (dest);
+      g_object_unref (dest);
+
+      g_settings_set_string (priv->settings, WP_URI_KEY, dest_uri);
+      g_object_set (G_OBJECT (item),
+		    "uri", dest_uri,
+		    "needs-download", FALSE,
+		    "name", display_name,
+		    NULL);
+      g_free (display_name);
+      g_free (dest_uri);
+
+      /* delay the updated drawing of the preview until the copy finishes */
+      draw_preview = FALSE;
+    }
+  else
+    {
+      g_settings_set_string (priv->settings, WP_URI_KEY, uri);
+    }
+
+  /* Also set the placement if we have a URI and the previous value was none */
+  if (flags & CC_APPEARANCE_ITEM_HAS_PLACEMENT)
+    {
+      g_settings_set_enum (priv->settings, WP_OPTIONS_KEY, cc_appearance_item_get_placement (item));
+    }
+  else if (uri != NULL)
+    {
+      GDesktopBackgroundStyle style;
+      style = g_settings_get_enum (priv->settings, WP_OPTIONS_KEY);
+      if (style == G_DESKTOP_BACKGROUND_STYLE_NONE)
+        g_settings_set_enum (priv->settings, WP_OPTIONS_KEY, cc_appearance_item_get_placement (item));
+    }
+
+  if (flags & CC_APPEARANCE_ITEM_HAS_SHADING)
+    g_settings_set_enum (priv->settings, WP_SHADING_KEY, cc_appearance_item_get_shading (item));
+
+  /* When changing to a background with colours set,
+   * don't overwrite what's in GSettings, but read
+   * from it instead.
+   * We have a hack for the colors source though */
+  if (flags & CC_APPEARANCE_ITEM_HAS_PCOLOR &&
+      priv->current_source != SOURCE_COLORS)
+    {
+      g_settings_set_string (priv->settings, WP_PCOLOR_KEY, cc_appearance_item_get_pcolor (item));
+    }
+  else
+    {
+      pcolor = g_settings_get_string (priv->settings, WP_PCOLOR_KEY);
+      g_object_set (G_OBJECT (item), "primary-color", pcolor, NULL);
+    }
+
+  if (flags & CC_APPEARANCE_ITEM_HAS_SCOLOR &&
+      priv->current_source != SOURCE_COLORS)
+    {
+      g_settings_set_string (priv->settings, WP_SCOLOR_KEY, cc_appearance_item_get_scolor (item));
+    }
+  else
+    {
+      scolor = g_settings_get_string (priv->settings, WP_SCOLOR_KEY);
+      g_object_set (G_OBJECT (item), "secondary-color", scolor, NULL);
+    }
+
+  /* Apply all changes */
+  g_settings_apply (priv->settings);
+
+  update_remove_button (panel, item);
+
+  /* update the preview information */
+  if (draw_preview != FALSE)
+    {
+      update_preview (priv, item);
+
+      /* Save the source XML if there is one */
+      filename = get_save_path ();
+      if (create_save_dir ())
+        cc_appearance_xml_save (priv->current_background, filename);
+    }
+}
+
+static gboolean
+preview_draw_cb (GtkWidget         *widget,
+                 cairo_t           *cr,
+                 CcAppearancePanel *panel)
+{
+  GtkAllocation allocation;
+  CcAppearancePanelPrivate *priv = panel->priv;
+  GdkPixbuf *pixbuf = NULL;
+  const gint preview_width = 416;
+  const gint preview_height = 248;
+  const gint preview_x = 45;
+  const gint preview_y = 84;
+  GdkPixbuf *preview, *temp;
+  gint size;
+
+  gtk_widget_get_allocation (widget, &allocation);
+
+  if (priv->current_background)
+    {
+      GIcon *icon;
+      icon = cc_appearance_item_get_frame_thumbnail (priv->current_background,
+                                                     priv->thumb_factory,
+                                                     preview_width,
+                                                     preview_height,
+                                                     -2, TRUE);
+      pixbuf = GDK_PIXBUF (icon);
+    }
+
+  if (!priv->display_base)
+    return FALSE;
+
+
+  preview = gdk_pixbuf_copy (priv->display_base);
+
+  if (pixbuf)
+    {
+      gdk_pixbuf_composite (pixbuf, preview,
+                            preview_x, preview_y,
+                            preview_width, preview_height,
+                            preview_x, preview_y, 1, 1,
+                            GDK_INTERP_BILINEAR, 255);
+
+      g_object_unref (pixbuf);
+    }
+
+
+  if (priv->display_overlay)
+    {
+      gdk_pixbuf_composite (priv->display_overlay, preview,
+                            0, 0, 512, 512,
+                            0, 0, 1, 1,
+                            GDK_INTERP_BILINEAR, 255);
+    }
+
+
+  if (allocation.width < allocation.height)
+    size = allocation.width;
+  else
+    size = allocation.height;
+
+  temp = gdk_pixbuf_scale_simple (preview, size, size, GDK_INTERP_BILINEAR);
+
+  gdk_cairo_set_source_pixbuf (cr,
+                               temp,
+                               allocation.width / 2 - (size / 2),
+                               allocation.height / 2 - (size / 2));
+  cairo_paint (cr);
+
+  g_object_unref (temp);
+  g_object_unref (preview);
+
+  return TRUE;
+}
+
+static void
+style_changed_cb (GtkComboBox       *box,
+                  CcAppearancePanel *panel)
+{
+  CcAppearancePanelPrivate *priv = panel->priv;
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  GDesktopBackgroundStyle value;
+
+  if (!gtk_combo_box_get_active_iter (box, &iter))
+    {
+      return;
+    }
+
+  model = gtk_combo_box_get_model (box);
+
+  gtk_tree_model_get (model, &iter, 1, &value, -1);
+
+  g_settings_set_enum (priv->settings, WP_OPTIONS_KEY, value);
+
+  if (priv->current_background)
+    g_object_set (G_OBJECT (priv->current_background), "placement", value, NULL);
+
+  g_settings_apply (priv->settings);
+
+  update_preview (priv, NULL);
+}
+
+static void
+color_changed_cb (GtkColorButton    *button,
+                  CcAppearancePanel *panel)
+{
+  CcAppearancePanelPrivate *priv = panel->priv;
+  GdkColor color;
+  gchar *value;
+  gboolean is_pcolor = FALSE;
+
+  gtk_color_button_get_color (button, &color);
+  if (WID ("style-pcolor") == GTK_WIDGET (button))
+    is_pcolor = TRUE;
+
+  value = gdk_color_to_string (&color);
+
+  if (priv->current_background)
+    {
+      g_object_set (G_OBJECT (priv->current_background),
+		    is_pcolor ? "primary-color" : "secondary-color", value, NULL);
+    }
+
+  g_settings_set_string (priv->settings,
+			 is_pcolor ? WP_PCOLOR_KEY : WP_SCOLOR_KEY, value);
+
+  g_settings_apply (priv->settings);
+
+  g_free (value);
+
+  update_preview (priv, NULL);
+}
+
+static void
+swap_colors_clicked (GtkButton         *button,
+                     CcAppearancePanel *panel)
+{
+  CcAppearancePanelPrivate *priv = panel->priv;
+  GdkColor pcolor, scolor;
+  char *new_pcolor, *new_scolor;
+
+  gtk_color_button_get_color (GTK_COLOR_BUTTON (WID ("style-pcolor")), &pcolor);
+  gtk_color_button_get_color (GTK_COLOR_BUTTON (WID ("style-scolor")), &scolor);
+
+  gtk_color_button_set_color (GTK_COLOR_BUTTON (WID ("style-scolor")), &pcolor);
+  gtk_color_button_set_color (GTK_COLOR_BUTTON (WID ("style-pcolor")), &scolor);
+
+  new_pcolor = gdk_color_to_string (&scolor);
+  new_scolor = gdk_color_to_string (&pcolor);
+
+  g_object_set (priv->current_background,
+                "primary-color", new_pcolor,
+                "secondary-color", new_scolor,
+                NULL);
+
+  g_settings_set_string (priv->settings, WP_PCOLOR_KEY, new_pcolor);
+  g_settings_set_string (priv->settings, WP_SCOLOR_KEY, new_scolor);
+
+  g_free (new_pcolor);
+  g_free (new_scolor);
+
+  g_settings_apply (priv->settings);
+
+  update_preview (priv, NULL);
+}
+
+static void
+row_inserted (GtkTreeModel      *tree_model,
+	      GtkTreePath       *path,
+	      GtkTreeIter       *iter,
+	      CcAppearancePanel *panel)
+{
+  GtkListStore *store;
+  CcAppearancePanelPrivate *priv;
+
+  priv = panel->priv;
+
+  store = bg_source_get_liststore (BG_SOURCE (panel->priv->pictures_source));
+  g_signal_handlers_disconnect_by_func (G_OBJECT (store), G_CALLBACK (row_inserted), panel);
+
+  /* Change source */
+  gtk_combo_box_set_active (GTK_COMBO_BOX (WID ("sources-combobox")), SOURCE_PICTURES);
+
+  /* And select the newly added item */
+  gtk_icon_view_select_path (GTK_ICON_VIEW (WID ("backgrounds-iconview")), path);
+}
+
+static void
+add_custom_wallpaper (CcAppearancePanel *panel,
+		      const char        *uri)
+{
+  GtkListStore *store;
+
+  store = bg_source_get_liststore (BG_SOURCE (panel->priv->pictures_source));
+  g_signal_connect (G_OBJECT (store), "row-inserted",
+		    G_CALLBACK (row_inserted), panel);
+
+  if (bg_pictures_source_add (panel->priv->pictures_source, uri) == FALSE) {
+    g_signal_handlers_disconnect_by_func (G_OBJECT (store), G_CALLBACK (row_inserted), panel);
+    return;
+  }
+
+  /* Wait for the item to get added */
+}
+
+static void
+file_chooser_response (GtkDialog         *chooser,
+                       gint               response,
+                       CcAppearancePanel *panel)
+{
+  GSList *selected, *l;
+
+  if (response != GTK_RESPONSE_ACCEPT)
+    {
+      gtk_widget_destroy (GTK_WIDGET (chooser));
+      return;
+    }
+
+  selected = gtk_file_chooser_get_uris (GTK_FILE_CHOOSER (chooser));
+  gtk_widget_destroy (GTK_WIDGET (chooser));
+
+  for (l = selected; l != NULL; l = l->next)
+    {
+      char *uri = l->data;
+      add_custom_wallpaper (panel, uri);
+      g_free (uri);
+    }
+  g_slist_free (selected);
+}
+
+static void
+update_chooser_preview (GtkFileChooser    *chooser,
+			CcAppearancePanel *panel)
+{
+  GnomeDesktopThumbnailFactory *thumb_factory;
+  char *uri;
+
+  thumb_factory = panel->priv->thumb_factory;
+
+  uri = gtk_file_chooser_get_preview_uri (chooser);
+
+  if (uri)
+    {
+      GdkPixbuf *pixbuf = NULL;
+      const gchar *mime_type = NULL;
+      GFile *file;
+      GFileInfo *file_info;
+      GtkWidget *preview;
+
+      preview = gtk_file_chooser_get_preview_widget (chooser);
+
+      file = g_file_new_for_uri (uri);
+      file_info = g_file_query_info (file,
+				     G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE,
+				     G_FILE_QUERY_INFO_NONE,
+				     NULL, NULL);
+      g_object_unref (file);
+
+      if (file_info != NULL) {
+	      mime_type = g_file_info_get_content_type (file_info);
+	      g_object_unref (file_info);
+      }
+
+      if (mime_type)
+        {
+        pixbuf = gnome_desktop_thumbnail_factory_generate_thumbnail (thumb_factory,
+								     uri,
+								     mime_type);
+	}
+
+      gtk_dialog_set_response_sensitive (GTK_DIALOG (chooser),
+					 GTK_RESPONSE_ACCEPT,
+					 (pixbuf != NULL));
+
+      if (pixbuf != NULL)
+        {
+          gtk_image_set_from_pixbuf (GTK_IMAGE (preview), pixbuf);
+	  g_object_unref (pixbuf);
+	}
+      else
+        {
+          gtk_image_set_from_stock (GTK_IMAGE (preview),
+				    GTK_STOCK_DIALOG_QUESTION,
+				    GTK_ICON_SIZE_DIALOG);
+	}
+
+      if (bg_pictures_source_is_known (panel->priv->pictures_source, uri))
+        gtk_dialog_set_response_sensitive (GTK_DIALOG (chooser), GTK_RESPONSE_ACCEPT, FALSE);
+      else
+        gtk_dialog_set_response_sensitive (GTK_DIALOG (chooser), GTK_RESPONSE_ACCEPT, TRUE);
+
+      g_free (uri);
+    }
+
+  gtk_file_chooser_set_preview_widget_active (chooser, TRUE);
+}
+
+static void
+add_button_clicked (GtkButton         *button,
+		    CcAppearancePanel *panel)
+{
+  GtkWidget *chooser;
+  const gchar *folder;
+  GtkWidget *preview;
+  GtkFileFilter *filter;
+  CcAppearancePanelPrivate *priv;
+
+  priv = panel->priv;
+
+  filter = gtk_file_filter_new ();
+  gtk_file_filter_add_mime_type (filter, "image/*");
+
+  chooser = gtk_file_chooser_dialog_new (_("Browse for more pictures"),
+					 GTK_WINDOW (gtk_widget_get_toplevel (WID ("appearance-panel"))),
+					 GTK_FILE_CHOOSER_ACTION_OPEN,
+					 GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
+					 GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
+					 NULL);
+  gtk_file_chooser_set_filter (GTK_FILE_CHOOSER (chooser), filter);
+  gtk_file_chooser_set_select_multiple (GTK_FILE_CHOOSER (chooser), TRUE);
+
+  gtk_window_set_modal (GTK_WINDOW (chooser), TRUE);
+
+  preview = gtk_image_new ();
+  gtk_widget_set_size_request (preview, 128, -1);
+  gtk_file_chooser_set_preview_widget (GTK_FILE_CHOOSER (chooser), preview);
+  gtk_file_chooser_set_use_preview_label (GTK_FILE_CHOOSER (chooser), FALSE);
+  gtk_widget_show (preview);
+  g_signal_connect (chooser, "update-preview",
+		    G_CALLBACK (update_chooser_preview), panel);
+
+  folder = g_get_user_special_dir (G_USER_DIRECTORY_PICTURES);
+  if (folder)
+    gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (chooser),
+					 folder);
+
+  g_signal_connect (chooser, "response",
+		    G_CALLBACK (file_chooser_response), panel);
+
+  gtk_window_present (GTK_WINDOW (chooser));
+}
+
+static void
+remove_button_clicked (GtkButton         *button,
+		       CcAppearancePanel *panel)
+{
+  CcAppearanceItem *item;
+  GtkListStore *store;
+  GtkTreePath *path;
+  CcAppearancePanelPrivate *priv;
+
+  priv = panel->priv;
+
+  item = get_selected_item (panel);
+  if (item == NULL)
+    g_assert_not_reached ();
+
+  bg_pictures_source_remove (panel->priv->pictures_source, item);
+  g_object_unref (item);
+
+  /* Are there any items left in the pictures tree store? */
+  store = bg_source_get_liststore (BG_SOURCE (panel->priv->pictures_source));
+  if (gtk_tree_model_iter_n_children (GTK_TREE_MODEL (store), NULL) == 0)
+    gtk_combo_box_set_active (GTK_COMBO_BOX (WID ("sources-combobox")), SOURCE_WALLPAPERS);
+
+  path = gtk_tree_path_new_from_string ("0");
+  gtk_icon_view_select_path (GTK_ICON_VIEW (WID ("backgrounds-iconview")), path);
+  gtk_tree_path_free (path);
+}
+
+static void
+load_current_bg (CcAppearancePanel *self)
+{
+  CcAppearancePanelPrivate *priv;
+  CcAppearanceItem *saved, *configured;
+  gchar *uri, *pcolor, *scolor;
+
+  priv = self->priv;
+
+  /* Load the saved configuration */
+  uri = get_save_path ();
+  saved = cc_appearance_xml_get_item (uri);
+  g_free (uri);
+
+  /* initalise the current background information from settings */
+  uri = g_settings_get_string (priv->settings, WP_URI_KEY);
+  if (uri && *uri == '\0')
+    {
+      g_free (uri);
+      uri = NULL;
+    }
+  else
+    {
+      GFile *file;
+
+      file = g_file_new_for_commandline_arg (uri);
+      g_object_unref (file);
+    }
+  configured = cc_appearance_item_new (uri);
+  g_free (uri);
+
+  pcolor = g_settings_get_string (priv->settings, WP_PCOLOR_KEY);
+  scolor = g_settings_get_string (priv->settings, WP_SCOLOR_KEY);
+  g_object_set (G_OBJECT (configured),
+		"name", _("Current background"),
+		"placement", g_settings_get_enum (priv->settings, WP_OPTIONS_KEY),
+		"shading", g_settings_get_enum (priv->settings, WP_SHADING_KEY),
+		"primary-color", pcolor,
+		"secondary-color", scolor,
+		NULL);
+  g_free (pcolor);
+  g_free (scolor);
+
+  if (saved != NULL && cc_appearance_item_compare (saved, configured))
+    {
+      CcAppearanceItemFlags flags;
+      flags = cc_appearance_item_get_flags (saved);
+      /* Special case for colours */
+      if (cc_appearance_item_get_placement (saved) == G_DESKTOP_BACKGROUND_STYLE_NONE)
+        flags &=~ (CC_APPEARANCE_ITEM_HAS_PCOLOR | CC_APPEARANCE_ITEM_HAS_SCOLOR);
+      g_object_set (G_OBJECT (configured),
+		    "name", cc_appearance_item_get_name (saved),
+		    "flags", flags,
+		    "source-url", cc_appearance_item_get_source_url (saved),
+		    "source-xml", cc_appearance_item_get_source_xml (saved),
+		    NULL);
+    }
+  if (saved != NULL)
+    g_object_unref (saved);
+
+  priv->current_background = configured;
+  cc_appearance_item_load (priv->current_background, NULL);
+}
+
+static void
+scrolled_realize_cb (GtkWidget         *scrolled,
+                     CcAppearancePanel *self)
+{
+  /* FIXME, hack for https://bugzilla.gnome.org/show_bug.cgi?id=645649 */
+  GdkScreen *screen;
+  GdkRectangle rect;
+  int monitor;
+
+  screen = gtk_widget_get_screen (scrolled);
+  monitor = gdk_screen_get_monitor_at_window (screen, gtk_widget_get_window (scrolled));
+  gdk_screen_get_monitor_geometry (screen, monitor, &rect);
+  if (rect.height <= 768)
+    g_object_set (G_OBJECT (scrolled), "height-request", 280, NULL);
+}
+
+static void
+cc_appearance_panel_drag_uris (GtkWidget *widget,
+			       GdkDragContext *context, gint x, gint y,
+			       GtkSelectionData *data, guint info, guint time,
+			       CcAppearancePanel *panel)
+{
+  gint i;
+  char *uri;
+  gchar **uris;
+
+  uris = gtk_selection_data_get_uris (data);
+  if (!uris)
+    return;
+
+  gtk_drag_finish (context, TRUE, FALSE, time);
+
+  for (i = 0; uris[i] != NULL; i++) {
+    uri = uris[i];
+    if (!bg_pictures_source_is_known (panel->priv->pictures_source, uri)) {
+      add_custom_wallpaper (panel, uri);
+    }
+  }
+
+  g_strfreev(uris);
+}
+
+static gchar *themes_id[] = { "Adwaita", "Ambiance", "Radiance", "HighContrast" };
+static gchar *themes_name[] = { "Adwaita", "Ambiance", "Radiance", "High Contrast" };
+
+static gboolean
+get_theme_data (const gchar *theme_name,
+		gchar **gtk_theme,
+		gchar **icon_theme,
+		gchar **window_theme,
+		gchar **cursor_theme)
+{
+  gchar *path;
+  GKeyFile *theme_file;
+  GError *error = NULL;
+  gboolean result = FALSE;
+
+  *gtk_theme = *icon_theme = *window_theme = *cursor_theme = NULL;
+
+  theme_file = g_key_file_new ();
+  path = g_build_filename ("/usr/share/themes", theme_name, "index.theme", NULL);
+  if (g_key_file_load_from_file (theme_file, path, G_KEY_FILE_NONE, &error))
+    {
+      *gtk_theme = g_key_file_get_string (theme_file, "X-GNOME-Metatheme", "GtkTheme", NULL);
+      *icon_theme = g_key_file_get_string (theme_file, "X-GNOME-Metatheme", "IconTheme", NULL);
+      *window_theme = g_key_file_get_string (theme_file, "X-GNOME-Metatheme", "MetacityTheme", NULL);
+      *cursor_theme = g_key_file_get_string (theme_file, "X-GNOME-Metatheme", "CursorTheme", NULL);
+
+      result = TRUE;
+    }
+  else
+    {
+      g_warning ("Could not load %s: %s", path, error->message);
+      g_error_free (error);
+    }
+
+  g_key_file_free (theme_file);
+  g_free (path);
+
+  return result;
+}
+
+static void
+theme_selection_changed (GtkComboBox *combo, CcAppearancePanel *self)
+{
+  gint active;
+  gchar *gtk_theme, *icon_theme, *window_theme, *cursor_theme;
+
+  active = gtk_combo_box_get_active (combo);
+  g_return_if_fail (active >= 0 && active < G_N_ELEMENTS (themes_id));
+
+  if (!get_theme_data (gtk_combo_box_get_active_id (combo),
+                       &gtk_theme, &icon_theme, &window_theme, &cursor_theme))
+    return;
+
+  g_settings_delay (self->priv->interface_settings);
+
+  if (self->priv->canonical_interface_settings != NULL)
+    g_settings_delay (self->priv->canonical_interface_settings);
+
+  g_settings_set_string (self->priv->interface_settings, "gtk-theme", gtk_theme);
+  g_settings_set_string (self->priv->interface_settings, "icon-theme", icon_theme);
+  g_settings_set_string (self->priv->interface_settings, "cursor-theme", cursor_theme);
+  g_settings_set_string (self->priv->wm_theme_settings, "theme", window_theme);
+
+
+  /* disable overlay scrollbars for a11y if installed*/
+  if (self->priv->canonical_interface_settings)
+    {
+      if (g_strcmp0 (gtk_theme, "HighContrast") == 0 )
+        g_settings_set_string (self->priv->canonical_interface_settings, "scrollbar-mode", "normal");
+      else
+        g_settings_reset (self->priv->canonical_interface_settings, "scrollbar-mode");
+      g_settings_apply (self->priv->canonical_interface_settings);
+    }
+
+  g_settings_apply (self->priv->interface_settings);
+
+  g_free (gtk_theme);
+  g_free (icon_theme);
+  g_free (window_theme);
+  g_free (cursor_theme);
+}
+
+static void
+setup_theme_selector (CcAppearancePanel *self)
+{
+  gchar *current_gtk_theme;
+  gchar *default_gtk_theme;
+  gint i, current_theme_index = 0;
+  GtkWidget *widget;
+  GtkWidget *liststore;
+  GSettingsSchemaSource *source;
+  CcAppearancePanelPrivate *priv = self->priv;
+  GSettings *defaults_settings = g_settings_new ("org.gnome.desktop.interface");
+
+  priv->interface_settings = g_settings_new ("org.gnome.desktop.interface");
+
+  source = g_settings_schema_source_get_default ();
+  if (source != NULL && g_settings_schema_source_lookup (source, CANONICAL_DESKTOP_INTERFACE, TRUE) != NULL)
+    priv->canonical_interface_settings = g_settings_new (CANONICAL_DESKTOP_INTERFACE);
+
+  priv->wm_theme_settings = g_settings_new ("org.gnome.desktop.wm.preferences");
+  current_gtk_theme = g_settings_get_string (priv->interface_settings, "gtk-theme");
+
+  /* gettint the default for the theme */
+  g_settings_delay (defaults_settings);
+  g_settings_reset (defaults_settings, "gtk-theme");
+  default_gtk_theme = g_settings_get_string (defaults_settings, "gtk-theme");
+  g_object_unref (defaults_settings);
+
+  widget = WID ("theme-selector");
+  liststore = WID ("theme-list-store");
+
+  for (i = 0; i < G_N_ELEMENTS (themes_id); i++, current_theme_index++)
+    {
+      gchar *gtk_theme, *icon_theme, *window_theme, *cursor_theme, *new_theme_name;
+      GtkTreeIter iter;
+
+      if (!get_theme_data (themes_id[i], &gtk_theme, &icon_theme, &window_theme, &cursor_theme))
+        {
+          current_theme_index--;
+          continue;
+        }
+
+      if (g_strcmp0 (gtk_theme, default_gtk_theme) == 0)
+        new_theme_name = g_strdup_printf ("%s <small><i>(%s)</i></small>", themes_name[i], _("default"));
+      else
+        new_theme_name = g_strdup (themes_name[i]);
+
+      gtk_list_store_append (GTK_LIST_STORE (liststore), &iter);
+      gtk_list_store_set (GTK_LIST_STORE (liststore), &iter, 0, themes_id[i], 1, new_theme_name, -1);
+
+      if (g_strcmp0 (gtk_theme, current_gtk_theme) == 0)
+	  /* This is the current theme, so select item in the combo box */
+         gtk_combo_box_set_active (GTK_COMBO_BOX (widget), current_theme_index);
+
+      g_free (gtk_theme);
+      g_free (new_theme_name);
+      g_free (icon_theme);
+      g_free (window_theme);
+      g_free (cursor_theme);
+    }
+    g_free (current_gtk_theme);
+    g_free (default_gtk_theme);
+
+    g_signal_connect (G_OBJECT (widget), "changed",
+		      G_CALLBACK (theme_selection_changed), self);
+}
+
+static void
+iconsize_widget_refresh (GtkAdjustment *iconsize_adj, GSettings *unity_settings)
+{
+  gint value = g_settings_get_int (unity_settings, UNITY_ICONSIZE_KEY);
+  gtk_adjustment_set_value (iconsize_adj, (gdouble)value);
+}
+
+static void
+ext_iconsize_changed_callback (GSettings* settings,
+                               guint key,
+                               gpointer user_data)
+{
+  iconsize_widget_refresh (GTK_ADJUSTMENT (user_data), settings);
+}
+
+static void
+on_iconsize_changed (GtkAdjustment *adj, GSettings *unity_settings)
+{
+  g_settings_set_int (unity_settings, UNITY_ICONSIZE_KEY, (gint)gtk_adjustment_get_value (adj));
+}
+
+static void
+refresh_was_modified_by_external_tool (CcAppearancePanel *self)
+{
+  CcAppearancePanelPrivate *priv = self->priv;
+  gboolean modified_ext_tool = FALSE;
+
+  // reveal side
+  modified_ext_tool = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (WID ("unity_reveal_spot_otheroption")));
+
+  // autohide mode
+  if (!modified_ext_tool && (!gtk_widget_get_sensitive (WID ("unity_launcher_autohide"))))
+    modified_ext_tool = TRUE;
+
+  gtk_widget_set_visible (WID ("unity-label-external-tool"), modified_ext_tool);
+}
+
+static void
+hidelauncher_set_sensitivity_reveal (CcAppearancePanel *self, gboolean autohide)
+{
+  CcAppearancePanelPrivate *priv = self->priv;
+  gtk_widget_set_sensitive (WID ("unity_reveal_label"), autohide);
+  gtk_widget_set_sensitive (WID ("unity_reveal_spot_topleft"), autohide);
+  gtk_widget_set_sensitive (WID ("unity_reveal_spot_left"), autohide);
+  gtk_widget_set_sensitive (WID ("unity-launcher-sensitivity"), autohide);
+  gtk_widget_set_sensitive (WID ("unity-launcher-sensitivity-label"), autohide);
+  gtk_widget_set_sensitive (WID ("unity-launcher-sensitivity-low-label"), autohide);
+  gtk_widget_set_sensitive (WID ("unity-launcher-sensitivity-high-label"), autohide);
+  gtk_widget_set_sensitive (WID ("unity-launcher-sensitivity-high-label"), autohide);
+}
+
+static void
+hidelauncher_widget_refresh (CcAppearancePanel *self)
+{
+  CcAppearancePanelPrivate *priv = self->priv;
+  gint value = g_settings_get_int (priv->unity_settings, UNITY_LAUNCHERHIDE_KEY);
+  gboolean autohide = (value != 0);
+
+  // handle not supported value
+  if (value != 0 && value != 1)
+    {
+      gtk_widget_set_sensitive (WID ("unity_launcher_autohide"), FALSE);
+    }
+  else
+    {
+      gtk_widget_set_sensitive (WID ("unity_launcher_autohide"), TRUE);
+      gtk_switch_set_active (GTK_SWITCH (WID ("unity_launcher_autohide")), autohide);
+    }
+
+  hidelauncher_set_sensitivity_reveal (self, autohide);
+  refresh_was_modified_by_external_tool (self);
+}
+
+static void
+ext_hidelauncher_changed_callback (GSettings* settings,
+                                   guint key,
+                                   gpointer user_data)
+{
+  hidelauncher_widget_refresh (CC_APPEARANCE_PANEL (user_data));
+}
+
+static void
+on_hidelauncher_changed (GtkSwitch *switcher, gboolean enabled, gpointer user_data)
+{
+  gint value = 0;
+  CcAppearancePanel *self = CC_APPEARANCE_PANEL (user_data);
+
+  gint unity_value = g_settings_get_int (self->priv->unity_settings, UNITY_LAUNCHERHIDE_KEY);
+  gboolean unity_autohide_enabled;
+
+  unity_autohide_enabled = (unity_value != 0);
+  if (gtk_switch_get_active (switcher))
+    {
+      /* change value to "active" if activation isn't due to gsettings switching to any value */
+      if (unity_autohide_enabled)
+        return;
+      value = 1;
+    }
+
+  /* 3d */
+  g_settings_set_int (self->priv->unity_settings, UNITY_LAUNCHERHIDE_KEY, value);
+  hidelauncher_set_sensitivity_reveal (self, (value != -1));
+}
+
+static void
+reveallauncher_widget_refresh (CcAppearancePanel *self)
+{
+  CcAppearancePanelPrivate *priv = self->priv;
+  gint value = g_settings_get_int (priv->unity_settings, UNITY_LAUNCHERREVEAL_KEY);
+
+  if (value == 1)
+    gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (WID ("unity_reveal_spot_topleft")), TRUE);
+  else if (value == 0)
+    gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (WID ("unity_reveal_spot_left")), TRUE);
+  else
+    /* this is a hidden spot when another option is selected (through ccsm) */
+    gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (WID ("unity_reveal_spot_otheroption")), TRUE);
+
+  refresh_was_modified_by_external_tool (self);
+}
+
+static void
+ext_reveallauncher_changed_callback (GSettings* settings,
+                                     guint key,
+                                     gpointer user_data)
+{
+  reveallauncher_widget_refresh (CC_APPEARANCE_PANEL (user_data));
+}
+
+static void
+on_reveallauncher_changed (GtkToggleButton *button, gpointer user_data)
+{
+  CcAppearancePanel *self = CC_APPEARANCE_PANEL (user_data);
+  CcAppearancePanelPrivate *priv = self->priv;
+  gint reveal_spot = 0;
+
+  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (WID ("unity_reveal_spot_topleft"))))
+    reveal_spot = 1;
+  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (WID ("unity_reveal_spot_left"))))
+    reveal_spot = 0;
+
+  g_settings_set_int (priv->unity_settings, UNITY_LAUNCHERREVEAL_KEY, reveal_spot);
+  reveallauncher_widget_refresh (self);
+}
+
+static void
+launcher_sensitivity_widget_refresh (GtkAdjustment *launcher_sensitivity_adj, GSettings *unity_settings)
+{
+  gdouble value = g_settings_get_double (unity_settings, UNITY_LAUNCHERSENSITIVITY_KEY);
+  gtk_adjustment_set_value (launcher_sensitivity_adj, (gdouble)value);
+}
+
+static void
+ext_launchersensitivity_changed_callback (GSettings* settings,
+                                          guint key,
+                                          gpointer user_data)
+{
+  launcher_sensitivity_widget_refresh (GTK_ADJUSTMENT (user_data), settings);
+}
+
+static void
+on_launchersensitivity_changed (GtkAdjustment *adj, gpointer user_data)
+{
+  CcAppearancePanel *self = CC_APPEARANCE_PANEL (user_data);
+  CcAppearancePanelPrivate *priv = self->priv;
+  gdouble value = gtk_adjustment_get_value (adj);
+
+  g_settings_set_double (priv->unity_settings, UNITY_LAUNCHERSENSITIVITY_KEY, value);
+}
+
+static void
+on_restore_defaults_page2_clicked (GtkButton *button, gpointer user_data)
+{
+  CcAppearancePanel *self = CC_APPEARANCE_PANEL (user_data);
+  CcAppearancePanelPrivate *priv = self->priv;
+
+  /* reset defaut for the profile and get the default */
+  g_settings_reset (priv->unity_settings, UNITY_LAUNCHERHIDE_KEY);
+  g_settings_reset (priv->unity_settings, UNITY_LAUNCHERSENSITIVITY_KEY);
+  g_settings_reset (priv->unity_settings, UNITY_LAUNCHERREVEAL_KEY);
+
+}
+
+/* <hacks> */
+
+/* Get scrolling in the right direction */
+static gboolean
+on_scale_scroll_event (GtkWidget      *widget,
+                       GdkEventScroll *event,
+                       gpointer *data)
+{
+  gdouble value;
+  GtkAdjustment *adj = gtk_range_get_adjustment (GTK_RANGE (widget));
+  MinMax *iconsize_values = (MinMax *) data;
+  gdouble delta = iconsize_values->max - iconsize_values->min;
+
+  value = gtk_adjustment_get_value (adj);
+
+  if ((event->direction == GDK_SCROLL_UP) ||
+     (event->direction == GDK_SCROLL_SMOOTH && event->delta_y < 0))
+    {
+      if (value + delta/8 > iconsize_values->max)
+        value = iconsize_values->max;
+      else
+        value = value + delta/8;
+      gtk_adjustment_set_value (adj, value);
+    }
+  else if ((event->direction == GDK_SCROLL_DOWN) ||
+           (event->direction == GDK_SCROLL_SMOOTH && event->delta_y > 0))
+    {
+      if (value - delta/8 < iconsize_values->min)
+        value = iconsize_values->min;
+      else
+        value = value - delta/8;
+      gtk_adjustment_set_value (adj, value);
+    }
+
+  return TRUE;
+}
+
+/* </hacks> */
+
+static void
+setup_unity_settings (CcAppearancePanel *self)
+{
+  CcAppearancePanelPrivate *priv = self->priv;
+  GtkAdjustment* iconsize_adj;
+  GtkAdjustment* launcher_sensitivity_adj;
+  GtkScale* iconsize_scale;
+  GtkScale* launcher_sensitivity_scale;
+  const gchar * const *schemas;
+
+  schemas = g_settings_list_schemas ();
+  while (*schemas != NULL)
+    {
+      schemas++;
+    }
+  schemas = g_settings_list_relocatable_schemas ();
+  while (*schemas != NULL)
+    {
+      if (g_strcmp0 (*schemas, UNITY_GSETTINGS_SCHEMA) == 0)
+        {
+          priv->unity_settings = g_settings_new_with_path (UNITY_GSETTINGS_SCHEMA, UNITY_GSETTINGS_PATH);
+          break;
+        }
+      schemas++;
+    }
+
+  if (!self->priv->unity_settings)
+    return;
+
+  /* Icon size change */
+  iconsize_values.min = MIN_ICONSIZE;
+  iconsize_values.max = MAX_ICONSIZE;
+  iconsize_adj = gtk_adjustment_new (48, iconsize_values.min, iconsize_values.max, 1, 5, 0);
+  iconsize_scale = GTK_SCALE (WID ("unity-iconsize-scale"));
+  gtk_range_set_adjustment (GTK_RANGE (iconsize_scale), iconsize_adj);
+  gtk_scale_add_mark (iconsize_scale, 48, GTK_POS_BOTTOM, NULL);
+  g_signal_connect (priv->unity_settings, "changed::" UNITY_ICONSIZE_KEY,
+                    G_CALLBACK (ext_iconsize_changed_callback), iconsize_adj);
+
+  g_signal_connect (iconsize_adj, "value_changed",
+                    G_CALLBACK (on_iconsize_changed), priv->unity_settings);
+  g_signal_connect (G_OBJECT (iconsize_scale), "scroll-event",
+                    G_CALLBACK (on_scale_scroll_event), &iconsize_values);
+  iconsize_widget_refresh (iconsize_adj, priv->unity_settings);
+
+  /* Reveal spot setting */
+  g_signal_connect (priv->unity_settings, "changed::" UNITY_LAUNCHERREVEAL_KEY,
+                    G_CALLBACK (ext_reveallauncher_changed_callback), self);
+  g_signal_connect (WID ("unity_reveal_spot_topleft"), "toggled",
+                     G_CALLBACK (on_reveallauncher_changed), self);
+  g_signal_connect (WID ("unity_reveal_spot_left"), "toggled",
+                     G_CALLBACK (on_reveallauncher_changed), self);
+  reveallauncher_widget_refresh (self);
+
+  /* Launcher reveal */
+  launchersensitivity_values.min = MIN_LAUNCHER_SENSIVITY;
+  launchersensitivity_values.max = MAX_LAUNCHER_SENSIVITY;
+  launcher_sensitivity_adj = gtk_adjustment_new (2, launchersensitivity_values.min, launchersensitivity_values.max, 0.1, 1, 0);
+  launcher_sensitivity_scale = GTK_SCALE (WID ("unity-launcher-sensitivity"));
+  gtk_range_set_adjustment (GTK_RANGE (launcher_sensitivity_scale), launcher_sensitivity_adj);
+  gtk_scale_add_mark (launcher_sensitivity_scale, 2, GTK_POS_BOTTOM, NULL);
+  g_signal_connect (priv->unity_settings, "changed::" UNITY_LAUNCHERSENSITIVITY_KEY,
+                    G_CALLBACK (ext_launchersensitivity_changed_callback), launcher_sensitivity_adj);
+  g_signal_connect (launcher_sensitivity_adj, "value_changed",
+                    G_CALLBACK (on_launchersensitivity_changed), self);
+  g_signal_connect (G_OBJECT (launcher_sensitivity_scale), "scroll-event",
+                    G_CALLBACK (on_scale_scroll_event), &launchersensitivity_values);
+  launcher_sensitivity_widget_refresh (launcher_sensitivity_adj, priv->unity_settings);
+
+  /* Autohide launcher setting */
+  g_signal_connect (priv->unity_settings, "changed::" UNITY_LAUNCHERHIDE_KEY,
+                    G_CALLBACK (ext_hidelauncher_changed_callback), self);
+  g_signal_connect (WID ("unity_launcher_autohide"), "notify::active",
+                    G_CALLBACK (on_hidelauncher_changed), self);
+  hidelauncher_widget_refresh (self);
+
+  /* Restore defaut on second page */
+  g_signal_connect (WID ("button-restore-unitybehavior"), "clicked",
+                    G_CALLBACK (on_restore_defaults_page2_clicked), self);
+}
+
+static void
+cc_appearance_panel_init (CcAppearancePanel *self)
+{
+  CcAppearancePanelPrivate *priv;
+  gchar *objects_unity[] = { "style-liststore",
+      "sources-liststore", "theme-list-store", "main-notebook", "sizegroup", NULL };
+  GError *err = NULL;
+  GtkWidget *widget;
+  GtkListStore *store;
+  GtkStyleContext *context;
+
+  priv = self->priv = APPEARANCE_PANEL_PRIVATE (self);
+
+  priv->builder = gtk_builder_new ();
+
+  gtk_builder_add_objects_from_file (priv->builder,
+                                       DATADIR"/appearance.ui",
+                                       objects_unity, &err);
+
+  if (err)
+    {
+      g_warning ("Could not load ui: %s", err->message);
+      g_error_free (err);
+      return;
+    }
+
+  /* See shell_notify_cb for details */
+  g_signal_connect (WID ("scrolledwindow1"), "realize",
+                    G_CALLBACK (scrolled_realize_cb), self);
+
+  priv->settings = g_settings_new (WP_PATH_ID);
+  g_settings_delay (priv->settings);
+
+  store = (GtkListStore*) gtk_builder_get_object (priv->builder,
+                                                  "sources-liststore");
+
+  priv->wallpapers_source = bg_wallpapers_source_new ();
+  gtk_list_store_insert_with_values (store, NULL, G_MAXINT,
+                                     COL_SOURCE_NAME, _("Wallpapers"),
+                                     COL_SOURCE_TYPE, SOURCE_WALLPAPERS,
+                                     COL_SOURCE, priv->wallpapers_source,
+                                     -1);
+
+  priv->pictures_source = bg_pictures_source_new ();
+  gtk_list_store_insert_with_values (store, NULL, G_MAXINT,
+                                     COL_SOURCE_NAME, _("Pictures Folder"),
+                                     COL_SOURCE_TYPE, SOURCE_PICTURES,
+                                     COL_SOURCE, priv->pictures_source,
+                                     -1);
+
+  priv->colors_source = bg_colors_source_new ();
+  gtk_list_store_insert_with_values (store, NULL, G_MAXINT,
+                                     COL_SOURCE_NAME, _("Colors & Gradients"),
+                                     COL_SOURCE_TYPE, SOURCE_COLORS,
+                                     COL_SOURCE, priv->colors_source,
+                                     -1);
+
+#ifdef HAVE_LIBSOCIALWEB
+  priv->flickr_source = bg_flickr_source_new ();
+  gtk_list_store_insert_with_values (store, NULL, G_MAXINT,
+                                     COL_SOURCE_NAME, _("Flickr"),
+                                     COL_SOURCE_TYPE, SOURCE_FLICKR,
+                                     COL_SOURCE, priv->flickr_source,
+                                     -1);
+#endif
+
+
+  /* add the top level widget */
+  widget = WID ("main-notebook");
+
+  gtk_container_add (GTK_CONTAINER (self), widget);
+  gtk_widget_show_all (GTK_WIDGET (self));
+
+  /* connect to source change signal */
+  widget = WID ("sources-combobox");
+  g_signal_connect (widget, "changed", G_CALLBACK (source_changed_cb), priv);
+
+  /* select first item */
+  gtk_combo_box_set_active (GTK_COMBO_BOX (widget), 0);
+
+  /* connect to the background iconview change signal */
+  widget = WID ("backgrounds-iconview");
+  g_signal_connect (widget, "selection-changed",
+                    G_CALLBACK (backgrounds_changed_cb),
+                    self);
+
+  /* Join treeview and buttons */
+  widget = WID ("scrolledwindow1");
+  context = gtk_widget_get_style_context (widget);
+  gtk_style_context_set_junction_sides (context, GTK_JUNCTION_BOTTOM);
+  widget = WID ("toolbar1");
+  context = gtk_widget_get_style_context (widget);
+  gtk_style_context_set_junction_sides (context, GTK_JUNCTION_TOP);
+
+  g_signal_connect (WID ("add_button"), "clicked",
+		    G_CALLBACK (add_button_clicked), self);
+  g_signal_connect (WID ("remove_button"), "clicked",
+		    G_CALLBACK (remove_button_clicked), self);
+
+  /* Add drag and drop support for bg images */
+  widget = WID ("scrolledwindow1");
+  gtk_drag_dest_set (widget, GTK_DEST_DEFAULT_ALL, NULL, 0, GDK_ACTION_COPY);
+  gtk_drag_dest_add_uri_targets (widget);
+  g_signal_connect (widget, "drag-data-received",
+		    G_CALLBACK (cc_appearance_panel_drag_uris), self);
+
+
+  /* setup preview area */
+  gtk_label_set_ellipsize (GTK_LABEL (WID ("background-label")), PANGO_ELLIPSIZE_END);
+  widget = WID ("preview-area");
+  g_signal_connect (widget, "draw", G_CALLBACK (preview_draw_cb),
+                    self);
+
+/* TODO: We're not including these images yet.
+  priv->display_base = gdk_pixbuf_new_from_file (DATADIR "/display-base.png",
+                                                 NULL);
+  priv->display_overlay = gdk_pixbuf_new_from_file (DATADIR
+                                                    "/display-overlay.png",
+                                                    NULL);
+*/
+
+  g_signal_connect (WID ("style-combobox"), "changed",
+                    G_CALLBACK (style_changed_cb), self);
+
+  g_signal_connect (WID ("style-pcolor"), "color-set",
+                    G_CALLBACK (color_changed_cb), self);
+  g_signal_connect (WID ("style-scolor"), "color-set",
+                    G_CALLBACK (color_changed_cb), self);
+  g_signal_connect (WID ("swap-color-button"), "clicked",
+                    G_CALLBACK (swap_colors_clicked), self);
+
+  priv->copy_cancellable = g_cancellable_new ();
+
+  priv->thumb_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_NORMAL);
+
+  load_current_bg (self);
+
+  update_preview (priv, NULL);
+
+  /* Setup the edit box with our current settings */
+  source_update_edit_box (priv, TRUE);
+
+  /* Setup theme selector */
+  setup_theme_selector (self);
+
+  /* Setup unity settings */
+  setup_unity_settings (self);
+}
+
+void
+cc_appearance_panel_register (GIOModule *module)
+{
+  cc_appearance_panel_register_type (G_TYPE_MODULE (module));
+  g_io_extension_point_implement (CC_SHELL_PANEL_EXTENSION_POINT,
+                                  CC_TYPE_APPEARANCE_PANEL,
+                                  "background", 0);
+}
+
Index: gnome-control-center-3.6.2/panels/appearance/cc-appearance-panel.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/cc-appearance-panel.h	2012-11-01 23:12:51.337697489 -0400
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Author: Thomas Wood <thomas.wood@intel.com>
+ *
+ */
+
+
+#ifndef _CC_APPEARANCE_PANEL_H
+#define _CC_APPEARANCE_PANEL_H
+
+#include <shell/cc-panel.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_APPEARANCE_PANEL cc_appearance_panel_get_type()
+
+#define CC_APPEARANCE_PANEL(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+  CC_TYPE_APPEARANCE_PANEL, CcAppearancePanel))
+
+#define CC_APPEARANCE_PANEL_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), \
+  CC_TYPE_APPEARANCE_PANEL, CcAppearancePanelClass))
+
+#define CC_IS_APPEARANCE_PANEL(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
+  CC_TYPE_APPEARANCE_PANEL))
+
+#define CC_IS_APPEARANCE_PANEL_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
+  CC_TYPE_APPEARANCE_PANEL))
+
+#define CC_APPEARANCE_PANEL_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
+  CC_TYPE_APPEARANCE_PANEL, CcAppearancePanelClass))
+
+typedef struct _CcAppearancePanel CcAppearancePanel;
+typedef struct _CcAppearancePanelClass CcAppearancePanelClass;
+typedef struct _CcAppearancePanelPrivate CcAppearancePanelPrivate;
+
+struct _CcAppearancePanel
+{
+  CcPanel parent;
+
+  CcAppearancePanelPrivate *priv;
+};
+
+struct _CcAppearancePanelClass
+{
+  CcPanelClass parent_class;
+};
+
+GType cc_appearance_panel_get_type (void) G_GNUC_CONST;
+
+void  cc_appearance_panel_register (GIOModule *module);
+
+G_END_DECLS
+
+#endif /* _CC_APPEARANCE_PANEL_H */
Index: gnome-control-center-3.6.2/panels/appearance/cc-appearance-xml.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/cc-appearance-xml.c	2012-11-01 23:12:51.337697489 -0400
@@ -0,0 +1,673 @@
+/*
+ *  Authors: Rodney Dawes <dobey@ximian.com>
+ *  Bastien Nocera <hadess@hadess.net>
+ *
+ *  Copyright 2003-2006 Novell, Inc. (www.novell.com)
+ *  Copyright 2011 Red Hat Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License
+ *  as published by the Free Software Foundation
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Street #330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include <gio/gio.h>
+#include <string.h>
+#include <libxml/parser.h>
+#include <libgnome-desktop/gnome-bg.h>
+#include <gdesktop-enums.h>
+
+#include "gdesktop-enums-types.h"
+#include "cc-appearance-item.h"
+#include "cc-appearance-xml.h"
+
+/* The number of items we signal as "added" before
+ * returning to the main loop */
+#define NUM_ITEMS_PER_BATCH 1
+
+struct CcAppearanceXmlPrivate
+{
+  GHashTable  *wp_hash;
+  GAsyncQueue *item_added_queue;
+  guint        item_added_id;
+};
+
+#define CC_APPEARANCE_XML_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_APPEARANCE_XML, CcAppearanceXmlPrivate))
+
+enum {
+	ADDED,
+	LAST_SIGNAL
+};
+
+static guint signals[LAST_SIGNAL] = { 0 };
+
+static void     cc_appearance_xml_class_init     (CcAppearanceXmlClass *klass);
+static void     cc_appearance_xml_init           (CcAppearanceXml      *appearance_item);
+static void     cc_appearance_xml_finalize       (GObject              *object);
+
+G_DEFINE_TYPE (CcAppearanceXml, cc_appearance_xml, G_TYPE_OBJECT)
+
+static gboolean
+cc_appearance_xml_get_bool (const xmlNode *parent,
+			    const gchar   *prop_name)
+{
+  xmlChar * prop;
+  gboolean ret_val = FALSE;
+
+  g_return_val_if_fail (parent != NULL, FALSE);
+  g_return_val_if_fail (prop_name != NULL, FALSE);
+
+  prop = xmlGetProp ((xmlNode *) parent, (xmlChar*)prop_name);
+  if (prop != NULL) {
+    if (!g_ascii_strcasecmp ((gchar *)prop, "true") || !g_ascii_strcasecmp ((gchar *)prop, "1")) {
+      ret_val = TRUE;
+    } else {
+      ret_val = FALSE;
+    }
+    g_free (prop);
+  }
+
+  return ret_val;
+}
+
+static struct {
+	int value;
+	const char *string;
+} lookups[] = {
+	{ G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL, "horizontal-gradient" },
+	{ G_DESKTOP_BACKGROUND_SHADING_VERTICAL, "vertical-gradient" },
+};
+
+static int
+enum_string_to_value (GType type,
+		      const char *string)
+{
+	GEnumClass *eclass;
+	GEnumValue *value;
+
+	eclass = G_ENUM_CLASS (g_type_class_peek (type));
+	value = g_enum_get_value_by_nick (eclass, string);
+
+	/* Here's a bit of hand-made parsing, bad bad */
+	if (value == NULL) {
+		guint i;
+		for (i = 0; i < G_N_ELEMENTS (lookups); i++) {
+			if (g_str_equal (lookups[i].string, string))
+				return lookups[i].value;
+		}
+		g_warning ("Unhandled value '%s' for enum '%s'",
+			   string, G_FLAGS_CLASS_TYPE_NAME (eclass));
+		return 0;
+	}
+
+	return value->value;
+}
+
+static gboolean
+idle_emit (CcAppearanceXml *xml)
+{
+	GObject *item;
+	guint i = NUM_ITEMS_PER_BATCH;
+
+	g_async_queue_lock (xml->priv->item_added_queue);
+
+	while (i > 0 && (item = g_async_queue_try_pop_unlocked (xml->priv->item_added_queue)) != NULL) {
+		g_signal_emit (G_OBJECT (xml), signals[ADDED], 0, item);
+		g_object_unref (item);
+		i--;
+	}
+
+	g_async_queue_unlock (xml->priv->item_added_queue);
+
+        if (g_async_queue_length (xml->priv->item_added_queue) > 0) {
+                return TRUE;
+        } else {
+                xml->priv->item_added_id = 0;
+                return FALSE;
+        }
+}
+
+static void
+emit_added_in_idle (CcAppearanceXml *xml,
+		    GObject         *object)
+{
+	g_async_queue_lock (xml->priv->item_added_queue);
+	g_async_queue_push_unlocked (xml->priv->item_added_queue, object);
+	if (xml->priv->item_added_id == 0)
+		xml->priv->item_added_id = g_idle_add ((GSourceFunc) idle_emit, xml);
+	g_async_queue_unlock (xml->priv->item_added_queue);
+}
+
+#define NONE "(none)"
+#define UNSET_FLAG(flag) G_STMT_START{ (flags&=~(flag)); }G_STMT_END
+#define SET_FLAG(flag) G_STMT_START{ (flags|=flag); }G_STMT_END
+
+static gboolean
+cc_appearance_xml_load_xml_internal (CcAppearanceXml *xml,
+				     const gchar     *filename,
+				     gboolean         in_thread)
+{
+  xmlDoc * wplist;
+  xmlNode * root, * list, * wpa;
+  xmlChar * nodelang;
+  const gchar * const * syslangs;
+  gint i;
+  gboolean retval;
+
+  wplist = xmlParseFile (filename);
+  retval = FALSE;
+
+  if (!wplist)
+    return retval;
+
+  syslangs = g_get_language_names ();
+
+  root = xmlDocGetRootElement (wplist);
+
+  for (list = root->children; list != NULL; list = list->next) {
+    if (!strcmp ((gchar *)list->name, "wallpaper")) {
+      CcAppearanceItem * item;
+      CcAppearanceItemFlags flags;
+      char *uri, *cname, *id;
+
+      flags = 0;
+      cname = NULL;
+      item = cc_appearance_item_new (NULL);
+
+      g_object_set (G_OBJECT (item),
+		    "is-deleted", cc_appearance_xml_get_bool (list, "deleted"),
+		    "source-xml", filename,
+		    NULL);
+
+      for (wpa = list->children; wpa != NULL; wpa = wpa->next) {
+	if (wpa->type == XML_COMMENT_NODE) {
+	  continue;
+	} else if (!strcmp ((gchar *)wpa->name, "filename")) {
+	  if (wpa->last != NULL && wpa->last->content != NULL) {
+	    gchar *content = g_strstrip ((gchar *)wpa->last->content);
+	    char *bg_uri;
+
+	    /* FIXME same rubbish as in other parts of the code */
+	    if (strcmp (content, NONE) == 0) {
+	      bg_uri = NULL;
+	    } else {
+	      GFile *file;
+	      file = g_file_new_for_commandline_arg (content);
+	      bg_uri = g_file_get_uri (file);
+	      g_object_unref (file);
+	    }
+	    SET_FLAG(CC_APPEARANCE_ITEM_HAS_URI);
+	    g_object_set (G_OBJECT (item), "uri", bg_uri, NULL);
+	    g_free (bg_uri);
+	  } else {
+	    break;
+	  }
+	} else if (!strcmp ((gchar *)wpa->name, "name")) {
+	  if (wpa->last != NULL && wpa->last->content != NULL) {
+	    char *name;
+	    nodelang = xmlNodeGetLang (wpa->last);
+
+	    g_object_get (G_OBJECT (item), "name", &name, NULL);
+
+	    if (name == NULL && nodelang == NULL) {
+	       g_free (cname);
+	       cname = g_strdup (g_strstrip ((gchar *)wpa->last->content));
+	       g_object_set (G_OBJECT (item), "name", cname, NULL);
+            } else {
+	       for (i = 0; syslangs[i] != NULL; i++) {
+	         if (!strcmp (syslangs[i], (gchar *)nodelang)) {
+		   g_object_set (G_OBJECT (item), "name",
+				 g_strstrip ((gchar *)wpa->last->content), NULL);
+	           break;
+	         }
+	       }
+	    }
+
+	    g_free (name);
+	    xmlFree (nodelang);
+	  } else {
+	    break;
+	  }
+	} else if (!strcmp ((gchar *)wpa->name, "options")) {
+	  if (wpa->last != NULL) {
+	    g_object_set (G_OBJECT (item), "placement",
+			  enum_string_to_value (G_DESKTOP_TYPE_DESKTOP_BACKGROUND_STYLE,
+						g_strstrip ((gchar *)wpa->last->content)), NULL);
+	    SET_FLAG(CC_APPEARANCE_ITEM_HAS_PLACEMENT);
+	  }
+	} else if (!strcmp ((gchar *)wpa->name, "shade_type")) {
+	  if (wpa->last != NULL) {
+	    g_object_set (G_OBJECT (item), "shading",
+			  enum_string_to_value (G_DESKTOP_TYPE_DESKTOP_BACKGROUND_SHADING,
+						g_strstrip ((gchar *)wpa->last->content)), NULL);
+	    SET_FLAG(CC_APPEARANCE_ITEM_HAS_SHADING);
+	  }
+	} else if (!strcmp ((gchar *)wpa->name, "pcolor")) {
+	  if (wpa->last != NULL) {
+	    g_object_set (G_OBJECT (item), "primary-color",
+			  g_strstrip ((gchar *)wpa->last->content), NULL);
+	    SET_FLAG(CC_APPEARANCE_ITEM_HAS_PCOLOR);
+	  }
+	} else if (!strcmp ((gchar *)wpa->name, "scolor")) {
+	  if (wpa->last != NULL) {
+	    g_object_set (G_OBJECT (item), "secondary-color",
+			  g_strstrip ((gchar *)wpa->last->content), NULL);
+	    SET_FLAG(CC_APPEARANCE_ITEM_HAS_SCOLOR);
+	  }
+	} else if (!strcmp ((gchar *)wpa->name, "source_url")) {
+	   if (wpa->last != NULL) {
+             g_object_set (G_OBJECT (item),
+			   "source-url", g_strstrip ((gchar *)wpa->last->content),
+			   "needs-download", FALSE,
+			   NULL);
+	   }
+	} else if (!strcmp ((gchar *)wpa->name, "text")) {
+	  /* Do nothing here, libxml2 is being weird */
+	} else {
+	  g_warning ("Unknown Tag: %s", wpa->name);
+	}
+      }
+
+      /* Check whether the target file exists */
+      {
+        GFile *file;
+        const char *uri;
+
+	uri = cc_appearance_item_get_uri (item);
+	if (uri != NULL)
+	  {
+            file = g_file_new_for_uri (uri);
+	    if (g_file_query_exists (file, NULL) == FALSE)
+	      {
+	        g_object_unref (item);
+	        continue;
+	      }
+	  }
+      }
+
+      /* FIXME, this is a broken way of doing,
+       * need to use proper code here */
+      uri = g_filename_to_uri (filename, NULL, NULL);
+      id = g_strdup_printf ("%s#%s", uri, cname);
+      g_free (uri);
+
+      /* Make sure we don't already have this one and that filename exists */
+      if (g_hash_table_lookup (xml->priv->wp_hash, id) != NULL) {
+	g_object_unref (item);
+	g_free (id);
+	continue;
+      }
+
+      g_object_set (G_OBJECT (item), "flags", flags, NULL);
+      g_hash_table_insert (xml->priv->wp_hash, id, item);
+      /* Don't free ID, we added it to the hash table */
+      if (in_thread)
+        emit_added_in_idle (xml, g_object_ref (item));
+      else
+        g_signal_emit (G_OBJECT (xml), signals[ADDED], 0, item);
+      retval = TRUE;
+    }
+  }
+  xmlFreeDoc (wplist);
+
+  return retval;
+}
+
+static void
+gnome_wp_file_changed (GFileMonitor *monitor,
+		       GFile *file,
+		       GFile *other_file,
+		       GFileMonitorEvent event_type,
+		       CcAppearanceXml *data)
+{
+  gchar *filename;
+
+  switch (event_type) {
+  case G_FILE_MONITOR_EVENT_CHANGED:
+  case G_FILE_MONITOR_EVENT_CREATED:
+    filename = g_file_get_path (file);
+    cc_appearance_xml_load_xml_internal (data, filename, FALSE);
+    g_free (filename);
+    break;
+  default:
+    break;
+  }
+}
+
+static void
+cc_appearance_xml_add_monitor (GFile      *directory,
+			       CcAppearanceXml *data)
+{
+  GFileMonitor *monitor;
+  GError *error = NULL;
+
+  monitor = g_file_monitor_directory (directory,
+                                      G_FILE_MONITOR_NONE,
+                                      NULL,
+                                      &error);
+  if (error != NULL) {
+    gchar *path;
+
+    path = g_file_get_parse_name (directory);
+    g_warning ("Unable to monitor directory %s: %s",
+               path, error->message);
+    g_error_free (error);
+    g_free (path);
+    return;
+  }
+
+  g_signal_connect (monitor, "changed",
+                    G_CALLBACK (gnome_wp_file_changed),
+                    data);
+}
+
+static void
+cc_appearance_xml_load_from_dir (const gchar      *path,
+				 CcAppearanceXml  *data,
+				 gboolean          in_thread)
+{
+  GFile *directory;
+  GFileEnumerator *enumerator;
+  GError *error = NULL;
+  GFileInfo *info;
+
+  if (!g_file_test (path, G_FILE_TEST_IS_DIR)) {
+    return;
+  }
+
+  directory = g_file_new_for_path (path);
+  enumerator = g_file_enumerate_children (directory,
+                                          G_FILE_ATTRIBUTE_STANDARD_NAME,
+                                          G_FILE_QUERY_INFO_NONE,
+                                          NULL,
+                                          &error);
+  if (error != NULL) {
+    g_warning ("Unable to check directory %s: %s", path, error->message);
+    g_error_free (error);
+    g_object_unref (directory);
+    return;
+  }
+
+  while ((info = g_file_enumerator_next_file (enumerator, NULL, NULL))) {
+    const gchar *filename;
+    gchar *fullpath;
+
+    filename = g_file_info_get_name (info);
+    fullpath = g_build_filename (path, filename, NULL);
+    g_object_unref (info);
+
+    cc_appearance_xml_load_xml_internal (data, fullpath, in_thread);
+    g_free (fullpath);
+  }
+  g_file_enumerator_close (enumerator, NULL, NULL);
+
+  cc_appearance_xml_add_monitor (directory, data);
+
+  g_object_unref (directory);
+  g_object_unref (enumerator);
+}
+
+static void
+cc_appearance_xml_load_list (CcAppearanceXml *data,
+			     gboolean         in_thread)
+{
+  const char * const *system_data_dirs;
+  gchar * datadir;
+  gint i;
+
+  datadir = g_build_filename (g_get_user_data_dir (),
+                              "gnome-background-properties",
+                              NULL);
+  cc_appearance_xml_load_from_dir (datadir, data, in_thread);
+  g_free (datadir);
+
+  system_data_dirs = g_get_system_data_dirs ();
+  for (i = 0; system_data_dirs[i]; i++) {
+    datadir = g_build_filename (system_data_dirs[i],
+                                "gnome-background-properties",
+				NULL);
+    cc_appearance_xml_load_from_dir (datadir, data, in_thread);
+    g_free (datadir);
+  }
+}
+
+const GHashTable *
+cc_appearance_xml_load_list_finish (GAsyncResult  *async_result)
+{
+	GSimpleAsyncResult *result = G_SIMPLE_ASYNC_RESULT (async_result);
+	CcAppearanceXml *data;
+
+	g_return_val_if_fail (G_IS_ASYNC_RESULT (async_result), NULL);
+	g_warn_if_fail (g_simple_async_result_get_source_tag (result) == cc_appearance_xml_load_list_async);
+
+	data = CC_APPEARANCE_XML (g_simple_async_result_get_op_res_gpointer (result));
+	return data->priv->wp_hash;
+}
+
+static void
+load_list_thread (GSimpleAsyncResult *res,
+		  GObject *object,
+		  GCancellable *cancellable)
+{
+	CcAppearanceXml *data;
+
+	data = g_simple_async_result_get_op_res_gpointer (res);
+	cc_appearance_xml_load_list (data, TRUE);
+}
+
+void cc_appearance_xml_load_list_async (CcAppearanceXml *xml,
+					GCancellable *cancellable,
+					GAsyncReadyCallback callback,
+					gpointer user_data)
+{
+	GSimpleAsyncResult *result;
+
+	g_return_if_fail (CC_IS_APPEARANCE_XML (xml));
+
+	result = g_simple_async_result_new (G_OBJECT (xml), callback, user_data, cc_appearance_xml_load_list_async);
+	g_simple_async_result_set_op_res_gpointer (result, xml, NULL);
+	g_simple_async_result_run_in_thread (result, (GSimpleAsyncThreadFunc) load_list_thread, G_PRIORITY_LOW, cancellable);
+	g_object_unref (result);
+}
+
+gboolean
+cc_appearance_xml_load_xml (CcAppearanceXml *xml,
+			    const gchar     *filename)
+{
+	g_return_val_if_fail (CC_IS_APPEARANCE_XML (xml), FALSE);
+
+	if (g_file_test (filename, G_FILE_TEST_IS_REGULAR) == FALSE)
+		return FALSE;
+
+	return cc_appearance_xml_load_xml_internal (xml, filename, FALSE);
+}
+
+static void
+single_xml_added (CcAppearanceXml   *xml,
+		  CcAppearanceItem  *item,
+		  CcAppearanceItem **ret)
+{
+	g_assert (*ret == NULL);
+	*ret = g_object_ref (item);
+}
+
+CcAppearanceItem *
+cc_appearance_xml_get_item (const char *filename)
+{
+	CcAppearanceXml *xml;
+	CcAppearanceItem *item;
+
+	if (g_file_test (filename, G_FILE_TEST_IS_REGULAR) == FALSE)
+		return NULL;
+
+	xml = cc_appearance_xml_new ();
+	item = NULL;
+	g_signal_connect (G_OBJECT (xml), "added",
+			  G_CALLBACK (single_xml_added), &item);
+	if (cc_appearance_xml_load_xml (xml, filename) == FALSE) {
+		g_object_unref (xml);
+		return NULL;
+	}
+
+	return item;
+}
+
+static const char *
+enum_to_str (GType type,
+	     int   v)
+{
+	GEnumClass *eclass;
+	GEnumValue *value;
+
+	eclass = G_ENUM_CLASS (g_type_class_peek (type));
+	value = g_enum_get_value (eclass, v);
+
+	g_assert (value);
+
+	return value->value_nick;
+}
+
+void
+cc_appearance_xml_save (CcAppearanceItem *item,
+			const char       *filename)
+{
+  xmlDoc *wp;
+  xmlNode *root, *wallpaper;
+  xmlNode *xml_item G_GNUC_UNUSED;
+  const char * none = "(none)";
+  const char *placement_str, *shading_str;
+  char *name, *pcolor, *scolor, *uri, *source_url;
+  CcAppearanceItemFlags flags;
+  GDesktopBackgroundStyle placement;
+  GDesktopBackgroundShading shading;
+
+  xmlKeepBlanksDefault (0);
+
+  wp = xmlNewDoc ((xmlChar *)"1.0");
+  xmlCreateIntSubset (wp, (xmlChar *)"wallpapers", NULL, (xmlChar *)"gnome-wp-list.dtd");
+  root = xmlNewNode (NULL, (xmlChar *)"wallpapers");
+  xmlDocSetRootElement (wp, root);
+
+  g_object_get (G_OBJECT (item),
+		"name", &name,
+		"uri", &uri,
+		"shading", &shading,
+		"placement", &placement,
+		"primary-color", &pcolor,
+		"secondary-color", &scolor,
+		"source-url", &source_url,
+		"flags", &flags,
+		NULL);
+
+  placement_str = enum_to_str (G_DESKTOP_TYPE_DESKTOP_BACKGROUND_STYLE, placement);
+  shading_str = enum_to_str (G_DESKTOP_TYPE_DESKTOP_BACKGROUND_SHADING, shading);
+
+  wallpaper = xmlNewChild (root, NULL, (xmlChar *)"wallpaper", NULL);
+  xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"name", (xmlChar *)name);
+  if (flags & CC_APPEARANCE_ITEM_HAS_URI &&
+      uri != NULL)
+    {
+      GFile *file;
+      char *fname;
+
+      file = g_file_new_for_commandline_arg (uri);
+      fname = g_file_get_path (file);
+      g_object_unref (file);
+      xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"filename", (xmlChar *)fname);
+      g_free (fname);
+    }
+  else if (flags & CC_APPEARANCE_ITEM_HAS_URI)
+    {
+      xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"filename", (xmlChar *)none);
+    }
+
+  if (flags & CC_APPEARANCE_ITEM_HAS_PLACEMENT)
+    xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"options", (xmlChar *)placement_str);
+  if (flags & CC_APPEARANCE_ITEM_HAS_SHADING)
+    xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"shade_type", (xmlChar *)shading_str);
+  if (flags & CC_APPEARANCE_ITEM_HAS_PCOLOR)
+    xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"pcolor", (xmlChar *)pcolor);
+  if (flags & CC_APPEARANCE_ITEM_HAS_SCOLOR)
+    xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"scolor", (xmlChar *)scolor);
+  if (source_url != NULL)
+    xml_item = xmlNewTextChild (wallpaper, NULL, (xmlChar *)"source_url", (xmlChar *)source_url);
+
+  g_free (name);
+  g_free (pcolor);
+  g_free (scolor);
+  g_free (uri);
+  g_free (source_url);
+
+  xmlSaveFormatFile (filename, wp, 1);
+  xmlFreeDoc (wp);
+}
+
+static void
+cc_appearance_xml_finalize (GObject *object)
+{
+        CcAppearanceXml *xml;
+
+        g_return_if_fail (object != NULL);
+        g_return_if_fail (CC_IS_APPEARANCE_XML (object));
+
+        xml = CC_APPEARANCE_XML (object);
+
+        g_return_if_fail (xml->priv != NULL);
+
+	if (xml->priv->wp_hash) {
+		g_hash_table_destroy (xml->priv->wp_hash);
+		xml->priv->wp_hash = NULL;
+	}
+	if (xml->priv->item_added_id != 0) {
+		g_source_remove (xml->priv->item_added_id);
+		xml->priv->item_added_id = 0;
+	}
+	if (xml->priv->item_added_queue) {
+		g_async_queue_unref (xml->priv->item_added_queue);
+		xml->priv->item_added_queue = NULL;
+	}
+}
+
+static void
+cc_appearance_xml_class_init (CcAppearanceXmlClass *klass)
+{
+        GObjectClass  *object_class = G_OBJECT_CLASS (klass);
+
+        object_class->finalize = cc_appearance_xml_finalize;
+
+	signals[ADDED] = g_signal_new ("added",
+				       G_OBJECT_CLASS_TYPE (object_class),
+				       G_SIGNAL_RUN_LAST,
+				       0,
+				       NULL, NULL,
+				       g_cclosure_marshal_VOID__OBJECT,
+				       G_TYPE_NONE, 1, CC_TYPE_APPEARANCE_ITEM);
+
+        g_type_class_add_private (klass, sizeof (CcAppearanceXmlPrivate));
+}
+
+static void
+cc_appearance_xml_init (CcAppearanceXml *xml)
+{
+        xml->priv = CC_APPEARANCE_XML_GET_PRIVATE (xml);
+        xml->priv->wp_hash = g_hash_table_new_full (g_str_hash,
+						    g_str_equal,
+						    (GDestroyNotify) g_free,
+						    (GDestroyNotify) g_object_unref);
+	xml->priv->item_added_queue = g_async_queue_new_full ((GDestroyNotify) g_object_unref);
+}
+
+CcAppearanceXml *
+cc_appearance_xml_new (void)
+{
+	return CC_APPEARANCE_XML (g_object_new (CC_TYPE_APPEARANCE_XML, NULL));
+}
Index: gnome-control-center-3.6.2/panels/appearance/cc-appearance-xml.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-control-center-3.6.2/panels/appearance/cc-appearance-xml.h	2012-11-01 23:12:51.337697489 -0400
@@ -0,0 +1,70 @@
+/*
+ *  Authors: Rodney Dawes <dobey@ximian.com>
+ *
+ *  Copyright 2003-2006 Novell, Inc. (www.novell.com)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License
+ *  as published by the Free Software Foundation
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Street #330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef _CC_APPEARANCE_XML_H_
+#define _CC_APPEARANCE_XML_H_
+
+#include <libgnome-desktop/gnome-desktop-thumbnail.h>
+#include <gtk/gtk.h>
+#include <gio/gio.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_APPEARANCE_XML         (cc_appearance_xml_get_type ())
+#define CC_APPEARANCE_XML(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), CC_TYPE_APPEARANCE_XML, CcAppearanceXml))
+#define CC_APPEARANCE_XML_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), CC_TYPE_APPEARANCE_XML, CcAppearanceXmlClass))
+#define CC_IS_APPEARANCE_XML(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), CC_TYPE_APPEARANCE_XML))
+#define CC_IS_APPEARANCE_XML_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), CC_TYPE_APPEARANCE_XML))
+#define CC_APPEARANCE_XML_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CC_TYPE_APPEARANCE_XML, CcAppearanceXmlClass))
+
+typedef struct CcAppearanceXmlPrivate CcAppearanceXmlPrivate;
+
+typedef struct
+{
+  GObject parent;
+  CcAppearanceXmlPrivate *priv;
+} CcAppearanceXml;
+
+typedef struct
+{
+  GObjectClass parent_class;
+  void (*added) (CcAppearanceXml *xml, GObject *item);
+} CcAppearanceXmlClass;
+
+GType              cc_appearance_xml_get_type (void);
+
+CcAppearanceXml *cc_appearance_xml_new (void);
+
+void cc_appearance_xml_save                          (CcAppearanceItem *item,
+						      const char       *filename);
+
+CcAppearanceItem *cc_appearance_xml_get_item         (const char      *filename);
+gboolean cc_appearance_xml_load_xml                  (CcAppearanceXml *data,
+						      const char      *filename);
+void cc_appearance_xml_load_list_async               (CcAppearanceXml *data,
+						      GCancellable *cancellable,
+						      GAsyncReadyCallback callback,
+						      gpointer user_data);
+const GHashTable *cc_appearance_xml_load_list_finish (GAsyncResult  *async_result);
+
+G_END_DECLS
+
+#endif
+
