From: James Henstridge <james@jamesh.id.au>
Date: Thu, 14 Sep 2017 10:58:16 +0800
Subject: [PATCH] panels/privacy: add Whoopsie support to privacy panel

Index: gnome-control-center-3.26.1/configure.ac
===================================================================
--- gnome-control-center-3.26.1.orig/configure.ac
+++ gnome-control-center-3.26.1/configure.ac
@@ -193,6 +193,11 @@ if test "x$have_wayland" = xyes ; then
 	fi
 fi
 
+PKG_CHECK_MODULES(WHOOPSIE, libwhoopsie-preferences, have_whoopsie=yes, have_whoopsie=no)
+if test "x$have_whoopsie" = xyes ; then
+	AC_DEFINE(HAVE_WHOOPSIE, 1, [System has libwhoopsie-preferences])
+fi
+
 # Panels that must be built on Linux systems
 linux_error_or_warn()
 {
Index: gnome-control-center-3.26.1/panels/privacy/cc-privacy-panel.c
===================================================================
--- gnome-control-center-3.26.1.orig/panels/privacy/cc-privacy-panel.c
+++ gnome-control-center-3.26.1/panels/privacy/cc-privacy-panel.c
@@ -33,6 +33,12 @@
 typedef struct _NMClient NMClient;
 #endif
 
+#ifdef HAVE_WHOOPSIE
+#  include <whoopsie-preferences/libwhoopsie-preferences.h>
+#else
+typedef struct _WhoopsiePreferences WhoopsiePreferences;
+#endif
+
 CC_PANEL_REGISTER (CcPrivacyPanel, cc_privacy_panel)
 
 #define WID(s) GTK_WIDGET (gtk_builder_get_object (self->priv->builder, s))
@@ -71,7 +77,10 @@ struct _CcPrivacyPanelPrivate
 
   GtkWidget  *abrt_dialog;
   GtkWidget  *abrt_row;
+  GtkWidget  *abrt_status;
+  GtkWidget  *abrt_switch;
   guint       abrt_watch_id;
+  WhoopsiePreferences *whoopsie;
 
   GCancellable *cancellable;
 
@@ -1206,25 +1215,74 @@ abrt_vanished_cb (GDBusConnection *conne
   gtk_widget_hide (self->priv->abrt_row);
 }
 
+#ifdef HAVE_WHOOPSIE
+static void
+whoopsie_properties_changed (WhoopsiePreferences *whoopsie,
+                             GVariant            *changed_properties,
+                             const char *const   *invalidated_properties,
+                             gpointer             user_data)
+{
+  CcPrivacyPanel *self = user_data;
+  gboolean report_crashes = whoopsie_preferences_get_report_crashes (whoopsie);
+
+  gtk_label_set_text (GTK_LABEL (self->priv->abrt_status),
+                      report_crashes ? _("Automatic") : _("Manual"));
+  gtk_switch_set_state (GTK_SWITCH (self->priv->abrt_switch), report_crashes);
+}
+
+static void
+whoopsie_set_report_crashes_done (GObject *source_object,
+                                  GAsyncResult *res,
+                                  gpointer user_data)
+{
+  WhoopsiePreferences *whoopsie = WHOOPSIE_PREFERENCES (source_object);
+  GError *error = NULL;
+
+  if (!whoopsie_preferences_call_set_report_crashes_finish (whoopsie,
+                                                           res, &error))
+    {
+      g_warning ("Failed to toggle crash reporting: %s", error->message);
+      g_error_free (error);
+    }
+}
+
+static gboolean
+whoopsie_switch_state_set (GtkSwitch  *sw G_GNUC_UNUSED,
+                           gboolean    state,
+                           gpointer    user_data)
+{
+  CcPrivacyPanel *self = user_data;
+  gboolean old_report_crashes;
+
+  old_report_crashes = whoopsie_preferences_get_report_crashes (self->priv->whoopsie);
+  if (state != old_report_crashes)
+    {
+      whoopsie_preferences_call_set_report_crashes (self->priv->whoopsie,
+                                                    state, NULL,
+                                                    whoopsie_set_report_crashes_done,
+                                                    NULL);
+    }
+
+  return FALSE;
+}
+#endif
+
 static void
 add_abrt (CcPrivacyPanel *self)
 {
-  GtkWidget *w;
   GtkWidget *dialog;
   char *os_name, *url, *msg;
+  GError *error = NULL;
 
-  w = get_abrt_label (self->priv->privacy_settings, REPORT_TECHNICAL_PROBLEMS);
-  self->priv->abrt_row = add_row (self, _("Problem Reporting"), "abrt_dialog", w);
+  self->priv->abrt_status = gtk_label_new ("");
+  self->priv->abrt_row = add_row (self, _("Problem Reporting"), "abrt_dialog", self->priv->abrt_status);
   gtk_widget_hide (self->priv->abrt_row);
 
   dialog = self->priv->abrt_dialog;
   g_signal_connect (dialog, "delete-event",
                     G_CALLBACK (gtk_widget_hide_on_delete), NULL);
 
-  w = GTK_WIDGET (gtk_builder_get_object (self->priv->builder, "abrt_switch"));
-  g_settings_bind (self->priv->privacy_settings, REPORT_TECHNICAL_PROBLEMS,
-                   w, "active",
-                   G_SETTINGS_BIND_DEFAULT);
+  self->priv->abrt_switch = GTK_WIDGET (gtk_builder_get_object (self->priv->builder, "abrt_switch"));
 
   os_name = get_os_name ();
   /* translators: '%s' is the distributor's name, such as 'Fedora' */
@@ -1245,13 +1303,54 @@ add_abrt (CcPrivacyPanel *self)
   gtk_label_set_markup (GTK_LABEL (gtk_builder_get_object (self->priv->builder, "abrt_policy_linklabel")), msg);
   g_free (msg);
 
-  self->priv->abrt_watch_id = g_bus_watch_name (G_BUS_TYPE_SYSTEM,
-                                                "org.freedesktop.problems.daemon",
-                                                G_BUS_NAME_WATCHER_FLAGS_NONE,
-                                                abrt_appeared_cb,
-                                                abrt_vanished_cb,
-                                                self,
-                                                NULL);
+#ifdef HAVE_WHOOPSIE
+  /* check for whoopsie */
+  self->priv->whoopsie = whoopsie_preferences_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                                                      G_DBUS_PROXY_FLAGS_NONE,
+                                                                      "com.ubuntu.WhoopsiePreferences",
+                                                                      "/com/ubuntu/WhoopsiePreferences",
+                                                                      NULL, &error);
+
+  if (self->priv->whoopsie)
+    {
+      g_debug ("Whoopsie available");
+
+      g_signal_connect (self->priv->whoopsie, "g-properties-changed",
+                        G_CALLBACK (whoopsie_properties_changed), self);
+      whoopsie_properties_changed (self->priv->whoopsie, NULL, NULL, self);
+      g_signal_connect (self->priv->abrt_switch, "state-set",
+                        G_CALLBACK (whoopsie_switch_state_set), self);
+      gtk_widget_show (self->priv->abrt_row);
+    }
+  else
+#endif
+    {
+      if (error)
+        {
+          g_debug ("Whoopsie unavailable: %s", error->message);
+          g_error_free (error);
+        }
+
+      g_settings_bind_with_mapping (self->priv->privacy_settings,
+                                    REPORT_TECHNICAL_PROBLEMS,
+                                    self->priv->abrt_status, "label",
+                                    G_SETTINGS_BIND_GET,
+                                    abrt_label_mapping_get,
+                                    NULL,
+                                    NULL,
+                                    NULL);
+      g_settings_bind (self->priv->privacy_settings, REPORT_TECHNICAL_PROBLEMS,
+                       self->priv->abrt_switch, "active",
+                       G_SETTINGS_BIND_DEFAULT);
+
+      self->priv->abrt_watch_id = g_bus_watch_name (G_BUS_TYPE_SYSTEM,
+                                                    "org.freedesktop.problems.daemon",
+                                                    G_BUS_NAME_WATCHER_FLAGS_NONE,
+                                                    abrt_appeared_cb,
+                                                    abrt_vanished_cb,
+                                                    self,
+                                                    NULL);
+    }
 }
 
 #ifdef BUILD_NETWORK
@@ -1374,6 +1473,7 @@ cc_privacy_panel_finalize (GObject *obje
   g_clear_object (&priv->cancellable);
   g_clear_object (&priv->perm_store);
   g_clear_object (&priv->location_icon_size_group);
+  g_clear_object (&priv->whoopsie);
   g_clear_pointer (&priv->location_apps_perms, g_variant_unref);
   g_clear_pointer (&priv->location_apps_data, g_variant_unref);
   g_clear_pointer (&priv->location_app_switches, g_hash_table_unref);
Index: gnome-control-center-3.26.1/panels/privacy/Makefile.am
===================================================================
--- gnome-control-center-3.26.1.orig/panels/privacy/Makefile.am
+++ gnome-control-center-3.26.1/panels/privacy/Makefile.am
@@ -4,6 +4,7 @@ AM_CPPFLAGS = 						\
 	$(PANEL_CFLAGS)					\
 	$(PRIVACY_PANEL_CFLAGS)				\
 	$(NETWORK_MANAGER_CFLAGS)			\
+	$(WHOOPSIE_CFLAGS)				\
 	-DGNOMELOCALEDIR="\"$(datadir)/locale\""	\
 	-I$(top_srcdir)/panels/common/			\
 	$(NULL)
@@ -19,7 +20,7 @@ libprivacy_la_SOURCES =		\
 	cc-privacy-panel.c	\
 	cc-privacy-panel.h
 
-libprivacy_la_LIBADD = $(PANEL_LIBS) $(PRIVACY_PANEL_LIBS) $(NETWORK_MANAGER_LIBS)
+libprivacy_la_LIBADD = $(PANEL_LIBS) $(PRIVACY_PANEL_LIBS) $(NETWORK_MANAGER_LIBS) $(WHOOPSIE_LIBS)
 
 resource_files = $(shell glib-compile-resources --sourcedir=$(srcdir) --generate-dependencies $(srcdir)/privacy.gresource.xml)
 cc-privacy-resources.c: privacy.gresource.xml $(resource_files)
