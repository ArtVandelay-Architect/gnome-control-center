Description: Allow tweaking some settings for Ubuntu Dock
 Expose some of the settings that most users will find useful for our
 Ubuntu Dock installation. Those are located in the Display panel for now
 until we find a better place:
 * change intellihide true/hide mode
 * change dock icon size
 * modify placement of the launcher (all monitor, primary or any monitors)
Origin: ubuntu
Author: didrocks@ubuntu.com
Forwarded: not-needed

Index: gnome-control-center-3.24.3/panels/display/cc-display-panel.c
===================================================================
--- gnome-control-center-3.24.3.orig/panels/display/cc-display-panel.c
+++ gnome-control-center-3.24.3/panels/display/cc-display-panel.c
@@ -55,6 +55,15 @@ CC_PANEL_REGISTER (CcDisplayPanel, cc_di
 #define DISPLAY_PREVIEW_SETUP_HEIGHT 140
 #define DISPLAY_PREVIEW_LIST_HEIGHT  55
 
+#define MIN_ICONSIZE 16.0
+#define MAX_ICONSIZE 64.0
+#define DEFAULT_ICONSIZE 48.0
+#define ICONSIZE_KEY "dash-max-icon-size"
+
+#define UBUNTU_DOCK_SCHEMA "org.gnome.shell.extensions.dash-to-dock"
+#define UBUNTU_DOCK_ALL_MONITORS_KEY "multi-monitor"
+#define UBUNTU_DOCK_ON_MONITOR_KEY "preferred-monitor"
+
 enum
 {
   DISPLAY_MODE_PRIMARY,
@@ -101,6 +110,10 @@ struct _CcDisplayPanelPrivate
   guint       sensor_watch_id;
   GDBusProxy *iio_sensor_proxy;
   gboolean    has_accelerometer;
+
+  GSettings *ubuntu_dock_settings;
+  GtkWidget *ubuntu_dock_placement_combo;
+  gint ubuntu_dock_placement_primary_index;
 };
 
 typedef struct
@@ -494,6 +507,37 @@ display_preview_new (CcDisplayPanel    *
 }
 
 static void
+on_ubuntu_dock_placement_combo_changed (GtkComboBox *combo, CcDisplayPanel *self)
+{
+  gint active = gtk_combo_box_get_active (combo);
+
+  gboolean ubuntu_dock_on_all_monitors = g_settings_get_boolean (self->priv->ubuntu_dock_settings, UBUNTU_DOCK_ALL_MONITORS_KEY);
+  gint ubuntu_dock_current_index = g_settings_get_int (self->priv->ubuntu_dock_settings, UBUNTU_DOCK_ON_MONITOR_KEY);
+
+  if (active < 0)
+    return;
+  else if (active == 0) {
+    if (ubuntu_dock_on_all_monitors != TRUE) {
+      g_settings_set_boolean (self->priv->ubuntu_dock_settings, UBUNTU_DOCK_ALL_MONITORS_KEY, TRUE);
+      g_settings_apply (self->priv->ubuntu_dock_settings);
+    }
+  }
+  else {
+    active--;
+    GSettings *delayed_settings = g_settings_new (UBUNTU_DOCK_SCHEMA);
+    g_settings_delay (delayed_settings);
+    if (ubuntu_dock_on_all_monitors != FALSE)
+      g_settings_set_boolean (delayed_settings, UBUNTU_DOCK_ALL_MONITORS_KEY, FALSE);
+    if (ubuntu_dock_current_index != active) {
+      if (!(ubuntu_dock_current_index == -1 && (active == self->priv->ubuntu_dock_placement_primary_index)))
+        g_settings_set_int (delayed_settings, UBUNTU_DOCK_ON_MONITOR_KEY, active);
+    }
+    g_settings_apply (delayed_settings);
+    g_object_unref (delayed_settings);
+  }
+}
+
+static void
 on_screen_changed (CcDisplayPanel *panel)
 {
   GnomeRRConfig *current;
@@ -504,6 +548,14 @@ on_screen_changed (CcDisplayPanel *panel
   GtkSizeGroup *sizegroup;
   GList *sorted_outputs = NULL, *l;
 
+  GtkWidget *ubuntu_dock_placement_combo = priv->ubuntu_dock_placement_combo;
+  GtkCellRenderer *ubuntu_dock_placement_cell;
+  GtkListStore *ubuntu_dock_placement_liststore = gtk_list_store_new (1, G_TYPE_STRING);
+  GtkTreeIter ubuntu_dock_placement_iter;
+  gboolean ubuntu_dock_on_all_monitors = g_settings_get_boolean (priv->ubuntu_dock_settings, UBUNTU_DOCK_ALL_MONITORS_KEY);
+  gint ubuntu_dock_current_index = g_settings_get_int (priv->ubuntu_dock_settings, UBUNTU_DOCK_ON_MONITOR_KEY);
+  gtk_list_store_clear (ubuntu_dock_placement_liststore);
+
   if (priv->dialog)
     gtk_dialog_response (GTK_DIALOG (priv->dialog), GTK_RESPONSE_NONE);
 
@@ -548,6 +600,7 @@ on_screen_changed (CcDisplayPanel *panel
 
   sizegroup = gtk_size_group_new (GTK_SIZE_GROUP_HORIZONTAL);
 
+  i = 0;
   for (l = sorted_outputs; l; l = g_list_next (l))
     {
       GtkWidget *row, *item, *preview, *label;
@@ -583,9 +636,19 @@ on_screen_changed (CcDisplayPanel *panel
       label = gtk_label_new (gnome_rr_output_info_get_display_name (output_info));
       gtk_container_add (GTK_CONTAINER (item), label);
 
+      char *monitor_name;
+      monitor_name = g_strdup (gnome_rr_output_info_get_display_name (output_info));
+      gtk_list_store_append (ubuntu_dock_placement_liststore, &ubuntu_dock_placement_iter);
+      gtk_list_store_set (ubuntu_dock_placement_liststore, &ubuntu_dock_placement_iter, 0, monitor_name, -1);
+
       primary = gnome_rr_output_info_get_primary (output_info);
       active = gnome_rr_output_info_is_active (output_info);
 
+      if (primary) {
+        priv->ubuntu_dock_placement_primary_index = i;
+      }
+      i++;
+
       if (num_connected_outputs > 1)
         {
           if (display_closed)
@@ -617,6 +680,26 @@ on_screen_changed (CcDisplayPanel *panel
 
   g_list_free (sorted_outputs);
 
+  gtk_list_store_prepend (ubuntu_dock_placement_liststore, &ubuntu_dock_placement_iter);
+  gtk_list_store_set (ubuntu_dock_placement_liststore, &ubuntu_dock_placement_iter, 0, _("All displays"), -1);
+  gtk_combo_box_set_model (GTK_COMBO_BOX (ubuntu_dock_placement_combo), GTK_TREE_MODEL (ubuntu_dock_placement_liststore));
+  g_object_unref (ubuntu_dock_placement_liststore);
+  gtk_cell_layout_clear (GTK_CELL_LAYOUT (ubuntu_dock_placement_combo));
+  ubuntu_dock_placement_cell = gtk_cell_renderer_text_new ();
+  gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (ubuntu_dock_placement_combo), ubuntu_dock_placement_cell, TRUE);
+  gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (ubuntu_dock_placement_combo), ubuntu_dock_placement_cell,
+                                  "text", 0,
+                                  NULL);
+
+  gint selection = 0;
+  if (ubuntu_dock_on_all_monitors != TRUE) {
+    if ((ubuntu_dock_current_index != -1) && (ubuntu_dock_current_index < num_connected_outputs))
+        selection = ubuntu_dock_current_index + 1;
+    else
+      selection = priv->ubuntu_dock_placement_primary_index + 1;
+  }
+  gtk_combo_box_set_active (GTK_COMBO_BOX (ubuntu_dock_placement_combo), selection);
+
   if (combined)
     gtk_widget_show (priv->arrange_button);
   else
@@ -2795,6 +2878,162 @@ settings_color_changed_cb (GSettings *se
 }
 
 static void
+ext_ubuntu_dock_placement_changed_callback (GSettings *settings,
+                                            guint key,
+                                            gpointer user_data)
+{
+  CcDisplayPanel *self = CC_DISPLAY_PANEL (user_data);
+  int selection = 0;
+
+  if (g_settings_get_boolean (self->priv->ubuntu_dock_settings, UBUNTU_DOCK_ALL_MONITORS_KEY) == FALSE) {
+    selection = g_settings_get_int (self->priv->ubuntu_dock_settings, UBUNTU_DOCK_ON_MONITOR_KEY);
+    if (selection == -1)
+      selection = self->priv->ubuntu_dock_placement_primary_index;
+    selection++; // offset in combox
+  }
+
+  gtk_combo_box_set_active (GTK_COMBO_BOX (self->priv->ubuntu_dock_placement_combo), selection);
+}
+
+static void
+iconsize_widget_refresh (GtkAdjustment *iconsize_adj, GSettings *settings)
+{
+  gint value = g_settings_get_int (settings, ICONSIZE_KEY);
+  gtk_adjustment_set_value(iconsize_adj, (gdouble)value / 2);
+}
+
+static void
+ext_iconsize_changed_callback (GSettings *settings,
+                              gchar *key,
+                              gpointer user_data)
+{
+  iconsize_widget_refresh (GTK_ADJUSTMENT (user_data), settings);
+}
+
+static gchar *
+on_iconsize_format_value (GtkScale *scale, gdouble value)
+{
+  return g_strdup_printf ("%d", (int)value * 2);
+}
+
+static void
+on_iconsize_changed (GtkAdjustment *adj, CcDisplayPanel *self)
+{
+  gint value = (gint)gtk_adjustment_get_value (adj) * 2;
+  if (g_settings_get_int (self->priv->ubuntu_dock_settings, ICONSIZE_KEY) != value)
+    g_settings_set_int (self->priv->ubuntu_dock_settings, ICONSIZE_KEY, value);
+}
+
+static void
+cc_display_add_ubuntu_dock_settings(CcDisplayPanel *self, GtkWidget *vbox)
+{
+  CcDisplayPanelPrivate *priv = self->priv;
+  GtkWidget *widget, *mainbox, *box, *label;
+  GtkWidget *ubuntu_dock_listbox;
+  GtkListBoxRow *row;
+  GtkWidget *frame;
+  GtkWidget *sw, *iconsize_scale;
+  GtkAdjustment *iconsize_adj;
+  gchar *s;
+
+  mainbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+  gtk_box_pack_start (GTK_BOX (vbox), mainbox, FALSE, TRUE, 0);
+
+  s = g_strdup_printf ("<b>%s</b>", _("Ubuntu Dock settings"));
+  label = gtk_label_new (s);
+  g_free (s);
+  gtk_label_set_use_markup (GTK_LABEL (label), TRUE);
+  gtk_widget_set_halign (label, GTK_ALIGN_START);
+  gtk_widget_set_margin_start (label, 6);
+  gtk_widget_set_margin_end (label, 6);
+  gtk_widget_set_margin_bottom (label, 6);
+  gtk_box_pack_start (GTK_BOX (mainbox), label, FALSE, TRUE, 0);
+
+  frame = gtk_frame_new (NULL);
+  gtk_frame_set_shadow_type(GTK_FRAME(frame), GTK_SHADOW_IN);
+  ubuntu_dock_listbox = gtk_list_box_new ();
+  gtk_list_box_set_selection_mode (GTK_LIST_BOX(ubuntu_dock_listbox),
+                                   GTK_SELECTION_NONE);
+  gtk_container_add (GTK_CONTAINER( frame), ubuntu_dock_listbox);
+
+  label = gtk_label_new (_("Auto-hide the Launcher (intellihide)"));
+  row = GTK_LIST_BOX_ROW (gtk_list_box_row_new ());
+  box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 50);
+  gtk_container_add (GTK_CONTAINER( row), box);
+  gtk_container_add (GTK_CONTAINER( ubuntu_dock_listbox), GTK_WIDGET (row));
+  gtk_widget_set_halign (label, GTK_ALIGN_START);
+  gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
+  gtk_widget_set_margin_start (label, 20);
+  gtk_widget_set_margin_end (label, 20);
+  gtk_widget_set_margin_top (label, 12);
+  gtk_widget_set_margin_bottom (label, 12);
+  gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
+  sw = gtk_switch_new ();
+  g_settings_bind (priv->ubuntu_dock_settings, "dock-fixed",
+                   sw, "active",
+                   G_SETTINGS_BIND_INVERT_BOOLEAN);
+  gtk_switch_set_active(GTK_SWITCH(sw),
+                        !g_settings_get_boolean (priv->ubuntu_dock_settings, "dock-fixed"));
+  gtk_widget_set_margin_start (sw, 20);
+  gtk_widget_set_margin_end (sw, 20);
+  gtk_widget_set_valign(sw, GTK_ALIGN_CENTER);
+  gtk_box_pack_start (GTK_BOX (box), sw, FALSE, TRUE, 0);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), sw);
+
+  label = gtk_label_new (_("Launcher icon size"));
+  row = GTK_LIST_BOX_ROW (gtk_list_box_row_new ());
+  box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 50);
+  gtk_container_add (GTK_CONTAINER( row), box);
+  gtk_container_add (GTK_CONTAINER( ubuntu_dock_listbox), GTK_WIDGET (row));
+  gtk_widget_set_halign (label, GTK_ALIGN_START);
+  gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
+  gtk_widget_set_margin_start (label, 20);
+  gtk_widget_set_margin_end (label, 20);
+  gtk_widget_set_margin_top (label, 12);
+  gtk_widget_set_margin_bottom (label, 12);
+  gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
+  /* Icon size change - we halve the sizes so we can only get even values*/
+  iconsize_adj = gtk_adjustment_new (DEFAULT_ICONSIZE / 2, MIN_ICONSIZE / 2, MAX_ICONSIZE / 2, 1, 4, 0);
+  iconsize_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, iconsize_adj);
+  gtk_scale_set_value_pos (GTK_SCALE (iconsize_scale), GTK_POS_LEFT);
+  gtk_widget_set_size_request (iconsize_scale, 264, -1);
+  gtk_scale_add_mark (GTK_SCALE (iconsize_scale), DEFAULT_ICONSIZE / 2, GTK_POS_BOTTOM, NULL);
+  g_signal_connect (priv->ubuntu_dock_settings, "changed::" ICONSIZE_KEY,
+                   G_CALLBACK (ext_iconsize_changed_callback), iconsize_adj);
+  g_signal_connect (G_OBJECT (iconsize_scale), "format-value",
+                   G_CALLBACK (on_iconsize_format_value), NULL);
+  g_signal_connect (iconsize_adj, "value_changed",
+                   G_CALLBACK (on_iconsize_changed), self);
+  iconsize_widget_refresh (iconsize_adj, priv->ubuntu_dock_settings);
+  gtk_box_pack_start (GTK_BOX (box), iconsize_scale, TRUE, TRUE, 0);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), iconsize_scale);
+
+  label = gtk_label_new (_("Launcher placement"));
+  row = GTK_LIST_BOX_ROW (gtk_list_box_row_new ());
+  box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 50);
+  gtk_container_add (GTK_CONTAINER( row), box);
+  gtk_container_add (GTK_CONTAINER( ubuntu_dock_listbox), GTK_WIDGET (row));
+  gtk_widget_set_halign (label, GTK_ALIGN_START);
+  gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
+  gtk_widget_set_margin_start (label, 20);
+  gtk_widget_set_margin_end (label, 20);
+  gtk_widget_set_margin_top (label, 12);
+  gtk_widget_set_margin_bottom (label, 12);
+  gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
+  priv->ubuntu_dock_placement_combo = gtk_combo_box_new ();
+  g_signal_connect (G_OBJECT (priv->ubuntu_dock_placement_combo), "changed",
+                    G_CALLBACK (on_ubuntu_dock_placement_combo_changed), self);
+  g_signal_connect (self->priv->ubuntu_dock_settings, "changed::" UBUNTU_DOCK_ALL_MONITORS_KEY,
+                    G_CALLBACK (ext_ubuntu_dock_placement_changed_callback), self);
+  g_signal_connect (self->priv->ubuntu_dock_settings, "changed::" UBUNTU_DOCK_ON_MONITOR_KEY,
+                    G_CALLBACK (ext_ubuntu_dock_placement_changed_callback), self);
+  gtk_box_pack_start (GTK_BOX (box), priv->ubuntu_dock_placement_combo, FALSE, TRUE, 0);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), priv->ubuntu_dock_placement_combo);
+
+  gtk_container_add (GTK_CONTAINER( mainbox), frame);
+}
+
+static void
 cc_display_panel_init (CcDisplayPanel *self)
 {
   CcDisplayPanelPrivate *priv;
@@ -2890,6 +3129,20 @@ cc_display_panel_init (CcDisplayPanel *s
   gtk_box_pack_start (GTK_BOX (box), label, FALSE, TRUE, 0);
   gtk_container_add (GTK_CONTAINER (vbox), frame);
 
+  if (strstr (g_getenv ("XDG_CURRENT_DESKTOP"), "ubuntu") != NULL)
+  {
+    GSettingsSchema *schema;
+    schema = g_settings_schema_source_lookup (g_settings_schema_source_get_default(),
+                                              UBUNTU_DOCK_SCHEMA, TRUE);
+
+    if (schema != NULL)
+    {
+      priv->ubuntu_dock_settings = g_settings_new_full (schema, NULL, NULL);
+      g_settings_schema_unref (schema);
+      cc_display_add_ubuntu_dock_settings (self, vbox);
+    }
+  }
+
   gtk_widget_show_all (vbox);
 
   on_screen_changed (self);
