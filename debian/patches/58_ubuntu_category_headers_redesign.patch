=== modified file 'shell/cc-shell-category-view.c'
--- old/shell/cc-shell-category-view.c	2012-01-19 14:14:30 +0000
+++ new/shell/cc-shell-category-view.c	2012-01-24 16:26:25 +0000
@@ -31,12 +31,14 @@
 enum
 {
   PROP_NAME = 1,
+  PROP_ICON,
   PROP_MODEL
 };
 
 struct _CcShellCategoryViewPrivate
 {
   gchar *name;
+  GIcon *icon;
   GtkTreeModel *model;
   GtkWidget *iconview;
 };
@@ -55,6 +57,10 @@
       g_value_set_string (value, priv->name);
       break;
 
+    case PROP_ICON:
+      g_value_set_object (value, priv->icon);
+      break;
+
     case PROP_MODEL:
       g_value_set_object (value, priv->model);
       break;
@@ -78,6 +84,10 @@
       priv->name = g_value_dup_string (value);
       break;
 
+    case PROP_ICON:
+      priv->icon = g_value_dup_object (value);
+      break;
+
     case PROP_MODEL:
       priv->model = g_value_dup_object (value);
       break;
@@ -91,6 +101,12 @@
 {
   CcShellCategoryViewPrivate *priv = CC_SHELL_CATEGORY_VIEW (object)->priv;
 
+  if (priv->icon)
+    {
+      g_object_unref (priv->icon);
+      priv->icon = NULL;
+    }
+
   if (priv->model)
     {
       g_object_unref (priv->model);
@@ -155,17 +171,33 @@
   /* create the header if required */
   if (priv->name)
     {
+      GtkWidget *hbox;
+
       GtkWidget *label;
       PangoAttrList *attrs;
 
+      hbox = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
+
+      if (priv->icon)
+        {
+          GtkWidget *image;
+          image = gtk_image_new_from_gicon (priv->icon, GTK_ICON_SIZE_LARGE_TOOLBAR);
+          gtk_widget_show (image);
+          gtk_box_pack_start (GTK_BOX (hbox), image, FALSE, FALSE, 0);
+        }
+
       label = gtk_label_new (priv->name);
       attrs = pango_attr_list_new ();
-      pango_attr_list_insert (attrs, pango_attr_weight_new (PANGO_WEIGHT_BOLD));
+      pango_attr_list_insert (attrs, pango_attr_size_new (PANGO_SCALE * 12));
       gtk_label_set_attributes (GTK_LABEL (label), attrs);
       pango_attr_list_unref (attrs);
-      gtk_frame_set_label_widget (GTK_FRAME (object), label);
       gtk_widget_show (label);
 
+      gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
+      gtk_frame_set_label_widget (GTK_FRAME (object), hbox);
+      gtk_frame_set_label_align (GTK_FRAME (object), 0.0, 0.0);
+      gtk_widget_show (hbox);
+
       g_signal_connect (label, "style-set", G_CALLBACK (label_style_set_cb),
                         NULL);
     }
@@ -228,6 +260,14 @@
                                | G_PARAM_STATIC_STRINGS);
   g_object_class_install_property (object_class, PROP_NAME, pspec);
 
+  pspec = g_param_spec_object ("icon",
+                               "Icon",
+                               "Icon of the category",
+                               G_TYPE_OBJECT,
+                               G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY
+                               | G_PARAM_STATIC_STRINGS);
+  g_object_class_install_property (object_class, PROP_ICON, pspec);
+
   pspec = g_param_spec_object ("model",
                                "Model",
                                "Model of the category",
@@ -248,10 +288,12 @@
 
 GtkWidget *
 cc_shell_category_view_new (const gchar  *name,
+                            GIcon        *icon,
                             GtkTreeModel *model)
 {
   return g_object_new (CC_TYPE_SHELL_CATEGORY_VIEW,
                        "name", name,
+                       "icon", icon,
                        "model", model, NULL);
 }
 

=== modified file 'shell/cc-shell-category-view.h'
--- old/shell/cc-shell-category-view.h	2012-01-19 14:14:30 +0000
+++ new/shell/cc-shell-category-view.h	2012-01-19 16:03:09 +0000
@@ -68,6 +68,7 @@
 GType cc_shell_category_view_get_type (void) G_GNUC_CONST;
 
 GtkWidget *cc_shell_category_view_new (const gchar  *name,
+                                       GIcon        *icon,
                                        GtkTreeModel *model);
 CcShellItemView* cc_shell_category_view_get_item_view (CcShellCategoryView *self);
 

=== modified file 'shell/gnome-control-center.c'
--- old/shell/gnome-control-center.c	2012-01-19 14:14:30 +0000
+++ new/shell/gnome-control-center.c	2012-01-24 16:25:58 +0000
@@ -303,7 +303,8 @@
   res = NULL;
   for (l = list; l; l = l->next)
     {
-      res = g_list_append (res, cc_shell_category_view_get_item_view (CC_SHELL_CATEGORY_VIEW (l->data)));
+      if (CC_IS_SHELL_CATEGORY_VIEW (l->data))
+        res = g_list_append (res, cc_shell_category_view_get_item_view (CC_SHELL_CATEGORY_VIEW (l->data)));
     }
 
   g_list_free (list);
@@ -643,7 +644,8 @@
 
 static void
 maybe_add_category_view (GnomeControlCenter *shell,
-                         const char         *name)
+                         const char         *name,
+                         GIcon              *icon)
 {
   GtkTreeModel *filter;
   GtkWidget *categoryview;
@@ -651,6 +653,15 @@
   if (g_hash_table_lookup (shell->priv->category_views, name) != NULL)
     return;
 
+  if (g_hash_table_size (shell->priv->category_views) > 0)
+    {
+      GtkWidget *separator;
+      separator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
+      gtk_widget_set_margin_bottom (separator, 10);
+      gtk_box_pack_start (GTK_BOX (shell->priv->main_vbox), separator, FALSE, FALSE, 0);
+      gtk_widget_show (separator);
+    }
+
   /* create new category view for this category */
   filter = gtk_tree_model_filter_new (GTK_TREE_MODEL (shell->priv->store),
                                       NULL);
@@ -658,7 +669,7 @@
                                           (GtkTreeModelFilterVisibleFunc) category_filter_func,
                                           g_strdup (name), g_free);
 
-  categoryview = cc_shell_category_view_new (name, filter);
+  categoryview = cc_shell_category_view_new (name, icon, filter);
   gtk_box_pack_start (GTK_BOX (shell->priv->main_vbox), categoryview, FALSE, TRUE, 0);
 
   g_signal_connect (cc_shell_category_view_get_item_view (CC_SHELL_CATEGORY_VIEW (categoryview)),
@@ -706,13 +717,15 @@
         {
           GMenuTreeDirectory *subdir;
           const gchar *dir_name;
+          GIcon *dir_icon;
           GMenuTreeIter *sub_iter;
           GMenuTreeItemType sub_next_type;
 
           subdir = gmenu_tree_iter_get_directory (iter);
           dir_name = gmenu_tree_directory_get_name (subdir);
+          dir_icon = gmenu_tree_directory_get_icon (subdir);
 
-          maybe_add_category_view (shell, dir_name);
+          maybe_add_category_view (shell, dir_name, dir_icon);
 
           /* add the items from this category to the model */
           sub_iter = gmenu_tree_directory_iter (subdir);

